// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'api/prepare.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'dart_compat_models.freezed.dart';

@freezed
class AmountCompat with _$AmountCompat {
  const factory AmountCompat({
    required String symbol,
    required String amount,
    required int unit,
    required String formatted,
    required String formattedAlt,
  }) = _AmountCompat;
}

enum BridgingErrorCompat {
  noRoutesAvailable,
  insufficientFunds,
  insufficientGasFunds,
  ;
}

@freezed
class CallCompat with _$CallCompat {
  const factory CallCompat({
    required String to,
    required BigInt value,
    required Uint8List input,
  }) = _CallCompat;
}

@freezed
class Eip1559EstimationCompat with _$Eip1559EstimationCompat {
  const factory Eip1559EstimationCompat({
    required String maxFeePerGas,
    required String maxPriorityFeePerGas,
  }) = _Eip1559EstimationCompat;
}

@freezed
sealed class ErrorCompat with _$ErrorCompat implements FrbException {
  const ErrorCompat._();

  const factory ErrorCompat.general(
    String field0,
  ) = ErrorCompat_General;
}

@freezed
class ExecuteDetailsCompat with _$ExecuteDetailsCompat {
  const factory ExecuteDetailsCompat({
    required TransactionReceiptCompat initialTxnReceipt,
    required String initialTxnHash,
  }) = _ExecuteDetailsCompat;
}

@freezed
class FeeEstimatedTransactionCompat with _$FeeEstimatedTransactionCompat {
  const factory FeeEstimatedTransactionCompat({
    required String chainId,
    required String from,
    required String to,
    required String value,
    required Uint8List input,
    required String gasLimit,
    required String nonce,
    required String maxFeePerGas,
    required String maxPriorityFeePerGas,
  }) = _FeeEstimatedTransactionCompat;
}

@freezed
class FundingMetadataCompat with _$FundingMetadataCompat {
  const factory FundingMetadataCompat({
    required String chainId,
    required String tokenContract,
    required String symbol,
    required String amount,
    required String bridgingFee,
    required int decimals,
  }) = _FundingMetadataCompat;
}

@freezed
class InitialTransactionMetadataCompat with _$InitialTransactionMetadataCompat {
  const factory InitialTransactionMetadataCompat({
    required String transferTo,
    required String amount,
    required String tokenContract,
    required String symbol,
    required int decimals,
  }) = _InitialTransactionMetadataCompat;
}

@freezed
class MetadataCompat with _$MetadataCompat {
  const factory MetadataCompat({
    required List<FundingMetadataCompat> fundingFrom,
    required InitialTransactionMetadataCompat initialTransaction,
    required BigInt checkIn,
  }) = _MetadataCompat;
}

@freezed
sealed class PrepareDetailedResponseCompat
    with _$PrepareDetailedResponseCompat {
  const PrepareDetailedResponseCompat._();

  const factory PrepareDetailedResponseCompat.success({
    required PrepareDetailedResponseSuccessCompat value,
  }) = PrepareDetailedResponseCompat_Success;
  const factory PrepareDetailedResponseCompat.error({
    required PrepareResponseError value,
  }) = PrepareDetailedResponseCompat_Error;
}

@freezed
sealed class PrepareDetailedResponseSuccessCompat
    with _$PrepareDetailedResponseSuccessCompat {
  const PrepareDetailedResponseSuccessCompat._();

  const factory PrepareDetailedResponseSuccessCompat.available({
    required UiFieldsCompat value,
  }) = PrepareDetailedResponseSuccessCompat_Available;
  const factory PrepareDetailedResponseSuccessCompat.notRequired({
    required PrepareResponseNotRequiredCompat value,
  }) = PrepareDetailedResponseSuccessCompat_NotRequired;
}

@freezed
class PrepareResponseAvailableCompat with _$PrepareResponseAvailableCompat {
  const factory PrepareResponseAvailableCompat({
    required String orchestrationId,
    required TransactionCompat initialTransaction,
    required List<TransactionCompat> transactions,
    required MetadataCompat metadata,
  }) = _PrepareResponseAvailableCompat;
}

@freezed
sealed class PrepareResponseCompat with _$PrepareResponseCompat {
  const PrepareResponseCompat._();

  const factory PrepareResponseCompat.success({
    required PrepareResponseSuccessCompat value,
  }) = PrepareResponseCompat_Success;
  const factory PrepareResponseCompat.error({
    required PrepareResponseErrorCompat value,
  }) = PrepareResponseCompat_Error;
}

@freezed
class PrepareResponseErrorCompat with _$PrepareResponseErrorCompat {
  const factory PrepareResponseErrorCompat({
    required BridgingErrorCompat error,
  }) = _PrepareResponseErrorCompat;
}

@freezed
class PrepareResponseNotRequiredCompat with _$PrepareResponseNotRequiredCompat {
  const factory PrepareResponseNotRequiredCompat({
    required TransactionCompat initialTransaction,
    required List<TransactionCompat> transactions,
  }) = _PrepareResponseNotRequiredCompat;
}

@freezed
sealed class PrepareResponseSuccessCompat with _$PrepareResponseSuccessCompat {
  const PrepareResponseSuccessCompat._();

  const factory PrepareResponseSuccessCompat.available({
    required PrepareResponseAvailableCompat value,
  }) = PrepareResponseSuccessCompat_Available;
  const factory PrepareResponseSuccessCompat.notRequired({
    required PrepareResponseNotRequiredCompat value,
  }) = PrepareResponseSuccessCompat_NotRequired;
}

class PrimitiveSignatureCompat {
  final bool yParity;
  final String r;
  final String s;

  const PrimitiveSignatureCompat({
    required this.yParity,
    required this.r,
    required this.s,
  });

  @override
  int get hashCode => yParity.hashCode ^ r.hashCode ^ s.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PrimitiveSignatureCompat &&
          runtimeType == other.runtimeType &&
          yParity == other.yParity &&
          r == other.r &&
          s == other.s;
}

@freezed
class PulseMetadataCompat with _$PulseMetadataCompat {
  const factory PulseMetadataCompat({
    String? url,
    String? bundleId,
    String? packageName,
    required String sdkVersion,
    required String sdkPlatform,
  }) = _PulseMetadataCompat;
}

@freezed
class TransactionCompat with _$TransactionCompat {
  const factory TransactionCompat({
    required String chainId,
    required String from,
    required String to,
    required String value,
    required Uint8List input,
    required BigInt gasLimit,
    required BigInt nonce,
  }) = _TransactionCompat;
}

@freezed
class TransactionFeeCompat with _$TransactionFeeCompat {
  const factory TransactionFeeCompat({
    required AmountCompat fee,
    required AmountCompat localFee,
  }) = _TransactionFeeCompat;
}

@freezed
class TransactionReceiptCompat with _$TransactionReceiptCompat {
  const factory TransactionReceiptCompat({
    required String transactionHash,
    BigInt? transactionIndex,
    String? blockHash,
    BigInt? blockNumber,
    required BigInt gasUsed,
    required String effectiveGasPrice,
    BigInt? blobGasUsed,
    String? blobGasPrice,
    required String from,
    String? to,
    String? contractAddress,
  }) = _TransactionReceiptCompat;
}

@freezed
class TxnDetailsCompat with _$TxnDetailsCompat {
  const factory TxnDetailsCompat({
    required FeeEstimatedTransactionCompat transaction,
    required String transactionHashToSign,
    required TransactionFeeCompat fee,
  }) = _TxnDetailsCompat;
}

@freezed
class UiFieldsCompat with _$UiFieldsCompat {
  const factory UiFieldsCompat({
    required PrepareResponseAvailableCompat routeResponse,
    required List<TxnDetailsCompat> route,
    required AmountCompat localRouteTotal,
    required List<TransactionFeeCompat> bridge,
    required AmountCompat localBridgeTotal,
    required TxnDetailsCompat initial,
    required AmountCompat localTotal,
  }) = _UiFieldsCompat;
}
