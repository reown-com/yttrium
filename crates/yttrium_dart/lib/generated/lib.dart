// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'lib.freezed.dart';

// These types are ignored because they are not used by any `pub` functions: `PreparedSignature`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Address>>
abstract class Address implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Call>>
abstract class Call implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>
abstract class ChainAbstractionClient implements RustOpaqueInterface {
  String get projectId;

  set projectId(String projectId);

  Future<String> erc20TokenBalance(
      {required String chainId,
      required Address token,
      required Address owner});

  Future<Eip1559Estimation> estimateFees({required String chainId});

  Future<UiFields> getUiFields(
      {required PrepareResponseAvailable routeResponse,
      required Currency currency});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ChainAbstractionClient> newInstance(
          {required String projectId}) =>
      YttriumDart.instance.api
          .crateChainAbstractionClientNew(projectId: projectId);

  Future<PrepareResponse> prepare(
      {required String chainId, required Address from, required Call call});

  Future<StatusResponse> status({required String orchestrationId});

  Future<StatusResponseCompleted> waitForSuccessWithTimeout(
      {required String orchestrationId,
      required BigInt checkIn,
      required BigInt timeout});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Currency>>
abstract class Currency implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareResponse>>
abstract class PrepareResponse implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareResponseAvailable>>
abstract class PrepareResponseAvailable implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StatusResponse>>
abstract class StatusResponse implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StatusResponseCompleted>>
abstract class StatusResponseCompleted implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UiFields>>
abstract class UiFields implements RustOpaqueInterface {}

class Eip1559Estimation {
  /// The base fee per gas as a String.
  final String maxFeePerGas;

  /// The max priority fee per gas as a String.
  final String maxPriorityFeePerGas;

  const Eip1559Estimation({
    required this.maxFeePerGas,
    required this.maxPriorityFeePerGas,
  });

  @override
  int get hashCode => maxFeePerGas.hashCode ^ maxPriorityFeePerGas.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Eip1559Estimation &&
          runtimeType == other.runtimeType &&
          maxFeePerGas == other.maxFeePerGas &&
          maxPriorityFeePerGas == other.maxPriorityFeePerGas;
}

@freezed
sealed class Error with _$Error implements FrbException {
  const Error._();

  const factory Error.general(
    String field0,
  ) = Error_General;
}
