// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class YttriumDart extends BaseEntrypoint<YttriumDartApi, YttriumDartApiImpl,
    YttriumDartWire> {
  @internal
  static final instance = YttriumDart._();

  YttriumDart._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    YttriumDartApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required YttriumDartApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<YttriumDartApiImpl, YttriumDartWire>
      get apiImplConstructor => YttriumDartApiImpl.new;

  @override
  WireConstructor<YttriumDartWire> get wireConstructor =>
      YttriumDartWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => -931598552;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'yttrium_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class YttriumDartApi extends BaseApi {
  BigInt crateAccountClientConfigAutoAccessorGetChainId(
      {required AccountClientConfig that});

  Config crateAccountClientConfigAutoAccessorGetConfig(
      {required AccountClientConfig that});

  String crateAccountClientConfigAutoAccessorGetOwnerAddress(
      {required AccountClientConfig that});

  void crateAccountClientConfigAutoAccessorSetChainId(
      {required AccountClientConfig that, required BigInt chainId});

  void crateAccountClientConfigAutoAccessorSetConfig(
      {required AccountClientConfig that, required Config config});

  void crateAccountClientConfigAutoAccessorSetOwnerAddress(
      {required AccountClientConfig that, required String ownerAddress});

  BigInt crateAccountClientAutoAccessorGetChainId(
      {required AccountClient that});

  String crateAccountClientAutoAccessorGetOwnerAddress(
      {required AccountClient that});

  void crateAccountClientAutoAccessorSetChainId(
      {required AccountClient that, required BigInt chainId});

  void crateAccountClientAutoAccessorSetOwnerAddress(
      {required AccountClient that, required String ownerAddress});

  Future<String> crateAccountClientDoSendTransactions(
      {required AccountClient that,
      required List<OwnerSignature> signatures,
      required String doSendTransactionParams});

  Future<String> crateAccountClientGetAddress({required AccountClient that});

  Future<BigInt> crateAccountClientGetChainId({required AccountClient that});

  Future<AccountClient> crateAccountClientNew(
      {required AccountClientConfig config});

  Future<PreparedSendTransaction> crateAccountClientPrepareSendTransactions(
      {required AccountClient that, required List<Transaction> transactions});

  Future<String> crateAccountClientWaitForUserOperationReceipt(
      {required AccountClient that, required String userOperationHash});

  String crateChainAbstractionClientAutoAccessorGetProjectId(
      {required ChainAbstractionClient that});

  void crateChainAbstractionClientAutoAccessorSetProjectId(
      {required ChainAbstractionClient that, required String projectId});

  Future<Ffiu256> crateChainAbstractionClientErc20TokenBalance(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address token,
      required Address owner});

  Future<Eip1559Estimation> crateChainAbstractionClientEstimateFees(
      {required ChainAbstractionClient that, required String chainId});

  Future<UiFields> crateChainAbstractionClientGetUiFields(
      {required ChainAbstractionClient that,
      required RouteResponseAvailable routeResponse,
      required Currency currency});

  Future<ChainAbstractionClient> crateChainAbstractionClientNew(
      {required String projectId});

  Future<PrepareResponse> crateChainAbstractionClientPrepare(
      {required ChainAbstractionClient that,
      required InitialTransaction initialTransaction});

  Future<StatusResponse> crateChainAbstractionClientStatus(
      {required ChainAbstractionClient that, required String orchestrationId});

  Future<StatusResponseCompleted>
      crateChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout});

  Ffiu128 crateEip1559EstimationAutoAccessorGetMaxFeePerGas(
      {required Eip1559Estimation that});

  Ffiu128 crateEip1559EstimationAutoAccessorGetMaxPriorityFeePerGas(
      {required Eip1559Estimation that});

  void crateEip1559EstimationAutoAccessorSetMaxFeePerGas(
      {required Eip1559Estimation that, required Ffiu128 maxFeePerGas});

  void crateEip1559EstimationAutoAccessorSetMaxPriorityFeePerGas(
      {required Eip1559Estimation that, required Ffiu128 maxPriorityFeePerGas});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AccountClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AccountClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AccountClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AccountClientConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AccountClientConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AccountClientConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Address;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Address;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddressPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChainAbstractionClientPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Config;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Config;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Currency;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Currency;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CurrencyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Eip1559Estimation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Eip1559Estimation;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_Eip1559EstimationPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ffiu128;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ffiu128;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ffiu128Ptr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ffiu256;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ffiu256;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ffiu256Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InitialTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InitialTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_InitialTransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrepareResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RouteResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RouteResponseAvailable;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RouteResponseAvailablePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StatusResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponseCompleted;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponseCompleted;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StatusResponseCompletedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UiFieldsPtr;
}

class YttriumDartApiImpl extends YttriumDartApiImplPlatform
    implements YttriumDartApi {
  YttriumDartApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  BigInt crateAccountClientConfigAutoAccessorGetChainId(
      {required AccountClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorGetChainIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientConfigAutoAccessorGetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClientConfig_auto_accessor_get_chain_id',
        argNames: ['that'],
      );

  @override
  Config crateAccountClientConfigAutoAccessorGetConfig(
      {required AccountClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorGetConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientConfigAutoAccessorGetConfigConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClientConfig_auto_accessor_get_config',
        argNames: ['that'],
      );

  @override
  String crateAccountClientConfigAutoAccessorGetOwnerAddress(
      {required AccountClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorGetOwnerAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateAccountClientConfigAutoAccessorGetOwnerAddressConstMeta =>
          const TaskConstMeta(
            debugName: 'AccountClientConfig_auto_accessor_get_owner_address',
            argNames: ['that'],
          );

  @override
  void crateAccountClientConfigAutoAccessorSetChainId(
      {required AccountClientConfig that, required BigInt chainId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        sse_encode_u_64(chainId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorSetChainIdConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientConfigAutoAccessorSetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClientConfig_auto_accessor_set_chain_id',
        argNames: ['that', 'chainId'],
      );

  @override
  void crateAccountClientConfigAutoAccessorSetConfig(
      {required AccountClientConfig that, required Config config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
            config, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorSetConfigConstMeta,
      argValues: [that, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientConfigAutoAccessorSetConfigConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClientConfig_auto_accessor_set_config',
        argNames: ['that', 'config'],
      );

  @override
  void crateAccountClientConfigAutoAccessorSetOwnerAddress(
      {required AccountClientConfig that, required String ownerAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            that, serializer);
        sse_encode_String(ownerAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientConfigAutoAccessorSetOwnerAddressConstMeta,
      argValues: [that, ownerAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateAccountClientConfigAutoAccessorSetOwnerAddressConstMeta =>
          const TaskConstMeta(
            debugName: 'AccountClientConfig_auto_accessor_set_owner_address',
            argNames: ['that', 'ownerAddress'],
          );

  @override
  BigInt crateAccountClientAutoAccessorGetChainId(
      {required AccountClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientAutoAccessorGetChainIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientAutoAccessorGetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_auto_accessor_get_chain_id',
        argNames: ['that'],
      );

  @override
  String crateAccountClientAutoAccessorGetOwnerAddress(
      {required AccountClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientAutoAccessorGetOwnerAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientAutoAccessorGetOwnerAddressConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_auto_accessor_get_owner_address',
        argNames: ['that'],
      );

  @override
  void crateAccountClientAutoAccessorSetChainId(
      {required AccountClient that, required BigInt chainId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        sse_encode_u_64(chainId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientAutoAccessorSetChainIdConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientAutoAccessorSetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_auto_accessor_set_chain_id',
        argNames: ['that', 'chainId'],
      );

  @override
  void crateAccountClientAutoAccessorSetOwnerAddress(
      {required AccountClient that, required String ownerAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        sse_encode_String(ownerAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientAutoAccessorSetOwnerAddressConstMeta,
      argValues: [that, ownerAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientAutoAccessorSetOwnerAddressConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_auto_accessor_set_owner_address',
        argNames: ['that', 'ownerAddress'],
      );

  @override
  Future<String> crateAccountClientDoSendTransactions(
      {required AccountClient that,
      required List<OwnerSignature> signatures,
      required String doSendTransactionParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        sse_encode_list_owner_signature(signatures, serializer);
        sse_encode_String(doSendTransactionParams, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateAccountClientDoSendTransactionsConstMeta,
      argValues: [that, signatures, doSendTransactionParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientDoSendTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_do_send_transactions',
        argNames: ['that', 'signatures', 'doSendTransactionParams'],
      );

  @override
  Future<String> crateAccountClientGetAddress({required AccountClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateAccountClientGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientGetAddressConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_get_address',
        argNames: ['that'],
      );

  @override
  Future<BigInt> crateAccountClientGetChainId({required AccountClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientGetChainIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientGetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_get_chain_id',
        argNames: ['that'],
      );

  @override
  Future<AccountClient> crateAccountClientNew(
      {required AccountClientConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateAccountClientNewConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientNewConstMeta => const TaskConstMeta(
        debugName: 'AccountClient_new',
        argNames: ['config'],
      );

  @override
  Future<PreparedSendTransaction> crateAccountClientPrepareSendTransactions(
      {required AccountClient that, required List<Transaction> transactions}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        sse_encode_list_transaction(transactions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_prepared_send_transaction,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateAccountClientPrepareSendTransactionsConstMeta,
      argValues: [that, transactions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientPrepareSendTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_prepare_send_transactions',
        argNames: ['that', 'transactions'],
      );

  @override
  Future<String> crateAccountClientWaitForUserOperationReceipt(
      {required AccountClient that, required String userOperationHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
            that, serializer);
        sse_encode_String(userOperationHash, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateAccountClientWaitForUserOperationReceiptConstMeta,
      argValues: [that, userOperationHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateAccountClientWaitForUserOperationReceiptConstMeta =>
      const TaskConstMeta(
        debugName: 'AccountClient_wait_for_user_operation_receipt',
        argNames: ['that', 'userOperationHash'],
      );

  @override
  String crateChainAbstractionClientAutoAccessorGetProjectId(
      {required ChainAbstractionClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientAutoAccessorGetProjectIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientAutoAccessorGetProjectIdConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_auto_accessor_get_project_id',
            argNames: ['that'],
          );

  @override
  void crateChainAbstractionClientAutoAccessorSetProjectId(
      {required ChainAbstractionClient that, required String projectId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(projectId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientAutoAccessorSetProjectIdConstMeta,
      argValues: [that, projectId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientAutoAccessorSetProjectIdConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_auto_accessor_set_project_id',
            argNames: ['that', 'projectId'],
          );

  @override
  Future<Ffiu256> crateChainAbstractionClientErc20TokenBalance(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address token,
      required Address owner}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
            token, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
            owner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientErc20TokenBalanceConstMeta,
      argValues: [that, chainId, token, owner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientErc20TokenBalanceConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_erc20_token_balance',
        argNames: ['that', 'chainId', 'token', 'owner'],
      );

  @override
  Future<Eip1559Estimation> crateChainAbstractionClientEstimateFees(
      {required ChainAbstractionClient that, required String chainId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientEstimateFeesConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientEstimateFeesConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_estimate_fees',
        argNames: ['that', 'chainId'],
      );

  @override
  Future<UiFields> crateChainAbstractionClientGetUiFields(
      {required ChainAbstractionClient that,
      required RouteResponseAvailable routeResponse,
      required Currency currency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
            routeResponse, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
            currency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientGetUiFieldsConstMeta,
      argValues: [that, routeResponse, currency],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientGetUiFieldsConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_get_ui_fields',
        argNames: ['that', 'routeResponse', 'currency'],
      );

  @override
  Future<ChainAbstractionClient> crateChainAbstractionClientNew(
      {required String projectId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(projectId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientNewConstMeta,
      argValues: [projectId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientNewConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_new',
        argNames: ['projectId'],
      );

  @override
  Future<PrepareResponse> crateChainAbstractionClientPrepare(
      {required ChainAbstractionClient that,
      required InitialTransaction initialTransaction}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
            initialTransaction, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientPrepareConstMeta,
      argValues: [that, initialTransaction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientPrepareConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_prepare',
        argNames: ['that', 'initialTransaction'],
      );

  @override
  Future<StatusResponse> crateChainAbstractionClientStatus(
      {required ChainAbstractionClient that, required String orchestrationId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientStatusConstMeta,
      argValues: [that, orchestrationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientStatusConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_status',
        argNames: ['that', 'orchestrationId'],
      );

  @override
  Future<StatusResponseCompleted>
      crateChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        sse_encode_u_64(checkIn, serializer);
        sse_encode_u_64(timeout, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateChainAbstractionClientWaitForSuccessWithTimeoutConstMeta,
      argValues: [that, orchestrationId, checkIn, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientWaitForSuccessWithTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_wait_for_success_with_timeout',
            argNames: ['that', 'orchestrationId', 'checkIn', 'timeout'],
          );

  @override
  Ffiu128 crateEip1559EstimationAutoAccessorGetMaxFeePerGas(
      {required Eip1559Estimation that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128,
        decodeErrorData: null,
      ),
      constMeta: kCrateEip1559EstimationAutoAccessorGetMaxFeePerGasConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateEip1559EstimationAutoAccessorGetMaxFeePerGasConstMeta =>
          const TaskConstMeta(
            debugName: 'Eip1559Estimation_auto_accessor_get_max_fee_per_gas',
            argNames: ['that'],
          );

  @override
  Ffiu128 crateEip1559EstimationAutoAccessorGetMaxPriorityFeePerGas(
      {required Eip1559Estimation that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateEip1559EstimationAutoAccessorGetMaxPriorityFeePerGasConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateEip1559EstimationAutoAccessorGetMaxPriorityFeePerGasConstMeta =>
          const TaskConstMeta(
            debugName:
                'Eip1559Estimation_auto_accessor_get_max_priority_fee_per_gas',
            argNames: ['that'],
          );

  @override
  void crateEip1559EstimationAutoAccessorSetMaxFeePerGas(
      {required Eip1559Estimation that, required Ffiu128 maxFeePerGas}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
            maxFeePerGas, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateEip1559EstimationAutoAccessorSetMaxFeePerGasConstMeta,
      argValues: [that, maxFeePerGas],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateEip1559EstimationAutoAccessorSetMaxFeePerGasConstMeta =>
          const TaskConstMeta(
            debugName: 'Eip1559Estimation_auto_accessor_set_max_fee_per_gas',
            argNames: ['that', 'maxFeePerGas'],
          );

  @override
  void crateEip1559EstimationAutoAccessorSetMaxPriorityFeePerGas(
      {required Eip1559Estimation that,
      required Ffiu128 maxPriorityFeePerGas}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
            maxPriorityFeePerGas, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateEip1559EstimationAutoAccessorSetMaxPriorityFeePerGasConstMeta,
      argValues: [that, maxPriorityFeePerGas],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateEip1559EstimationAutoAccessorSetMaxPriorityFeePerGasConstMeta =>
          const TaskConstMeta(
            debugName:
                'Eip1559Estimation_auto_accessor_set_max_priority_fee_per_gas',
            argNames: ['that', 'maxPriorityFeePerGas'],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AccountClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AccountClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AccountClientConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AccountClientConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Address => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Address => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Config => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Config => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Currency => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Currency => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Eip1559Estimation => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Eip1559Estimation => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Ffiu128 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Ffiu128 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Ffiu256 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Ffiu256 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InitialTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InitialTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RouteResponseAvailable => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RouteResponseAvailable => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponseCompleted => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponseCompleted => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  @protected
  AccountClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClientConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Address
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Config
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Currency
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CurrencyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Eip1559Estimation
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ffiu128
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ffiu128Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ffiu256
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ffiu256Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InitialTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InitialTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponse
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RouteResponseAvailable
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RouteResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StatusResponse
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponseCompleted
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClientConfig
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Eip1559Estimation
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClientConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Eip1559Estimation
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AccountClientConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Address
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Config
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Currency
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CurrencyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Eip1559Estimation
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ffiu128
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ffiu128Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ffiu256
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ffiu256Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InitialTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InitialTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponse
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RouteResponseAvailable
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RouteResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StatusResponse
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponseCompleted
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_General(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  List<OwnerSignature> dco_decode_list_owner_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_owner_signature).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  OwnerSignature dco_decode_owner_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OwnerSignature(
      owner: dco_decode_String(arr[0]),
      signature: dco_decode_String(arr[1]),
    );
  }

  @protected
  PreparedSendTransaction dco_decode_prepared_send_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PreparedSendTransaction(
      hash: dco_decode_String(arr[0]),
      doSendTransactionParams: dco_decode_String(arr[1]),
    );
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Transaction(
      to: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
      data: dco_decode_String(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AccountClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClientConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Address
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Config
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Currency
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CurrencyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Eip1559Estimation
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ffiu128
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ffiu128Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ffiu256
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ffiu256Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InitialTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InitialTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponse
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RouteResponseAvailable
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RouteResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponse
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponseCompleted
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClientConfig
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Eip1559Estimation
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClientConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Eip1559Estimation
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AccountClientConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Address
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Config
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Currency
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CurrencyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Eip1559Estimation
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Eip1559EstimationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ffiu128
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ffiu128Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ffiu256
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ffiu256Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InitialTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InitialTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponse
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RouteResponseAvailable
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RouteResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponse
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponseCompleted
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return Error_General(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<OwnerSignature> sse_decode_list_owner_signature(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OwnerSignature>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_owner_signature(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  OwnerSignature sse_decode_owner_signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_owner = sse_decode_String(deserializer);
    var var_signature = sse_decode_String(deserializer);
    return OwnerSignature(owner: var_owner, signature: var_signature);
  }

  @protected
  PreparedSendTransaction sse_decode_prepared_send_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hash = sse_decode_String(deserializer);
    var var_doSendTransactionParams = sse_decode_String(deserializer);
    return PreparedSendTransaction(
        hash: var_hash, doSendTransactionParams: var_doSendTransactionParams);
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_to = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_data = sse_decode_String(deserializer);
    return Transaction(to: var_to, value: var_value, data: var_data);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          AccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          AccountClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConfigImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CurrencyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Eip1559EstimationImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          Ffiu128 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Ffiu128Impl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          Ffiu256 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Ffiu256Impl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          InitialTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InitialTransactionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          PrepareResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          RouteResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RouteResponseAvailableImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          StatusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseCompletedImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          AccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          AccountClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Eip1559EstimationImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          AccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          AccountClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Eip1559EstimationImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClient(
          AccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccountClientConfig(
          AccountClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AccountClientConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CurrencyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEip1559Estimation(
          Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Eip1559EstimationImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU128(
          Ffiu128 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Ffiu128Impl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIU256(
          Ffiu256 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as Ffiu256Impl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitialTransaction(
          InitialTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InitialTransactionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          PrepareResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRouteResponseAvailable(
          RouteResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RouteResponseAvailableImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          StatusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseCompletedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_General(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_owner_signature(
      List<OwnerSignature> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_owner_signature(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_transaction(
      List<Transaction> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_owner_signature(
      OwnerSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.owner, serializer);
    sse_encode_String(self.signature, serializer);
  }

  @protected
  void sse_encode_prepared_send_transaction(
      PreparedSendTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hash, serializer);
    sse_encode_String(self.doSendTransactionParams, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.to, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.data, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class AccountClientConfigImpl extends RustOpaque
    implements AccountClientConfig {
  // Not to be used by end users
  AccountClientConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AccountClientConfigImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_AccountClientConfig,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_AccountClientConfig,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_AccountClientConfigPtr,
  );

  BigInt get chainId =>
      YttriumDart.instance.api.crateAccountClientConfigAutoAccessorGetChainId(
        that: this,
      );

  Config get config =>
      YttriumDart.instance.api.crateAccountClientConfigAutoAccessorGetConfig(
        that: this,
      );

  String get ownerAddress => YttriumDart.instance.api
          .crateAccountClientConfigAutoAccessorGetOwnerAddress(
        that: this,
      );

  set chainId(BigInt chainId) =>
      YttriumDart.instance.api.crateAccountClientConfigAutoAccessorSetChainId(
          that: this, chainId: chainId);

  set config(Config config) =>
      YttriumDart.instance.api.crateAccountClientConfigAutoAccessorSetConfig(
          that: this, config: config);

  set ownerAddress(String ownerAddress) => YttriumDart.instance.api
      .crateAccountClientConfigAutoAccessorSetOwnerAddress(
          that: this, ownerAddress: ownerAddress);
}

@sealed
class AccountClientImpl extends RustOpaque implements AccountClient {
  // Not to be used by end users
  AccountClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AccountClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_AccountClient,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_AccountClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_AccountClientPtr,
  );

  BigInt get chainId =>
      YttriumDart.instance.api.crateAccountClientAutoAccessorGetChainId(
        that: this,
      );

  String get ownerAddress =>
      YttriumDart.instance.api.crateAccountClientAutoAccessorGetOwnerAddress(
        that: this,
      );

  set chainId(BigInt chainId) => YttriumDart.instance.api
      .crateAccountClientAutoAccessorSetChainId(that: this, chainId: chainId);

  set ownerAddress(String ownerAddress) =>
      YttriumDart.instance.api.crateAccountClientAutoAccessorSetOwnerAddress(
          that: this, ownerAddress: ownerAddress);

  Future<String> doSendTransactions(
          {required List<OwnerSignature> signatures,
          required String doSendTransactionParams}) =>
      YttriumDart.instance.api.crateAccountClientDoSendTransactions(
          that: this,
          signatures: signatures,
          doSendTransactionParams: doSendTransactionParams);

  Future<String> getAddress() =>
      YttriumDart.instance.api.crateAccountClientGetAddress(
        that: this,
      );

  Future<BigInt> getChainId() =>
      YttriumDart.instance.api.crateAccountClientGetChainId(
        that: this,
      );

  Future<PreparedSendTransaction> prepareSendTransactions(
          {required List<Transaction> transactions}) =>
      YttriumDart.instance.api.crateAccountClientPrepareSendTransactions(
          that: this, transactions: transactions);

  Future<String> waitForUserOperationReceipt(
          {required String userOperationHash}) =>
      YttriumDart.instance.api.crateAccountClientWaitForUserOperationReceipt(
          that: this, userOperationHash: userOperationHash);
}

@sealed
class AddressImpl extends RustOpaque implements Address {
  // Not to be used by end users
  AddressImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Address,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Address,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_AddressPtr,
  );
}

@sealed
class ChainAbstractionClientImpl extends RustOpaque
    implements ChainAbstractionClient {
  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClientPtr,
  );

  String get projectId => YttriumDart.instance.api
          .crateChainAbstractionClientAutoAccessorGetProjectId(
        that: this,
      );

  set projectId(String projectId) => YttriumDart.instance.api
      .crateChainAbstractionClientAutoAccessorSetProjectId(
          that: this, projectId: projectId);

  Future<Ffiu256> erc20TokenBalance(
          {required String chainId,
          required Address token,
          required Address owner}) =>
      YttriumDart.instance.api.crateChainAbstractionClientErc20TokenBalance(
          that: this, chainId: chainId, token: token, owner: owner);

  Future<Eip1559Estimation> estimateFees({required String chainId}) =>
      YttriumDart.instance.api.crateChainAbstractionClientEstimateFees(
          that: this, chainId: chainId);

  Future<UiFields> getUiFields(
          {required RouteResponseAvailable routeResponse,
          required Currency currency}) =>
      YttriumDart.instance.api.crateChainAbstractionClientGetUiFields(
          that: this, routeResponse: routeResponse, currency: currency);

  Future<PrepareResponse> prepare(
          {required InitialTransaction initialTransaction}) =>
      YttriumDart.instance.api.crateChainAbstractionClientPrepare(
          that: this, initialTransaction: initialTransaction);

  Future<StatusResponse> status({required String orchestrationId}) =>
      YttriumDart.instance.api.crateChainAbstractionClientStatus(
          that: this, orchestrationId: orchestrationId);

  Future<StatusResponseCompleted> waitForSuccessWithTimeout(
          {required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) =>
      YttriumDart.instance.api
          .crateChainAbstractionClientWaitForSuccessWithTimeout(
              that: this,
              orchestrationId: orchestrationId,
              checkIn: checkIn,
              timeout: timeout);
}

@sealed
class ConfigImpl extends RustOpaque implements Config {
  // Not to be used by end users
  ConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Config,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Config,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_ConfigPtr,
  );
}

@sealed
class CurrencyImpl extends RustOpaque implements Currency {
  // Not to be used by end users
  CurrencyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CurrencyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Currency,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Currency,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_CurrencyPtr,
  );
}

@sealed
class Eip1559EstimationImpl extends RustOpaque implements Eip1559Estimation {
  // Not to be used by end users
  Eip1559EstimationImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Eip1559EstimationImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_Eip1559Estimation,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_Eip1559Estimation,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_Eip1559EstimationPtr,
  );

  Ffiu128 get maxFeePerGas => YttriumDart.instance.api
          .crateEip1559EstimationAutoAccessorGetMaxFeePerGas(
        that: this,
      );

  Ffiu128 get maxPriorityFeePerGas => YttriumDart.instance.api
          .crateEip1559EstimationAutoAccessorGetMaxPriorityFeePerGas(
        that: this,
      );

  set maxFeePerGas(Ffiu128 maxFeePerGas) => YttriumDart.instance.api
      .crateEip1559EstimationAutoAccessorSetMaxFeePerGas(
          that: this, maxFeePerGas: maxFeePerGas);

  set maxPriorityFeePerGas(Ffiu128 maxPriorityFeePerGas) => YttriumDart
      .instance.api
      .crateEip1559EstimationAutoAccessorSetMaxPriorityFeePerGas(
          that: this, maxPriorityFeePerGas: maxPriorityFeePerGas);
}

@sealed
class Ffiu128Impl extends RustOpaque implements Ffiu128 {
  // Not to be used by end users
  Ffiu128Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ffiu128Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Ffiu128,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Ffiu128,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Ffiu128Ptr,
  );
}

@sealed
class Ffiu256Impl extends RustOpaque implements Ffiu256 {
  // Not to be used by end users
  Ffiu256Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ffiu256Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Ffiu256,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Ffiu256,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Ffiu256Ptr,
  );
}

@sealed
class InitialTransactionImpl extends RustOpaque implements InitialTransaction {
  // Not to be used by end users
  InitialTransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InitialTransactionImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_InitialTransaction,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_InitialTransaction,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_InitialTransactionPtr,
  );
}

@sealed
class PrepareResponseImpl extends RustOpaque implements PrepareResponse {
  // Not to be used by end users
  PrepareResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrepareResponseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PrepareResponse,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponse,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponsePtr,
  );
}

@sealed
class RouteResponseAvailableImpl extends RustOpaque
    implements RouteResponseAvailable {
  // Not to be used by end users
  RouteResponseAvailableImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RouteResponseAvailableImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_RouteResponseAvailable,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_RouteResponseAvailable,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_RouteResponseAvailablePtr,
  );
}

@sealed
class StatusResponseCompletedImpl extends RustOpaque
    implements StatusResponseCompleted {
  // Not to be used by end users
  StatusResponseCompletedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StatusResponseCompletedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_StatusResponseCompleted,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_StatusResponseCompleted,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_StatusResponseCompletedPtr,
  );
}

@sealed
class StatusResponseImpl extends RustOpaque implements StatusResponse {
  // Not to be used by end users
  StatusResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StatusResponseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_StatusResponse,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_StatusResponse,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_StatusResponsePtr,
  );
}

@sealed
class UiFieldsImpl extends RustOpaque implements UiFields {
  // Not to be used by end users
  UiFieldsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UiFieldsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_UiFields,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFields,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFieldsPtr,
  );
}
