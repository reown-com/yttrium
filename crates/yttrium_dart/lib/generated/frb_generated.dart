// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class YttriumDart extends BaseEntrypoint<YttriumDartApi, YttriumDartApiImpl,
    YttriumDartWire> {
  @internal
  static final instance = YttriumDart._();

  YttriumDart._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    YttriumDartApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required YttriumDartApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<YttriumDartApiImpl, YttriumDartWire>
      get apiImplConstructor => YttriumDartApiImpl.new;

  @override
  WireConstructor<YttriumDartWire> get wireConstructor =>
      YttriumDartWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => 2017709670;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'yttrium_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class YttriumDartApi extends BaseApi {
  String crateChainAbstractionClientAutoAccessorGetProjectId(
      {required ChainAbstractionClient that});

  void crateChainAbstractionClientAutoAccessorSetProjectId(
      {required ChainAbstractionClient that, required String projectId});

  Future<String> crateChainAbstractionClientErc20TokenBalance(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address token,
      required Address owner});

  Future<Eip1559Estimation> crateChainAbstractionClientEstimateFees(
      {required ChainAbstractionClient that, required String chainId});

  Future<UiFields> crateChainAbstractionClientGetUiFields(
      {required ChainAbstractionClient that,
      required PrepareResponseAvailable routeResponse,
      required Currency currency});

  Future<ChainAbstractionClient> crateChainAbstractionClientNew(
      {required String projectId});

  Future<PrepareResponse> crateChainAbstractionClientPrepare(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address from,
      required Call call});

  Future<StatusResponse> crateChainAbstractionClientStatus(
      {required ChainAbstractionClient that, required String orchestrationId});

  Future<StatusResponseCompleted>
      crateChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout});

  BigInt crateFfiAccountClientAutoAccessorGetChainId(
      {required FfiAccountClient that});

  FfiAccountAddress crateFfiAccountClientAutoAccessorGetOwnerAddress(
      {required FfiAccountClient that});

  void crateFfiAccountClientAutoAccessorSetChainId(
      {required FfiAccountClient that, required BigInt chainId});

  void crateFfiAccountClientAutoAccessorSetOwnerAddress(
      {required FfiAccountClient that,
      required FfiAccountAddress ownerAddress});

  Future<String> crateFfiAccountClientDoSendTransactions(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures,
      required DoSendTransactionParams doSendTransactionParams});

  Future<SignOutputEnum> crateFfiAccountClientDoSignMessage(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures});

  Future<Uint8List> crateFfiAccountClientFinalizeSignMessage(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures,
      required SignStep3Params signStep3Params});

  Future<String> crateFfiAccountClientGetAddress(
      {required FfiAccountClient that});

  Future<BigInt> crateFfiAccountClientGetChainId(
      {required FfiAccountClient that});

  Future<FfiAccountClient> crateFfiAccountClientNew(
      {required FfiAccountAddress owner,
      required BigInt chainId,
      required Config config});

  Future<PreparedSendTransaction> crateFfiAccountClientPrepareSendTransactions(
      {required FfiAccountClient that, required List<Call> transactions});

  Future<FfiPreparedSignature> crateFfiAccountClientPrepareSignMessage(
      {required FfiAccountClient that, required String messageHash});

  Future<String> crateFfiAccountClientWaitForUserOperationReceipt(
      {required FfiAccountClient that, required String userOperationHash});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Address;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Address;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddressPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Call;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Call;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CallPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChainAbstractionClientPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Config;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Config;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Currency;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Currency;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CurrencyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DoSendTransactionParams;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DoSendTransactionParams;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DoSendTransactionParamsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiAccountClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiAccountClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FfiAccountClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiAccountAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiAccountAddress;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FfiAccountAddressPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnerSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnerSignature;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OwnerSignaturePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrepareResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponseAvailable;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrepareResponseAvailablePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PreparedSendTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PreparedSendTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PreparedSendTransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignOutputEnum;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignOutputEnum;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SignOutputEnumPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignStep3Params;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignStep3Params;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SignStep3ParamsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StatusResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponseCompleted;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponseCompleted;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StatusResponseCompletedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UiFieldsPtr;
}

class YttriumDartApiImpl extends YttriumDartApiImplPlatform
    implements YttriumDartApi {
  YttriumDartApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateChainAbstractionClientAutoAccessorGetProjectId(
      {required ChainAbstractionClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientAutoAccessorGetProjectIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientAutoAccessorGetProjectIdConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_auto_accessor_get_project_id',
            argNames: ['that'],
          );

  @override
  void crateChainAbstractionClientAutoAccessorSetProjectId(
      {required ChainAbstractionClient that, required String projectId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(projectId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientAutoAccessorSetProjectIdConstMeta,
      argValues: [that, projectId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientAutoAccessorSetProjectIdConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_auto_accessor_set_project_id',
            argNames: ['that', 'projectId'],
          );

  @override
  Future<String> crateChainAbstractionClientErc20TokenBalance(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address token,
      required Address owner}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
            token, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
            owner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientErc20TokenBalanceConstMeta,
      argValues: [that, chainId, token, owner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientErc20TokenBalanceConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_erc20_token_balance',
        argNames: ['that', 'chainId', 'token', 'owner'],
      );

  @override
  Future<Eip1559Estimation> crateChainAbstractionClientEstimateFees(
      {required ChainAbstractionClient that, required String chainId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eip_1559_estimation,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientEstimateFeesConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientEstimateFeesConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_estimate_fees',
        argNames: ['that', 'chainId'],
      );

  @override
  Future<UiFields> crateChainAbstractionClientGetUiFields(
      {required ChainAbstractionClient that,
      required PrepareResponseAvailable routeResponse,
      required Currency currency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
            routeResponse, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
            currency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientGetUiFieldsConstMeta,
      argValues: [that, routeResponse, currency],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientGetUiFieldsConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_get_ui_fields',
        argNames: ['that', 'routeResponse', 'currency'],
      );

  @override
  Future<ChainAbstractionClient> crateChainAbstractionClientNew(
      {required String projectId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(projectId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateChainAbstractionClientNewConstMeta,
      argValues: [projectId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientNewConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_new',
        argNames: ['projectId'],
      );

  @override
  Future<PrepareResponse> crateChainAbstractionClientPrepare(
      {required ChainAbstractionClient that,
      required String chainId,
      required Address from,
      required Call call}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
            from, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
            call, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientPrepareConstMeta,
      argValues: [that, chainId, from, call],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientPrepareConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_prepare',
        argNames: ['that', 'chainId', 'from', 'call'],
      );

  @override
  Future<StatusResponse> crateChainAbstractionClientStatus(
      {required ChainAbstractionClient that, required String orchestrationId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientStatusConstMeta,
      argValues: [that, orchestrationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateChainAbstractionClientStatusConstMeta =>
      const TaskConstMeta(
        debugName: 'ChainAbstractionClient_status',
        argNames: ['that', 'orchestrationId'],
      );

  @override
  Future<StatusResponseCompleted>
      crateChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        sse_encode_u_64(checkIn, serializer);
        sse_encode_u_64(timeout, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateChainAbstractionClientWaitForSuccessWithTimeoutConstMeta,
      argValues: [that, orchestrationId, checkIn, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionClientWaitForSuccessWithTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_wait_for_success_with_timeout',
            argNames: ['that', 'orchestrationId', 'checkIn', 'timeout'],
          );

  @override
  BigInt crateFfiAccountClientAutoAccessorGetChainId(
      {required FfiAccountClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientAutoAccessorGetChainIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientAutoAccessorGetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_auto_accessor_get_chain_id',
        argNames: ['that'],
      );

  @override
  FfiAccountAddress crateFfiAccountClientAutoAccessorGetOwnerAddress(
      {required FfiAccountClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientAutoAccessorGetOwnerAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAccountClientAutoAccessorGetOwnerAddressConstMeta =>
          const TaskConstMeta(
            debugName: 'FfiAccountClient_auto_accessor_get_owner_address',
            argNames: ['that'],
          );

  @override
  void crateFfiAccountClientAutoAccessorSetChainId(
      {required FfiAccountClient that, required BigInt chainId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_u_64(chainId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientAutoAccessorSetChainIdConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientAutoAccessorSetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_auto_accessor_set_chain_id',
        argNames: ['that', 'chainId'],
      );

  @override
  void crateFfiAccountClientAutoAccessorSetOwnerAddress(
      {required FfiAccountClient that,
      required FfiAccountAddress ownerAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
            ownerAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientAutoAccessorSetOwnerAddressConstMeta,
      argValues: [that, ownerAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAccountClientAutoAccessorSetOwnerAddressConstMeta =>
          const TaskConstMeta(
            debugName: 'FfiAccountClient_auto_accessor_set_owner_address',
            argNames: ['that', 'ownerAddress'],
          );

  @override
  Future<String> crateFfiAccountClientDoSendTransactions(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures,
      required DoSendTransactionParams doSendTransactionParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
            signatures, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
            doSendTransactionParams, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientDoSendTransactionsConstMeta,
      argValues: [that, signatures, doSendTransactionParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientDoSendTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_do_send_transactions',
        argNames: ['that', 'signatures', 'doSendTransactionParams'],
      );

  @override
  Future<SignOutputEnum> crateFfiAccountClientDoSignMessage(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
            signatures, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientDoSignMessageConstMeta,
      argValues: [that, signatures],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientDoSignMessageConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_do_sign_message',
        argNames: ['that', 'signatures'],
      );

  @override
  Future<Uint8List> crateFfiAccountClientFinalizeSignMessage(
      {required FfiAccountClient that,
      required List<OwnerSignature> signatures,
      required SignStep3Params signStep3Params}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
            signatures, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
            signStep3Params, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientFinalizeSignMessageConstMeta,
      argValues: [that, signatures, signStep3Params],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientFinalizeSignMessageConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_finalize_sign_message',
        argNames: ['that', 'signatures', 'signStep3Params'],
      );

  @override
  Future<String> crateFfiAccountClientGetAddress(
      {required FfiAccountClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientGetAddressConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_get_address',
        argNames: ['that'],
      );

  @override
  Future<BigInt> crateFfiAccountClientGetChainId(
      {required FfiAccountClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientGetChainIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientGetChainIdConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_get_chain_id',
        argNames: ['that'],
      );

  @override
  Future<FfiAccountClient> crateFfiAccountClientNew(
      {required FfiAccountAddress owner,
      required BigInt chainId,
      required Config config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
            owner, serializer);
        sse_encode_u_64(chainId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientNewConstMeta,
      argValues: [owner, chainId, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientNewConstMeta => const TaskConstMeta(
        debugName: 'FfiAccountClient_new',
        argNames: ['owner', 'chainId', 'config'],
      );

  @override
  Future<PreparedSendTransaction> crateFfiAccountClientPrepareSendTransactions(
      {required FfiAccountClient that, required List<Call> transactions}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
            transactions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientPrepareSendTransactionsConstMeta,
      argValues: [that, transactions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientPrepareSendTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_prepare_send_transactions',
        argNames: ['that', 'transactions'],
      );

  @override
  Future<FfiPreparedSignature> crateFfiAccountClientPrepareSignMessage(
      {required FfiAccountClient that, required String messageHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_String(messageHash, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffi_prepared_signature,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAccountClientPrepareSignMessageConstMeta,
      argValues: [that, messageHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAccountClientPrepareSignMessageConstMeta =>
      const TaskConstMeta(
        debugName: 'FfiAccountClient_prepare_sign_message',
        argNames: ['that', 'messageHash'],
      );

  @override
  Future<String> crateFfiAccountClientWaitForUserOperationReceipt(
      {required FfiAccountClient that, required String userOperationHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
            that, serializer);
        sse_encode_String(userOperationHash, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta: kCrateFfiAccountClientWaitForUserOperationReceiptConstMeta,
      argValues: [that, userOperationHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAccountClientWaitForUserOperationReceiptConstMeta =>
          const TaskConstMeta(
            debugName: 'FfiAccountClient_wait_for_user_operation_receipt',
            argNames: ['that', 'userOperationHash'],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Address => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Address => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Call =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Call =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Config => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Config => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Currency => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Currency => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DoSendTransactionParams => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DoSendTransactionParams => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiAccountClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiAccountClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiAccountAddress => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiAccountAddress => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnerSignature => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnerSignature => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponseAvailable => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponseAvailable => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PreparedSendTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PreparedSendTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignOutputEnum => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignOutputEnum => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignStep3Params => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignStep3Params => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusResponseCompleted => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusResponseCompleted => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  @protected
  Address
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Call
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CallImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Config
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Currency
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CurrencyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DoSendTransactionParams
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DoSendTransactionParamsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FfiAccountClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiAccountAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnerSignature
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnerSignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponse
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponseAvailable
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  PreparedSendTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendTransactionImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SignOutputEnum
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignOutputEnumImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignStep3Params
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignStep3ParamsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponse
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponseCompleted
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FfiAccountClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FfiAccountClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Address
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Call
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CallImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Config
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Currency
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CurrencyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DoSendTransactionParams
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DoSendTransactionParamsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FfiAccountClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiAccountAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiAccountAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnerSignature
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnerSignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponse
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareResponseAvailable
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  PreparedSendTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendTransactionImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SignOutputEnum
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignOutputEnumImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignStep3Params
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignStep3ParamsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponse
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusResponseCompleted
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Eip1559Estimation dco_decode_eip_1559_estimation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Eip1559Estimation(
      maxFeePerGas: dco_decode_String(arr[0]),
      maxPriorityFeePerGas: dco_decode_String(arr[1]),
    );
  }

  @protected
  FFIError dco_decode_ffi_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FFIError_General(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  FfiPreparedSignature dco_decode_ffi_prepared_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPreparedSignature(
      messageHash: dco_decode_String(arr[0]),
    );
  }

  @protected
  List<Call>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall)
        .toList();
  }

  @protected
  List<OwnerSignature>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Address
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Call
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CallImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Config
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Currency
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CurrencyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DoSendTransactionParams
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DoSendTransactionParamsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountAddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnerSignature
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnerSignatureImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponse
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponseAvailable
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSendTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignOutputEnum
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignOutputEnumImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignStep3Params
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignStep3ParamsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponse
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponseCompleted
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Address
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Call
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CallImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Config
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Currency
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CurrencyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DoSendTransactionParams
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DoSendTransactionParamsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiAccountAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiAccountAddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnerSignature
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnerSignatureImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponse
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponseAvailable
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSendTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignOutputEnum
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignOutputEnumImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignStep3Params
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignStep3ParamsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponse
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusResponseCompleted
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusResponseCompletedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Eip1559Estimation sse_decode_eip_1559_estimation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxFeePerGas = sse_decode_String(deserializer);
    var var_maxPriorityFeePerGas = sse_decode_String(deserializer);
    return Eip1559Estimation(
        maxFeePerGas: var_maxFeePerGas,
        maxPriorityFeePerGas: var_maxPriorityFeePerGas);
  }

  @protected
  FFIError sse_decode_ffi_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return FFIError_General(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FfiPreparedSignature sse_decode_ffi_prepared_signature(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_messageHash = sse_decode_String(deserializer);
    return FfiPreparedSignature(messageHash: var_messageHash);
  }

  @protected
  List<Call>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Call>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<OwnerSignature>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OwnerSignature>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
              deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          Call self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CallImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConfigImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CurrencyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          DoSendTransactionParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DoSendTransactionParamsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          FfiAccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          FfiAccountAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountAddressImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          OwnerSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnerSignatureImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          PrepareResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          PrepareResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseAvailableImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          PreparedSendTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendTransactionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          SignOutputEnum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignOutputEnumImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          SignStep3Params self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignStep3ParamsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          StatusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseCompletedImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          FfiAccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          FfiAccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddress(
          Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          Call self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CallImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConfig(
          Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCurrency(
          Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CurrencyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDoSendTransactionParams(
          DoSendTransactionParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DoSendTransactionParamsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIAccountClient(
          FfiAccountClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiAccountAddress(
          FfiAccountAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiAccountAddressImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          OwnerSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnerSignatureImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponse(
          PrepareResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          PrepareResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseAvailableImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSendTransaction(
          PreparedSendTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendTransactionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignOutputEnum(
          SignOutputEnum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignOutputEnumImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignStep3Params(
          SignStep3Params self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignStep3ParamsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponse(
          StatusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusResponseCompleted(
          StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusResponseCompletedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_eip_1559_estimation(
      Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.maxFeePerGas, serializer);
    sse_encode_String(self.maxPriorityFeePerGas, serializer);
  }

  @protected
  void sse_encode_ffi_error(FFIError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FFIError_General(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_ffi_prepared_signature(
      FfiPreparedSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.messageHash, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          List<Call> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCall(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          List<OwnerSignature> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnerSignature(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class AddressImpl extends RustOpaque implements Address {
  // Not to be used by end users
  AddressImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Address,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Address,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_AddressPtr,
  );
}

@sealed
class CallImpl extends RustOpaque implements Call {
  // Not to be used by end users
  CallImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CallImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Call,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Call,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_CallPtr,
  );
}

@sealed
class ChainAbstractionClientImpl extends RustOpaque
    implements ChainAbstractionClient {
  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClientPtr,
  );

  String get projectId => YttriumDart.instance.api
          .crateChainAbstractionClientAutoAccessorGetProjectId(
        that: this,
      );

  set projectId(String projectId) => YttriumDart.instance.api
      .crateChainAbstractionClientAutoAccessorSetProjectId(
          that: this, projectId: projectId);

  Future<String> erc20TokenBalance(
          {required String chainId,
          required Address token,
          required Address owner}) =>
      YttriumDart.instance.api.crateChainAbstractionClientErc20TokenBalance(
          that: this, chainId: chainId, token: token, owner: owner);

  Future<Eip1559Estimation> estimateFees({required String chainId}) =>
      YttriumDart.instance.api.crateChainAbstractionClientEstimateFees(
          that: this, chainId: chainId);

  Future<UiFields> getUiFields(
          {required PrepareResponseAvailable routeResponse,
          required Currency currency}) =>
      YttriumDart.instance.api.crateChainAbstractionClientGetUiFields(
          that: this, routeResponse: routeResponse, currency: currency);

  Future<PrepareResponse> prepare(
          {required String chainId,
          required Address from,
          required Call call}) =>
      YttriumDart.instance.api.crateChainAbstractionClientPrepare(
          that: this, chainId: chainId, from: from, call: call);

  Future<StatusResponse> status({required String orchestrationId}) =>
      YttriumDart.instance.api.crateChainAbstractionClientStatus(
          that: this, orchestrationId: orchestrationId);

  Future<StatusResponseCompleted> waitForSuccessWithTimeout(
          {required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) =>
      YttriumDart.instance.api
          .crateChainAbstractionClientWaitForSuccessWithTimeout(
              that: this,
              orchestrationId: orchestrationId,
              checkIn: checkIn,
              timeout: timeout);
}

@sealed
class ConfigImpl extends RustOpaque implements Config {
  // Not to be used by end users
  ConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Config,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Config,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_ConfigPtr,
  );
}

@sealed
class CurrencyImpl extends RustOpaque implements Currency {
  // Not to be used by end users
  CurrencyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CurrencyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_Currency,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_Currency,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_CurrencyPtr,
  );
}

@sealed
class DoSendTransactionParamsImpl extends RustOpaque
    implements DoSendTransactionParams {
  // Not to be used by end users
  DoSendTransactionParamsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DoSendTransactionParamsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_DoSendTransactionParams,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_DoSendTransactionParams,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_DoSendTransactionParamsPtr,
  );
}

@sealed
class FfiAccountAddressImpl extends RustOpaque implements FfiAccountAddress {
  // Not to be used by end users
  FfiAccountAddressImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiAccountAddressImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_FfiAccountAddress,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_FfiAccountAddress,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_FfiAccountAddressPtr,
  );
}

@sealed
class FfiAccountClientImpl extends RustOpaque implements FfiAccountClient {
  // Not to be used by end users
  FfiAccountClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiAccountClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_FfiAccountClient,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_FfiAccountClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_FfiAccountClientPtr,
  );

  BigInt get chainId =>
      YttriumDart.instance.api.crateFfiAccountClientAutoAccessorGetChainId(
        that: this,
      );

  FfiAccountAddress get ownerAddress =>
      YttriumDart.instance.api.crateFfiAccountClientAutoAccessorGetOwnerAddress(
        that: this,
      );

  set chainId(BigInt chainId) =>
      YttriumDart.instance.api.crateFfiAccountClientAutoAccessorSetChainId(
          that: this, chainId: chainId);

  set ownerAddress(FfiAccountAddress ownerAddress) =>
      YttriumDart.instance.api.crateFfiAccountClientAutoAccessorSetOwnerAddress(
          that: this, ownerAddress: ownerAddress);

  Future<String> doSendTransactions(
          {required List<OwnerSignature> signatures,
          required DoSendTransactionParams doSendTransactionParams}) =>
      YttriumDart.instance.api.crateFfiAccountClientDoSendTransactions(
          that: this,
          signatures: signatures,
          doSendTransactionParams: doSendTransactionParams);

  Future<SignOutputEnum> doSignMessage(
          {required List<OwnerSignature> signatures}) =>
      YttriumDart.instance.api.crateFfiAccountClientDoSignMessage(
          that: this, signatures: signatures);

  Future<Uint8List> finalizeSignMessage(
          {required List<OwnerSignature> signatures,
          required SignStep3Params signStep3Params}) =>
      YttriumDart.instance.api.crateFfiAccountClientFinalizeSignMessage(
          that: this, signatures: signatures, signStep3Params: signStep3Params);

  Future<String> getAddress() =>
      YttriumDart.instance.api.crateFfiAccountClientGetAddress(
        that: this,
      );

  Future<BigInt> getChainId() =>
      YttriumDart.instance.api.crateFfiAccountClientGetChainId(
        that: this,
      );

  Future<PreparedSendTransaction> prepareSendTransactions(
          {required List<Call> transactions}) =>
      YttriumDart.instance.api.crateFfiAccountClientPrepareSendTransactions(
          that: this, transactions: transactions);

  Future<FfiPreparedSignature> prepareSignMessage(
          {required String messageHash}) =>
      YttriumDart.instance.api.crateFfiAccountClientPrepareSignMessage(
          that: this, messageHash: messageHash);

  Future<String> waitForUserOperationReceipt(
          {required String userOperationHash}) =>
      YttriumDart.instance.api.crateFfiAccountClientWaitForUserOperationReceipt(
          that: this, userOperationHash: userOperationHash);
}

@sealed
class OwnerSignatureImpl extends RustOpaque implements OwnerSignature {
  // Not to be used by end users
  OwnerSignatureImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OwnerSignatureImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_OwnerSignature,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_OwnerSignature,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_OwnerSignaturePtr,
  );
}

@sealed
class PrepareResponseAvailableImpl extends RustOpaque
    implements PrepareResponseAvailable {
  // Not to be used by end users
  PrepareResponseAvailableImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrepareResponseAvailableImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PrepareResponseAvailable,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponseAvailable,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_PrepareResponseAvailablePtr,
  );
}

@sealed
class PrepareResponseImpl extends RustOpaque implements PrepareResponse {
  // Not to be used by end users
  PrepareResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrepareResponseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PrepareResponse,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponse,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponsePtr,
  );
}

@sealed
class PreparedSendTransactionImpl extends RustOpaque
    implements PreparedSendTransaction {
  // Not to be used by end users
  PreparedSendTransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PreparedSendTransactionImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PreparedSendTransaction,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PreparedSendTransaction,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_PreparedSendTransactionPtr,
  );
}

@sealed
class SignOutputEnumImpl extends RustOpaque implements SignOutputEnum {
  // Not to be used by end users
  SignOutputEnumImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignOutputEnumImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_SignOutputEnum,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_SignOutputEnum,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_SignOutputEnumPtr,
  );
}

@sealed
class SignStep3ParamsImpl extends RustOpaque implements SignStep3Params {
  // Not to be used by end users
  SignStep3ParamsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignStep3ParamsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_SignStep3Params,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_SignStep3Params,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_SignStep3ParamsPtr,
  );
}

@sealed
class StatusResponseCompletedImpl extends RustOpaque
    implements StatusResponseCompleted {
  // Not to be used by end users
  StatusResponseCompletedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StatusResponseCompletedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_StatusResponseCompleted,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_StatusResponseCompleted,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_StatusResponseCompletedPtr,
  );
}

@sealed
class StatusResponseImpl extends RustOpaque implements StatusResponse {
  // Not to be used by end users
  StatusResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StatusResponseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_StatusResponse,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_StatusResponse,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_StatusResponsePtr,
  );
}

@sealed
class UiFieldsImpl extends RustOpaque implements UiFields {
  // Not to be used by end users
  UiFieldsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UiFieldsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_UiFields,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFields,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFieldsPtr,
  );
}
