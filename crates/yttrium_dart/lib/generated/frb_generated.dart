// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'chain_abstraction/api/prepare.dart';
import 'chain_abstraction/api/status.dart';
import 'chain_abstraction/client.dart';
import 'chain_abstraction/currency.dart';
import 'chain_abstraction/dart_compat.dart';
import 'chain_abstraction/error.dart';
import 'chain_abstraction/ui_fields.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class YttriumDart extends BaseEntrypoint<YttriumDartApi, YttriumDartApiImpl,
    YttriumDartWire> {
  @internal
  static final instance = YttriumDart._();

  YttriumDart._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    YttriumDartApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required YttriumDartApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<YttriumDartApiImpl, YttriumDartWire>
      get apiImplConstructor => YttriumDartApiImpl.new;

  @override
  WireConstructor<YttriumDartWire> get wireConstructor =>
      YttriumDartWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => -1404194989;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'yttrium_dart',
    ioDirectory: '../yttrium/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class YttriumDartApi extends BaseApi {
  Future<String>
      crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
          {required ChainAbstractionClient that,
          required String chainId,
          required String token,
          required String owner});

  Future<Eip1559Estimation>
      crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
          {required ChainAbstractionClient that, required String chainId});

  Future<ExecuteDetails>
      crateChainAbstractionDartCompatChainAbstractionClientExecute(
          {required ChainAbstractionClient that,
          required UiFields uiFields,
          required List<FFIPrimitiveSignature> routeTxnSigs,
          required FFIPrimitiveSignature initialTxnSig});

  Future<UiFields>
      crateChainAbstractionDartCompatChainAbstractionClientGetUiFields(
          {required ChainAbstractionClient that,
          required PrepareResponseAvailable routeResponse,
          required Currency currency});

  Future<ChainAbstractionClient>
      crateChainAbstractionDartCompatChainAbstractionClientNew(
          {required String projectId, required FFIPulseMetadata pulseMetadata});

  Future<PrepareDetailedResponse>
      crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
          {required ChainAbstractionClient that,
          required String chainId,
          required String from,
          required FFICall call,
          required Currency localCurrency});

  Future<StatusResponse>
      crateChainAbstractionDartCompatChainAbstractionClientStatus(
          {required ChainAbstractionClient that,
          required String orchestrationId});

  Future<StatusResponseCompleted>
      crateChainAbstractionDartCompatChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChainAbstractionClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExecuteDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExecuteDetails;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExecuteDetailsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareDetailedResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareDetailedResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrepareDetailedResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponseAvailable;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrepareResponseAvailablePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UiFieldsPtr;
}

class YttriumDartApiImpl extends YttriumDartApiImplPlatform
    implements YttriumDartApi {
  YttriumDartApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String>
      crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
          {required ChainAbstractionClient that,
          required String chainId,
          required String token,
          required String owner}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_String(token, serializer);
        sse_encode_String(owner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalanceConstMeta,
      argValues: [that, chainId, token, owner],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalanceConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_erc20_token_balance',
            argNames: ['that', 'chainId', 'token', 'owner'],
          );

  @override
  Future<Eip1559Estimation>
      crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
          {required ChainAbstractionClient that, required String chainId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eip_1559_estimation,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientEstimateFeesConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientEstimateFeesConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_estimate_fees',
            argNames: ['that', 'chainId'],
          );

  @override
  Future<ExecuteDetails>
      crateChainAbstractionDartCompatChainAbstractionClientExecute(
          {required ChainAbstractionClient that,
          required UiFields uiFields,
          required List<FFIPrimitiveSignature> routeTxnSigs,
          required FFIPrimitiveSignature initialTxnSig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
            uiFields, serializer);
        sse_encode_list_ffi_primitive_signature(routeTxnSigs, serializer);
        sse_encode_box_autoadd_ffi_primitive_signature(
            initialTxnSig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientExecuteConstMeta,
      argValues: [that, uiFields, routeTxnSigs, initialTxnSig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientExecuteConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_execute',
            argNames: ['that', 'uiFields', 'routeTxnSigs', 'initialTxnSig'],
          );

  @override
  Future<UiFields>
      crateChainAbstractionDartCompatChainAbstractionClientGetUiFields(
          {required ChainAbstractionClient that,
          required PrepareResponseAvailable routeResponse,
          required Currency currency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
            routeResponse, serializer);
        sse_encode_currency(currency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientGetUiFieldsConstMeta,
      argValues: [that, routeResponse, currency],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientGetUiFieldsConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_get_ui_fields',
            argNames: ['that', 'routeResponse', 'currency'],
          );

  @override
  Future<ChainAbstractionClient>
      crateChainAbstractionDartCompatChainAbstractionClientNew(
          {required String projectId,
          required FFIPulseMetadata pulseMetadata}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(projectId, serializer);
        sse_encode_box_autoadd_ffi_pulse_metadata(pulseMetadata, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientNewConstMeta,
      argValues: [projectId, pulseMetadata],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientNewConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_new',
            argNames: ['projectId', 'pulseMetadata'],
          );

  @override
  Future<PrepareDetailedResponse>
      crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
          {required ChainAbstractionClient that,
          required String chainId,
          required String from,
          required FFICall call,
          required Currency localCurrency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_String(from, serializer);
        sse_encode_box_autoadd_ffi_call(call, serializer);
        sse_encode_currency(localCurrency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientPrepareDetailedConstMeta,
      argValues: [that, chainId, from, call, localCurrency],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientPrepareDetailedConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_prepare_detailed',
            argNames: ['that', 'chainId', 'from', 'call', 'localCurrency'],
          );

  @override
  Future<StatusResponse>
      crateChainAbstractionDartCompatChainAbstractionClientStatus(
          {required ChainAbstractionClient that,
          required String orchestrationId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_status_response,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientStatusConstMeta,
      argValues: [that, orchestrationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientStatusConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_status',
            argNames: ['that', 'orchestrationId'],
          );

  @override
  Future<StatusResponseCompleted>
      crateChainAbstractionDartCompatChainAbstractionClientWaitForSuccessWithTimeout(
          {required ChainAbstractionClient that,
          required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(orchestrationId, serializer);
        sse_encode_u_64(checkIn, serializer);
        sse_encode_u_64(timeout, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_status_response_completed,
        decodeErrorData: sse_decode_ffi_error,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientWaitForSuccessWithTimeoutConstMeta,
      argValues: [that, orchestrationId, checkIn, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientWaitForSuccessWithTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_wait_for_success_with_timeout',
            argNames: ['that', 'orchestrationId', 'checkIn', 'timeout'],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExecuteDetails => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExecuteDetails => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareDetailedResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareDetailedResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrepareResponseAvailable => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrepareResponseAvailable => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiFields => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiFields => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields;

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ExecuteDetails
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExecuteDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareDetailedResponse
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareDetailedResponseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  PrepareResponseAvailable
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ExecuteDetails
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExecuteDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrepareDetailedResponse
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareDetailedResponseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  PrepareResponseAvailable
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  UiFields
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFieldsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FFICall dco_decode_box_autoadd_ffi_call(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_call(raw);
  }

  @protected
  FFIPrimitiveSignature dco_decode_box_autoadd_ffi_primitive_signature(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_primitive_signature(raw);
  }

  @protected
  FFIPulseMetadata dco_decode_box_autoadd_ffi_pulse_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_pulse_metadata(raw);
  }

  @protected
  StatusResponseCompleted dco_decode_box_autoadd_status_response_completed(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_status_response_completed(raw);
  }

  @protected
  StatusResponseError dco_decode_box_autoadd_status_response_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_status_response_error(raw);
  }

  @protected
  StatusResponsePendingObject
      dco_decode_box_autoadd_status_response_pending_object(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_status_response_pending_object(raw);
  }

  @protected
  Currency dco_decode_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Currency.values[raw as int];
  }

  @protected
  Eip1559Estimation dco_decode_eip_1559_estimation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Eip1559Estimation(
      maxFeePerGas: dco_decode_String(arr[0]),
      maxPriorityFeePerGas: dco_decode_String(arr[1]),
    );
  }

  @protected
  FFICall dco_decode_ffi_call(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FFICall(
      to: dco_decode_String(arr[0]),
      value: dco_decode_U128(arr[1]),
      input: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  FFIError dco_decode_ffi_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FFIError_General(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  FFIPrimitiveSignature dco_decode_ffi_primitive_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FFIPrimitiveSignature(
      yParity: dco_decode_bool(arr[0]),
      r: dco_decode_String(arr[1]),
      s: dco_decode_String(arr[2]),
    );
  }

  @protected
  FFIPulseMetadata dco_decode_ffi_pulse_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FFIPulseMetadata(
      url: dco_decode_opt_String(arr[0]),
      bundleId: dco_decode_opt_String(arr[1]),
      packageName: dco_decode_opt_String(arr[2]),
      sdkVersion: dco_decode_String(arr[3]),
      sdkPlatform: dco_decode_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<FFIPrimitiveSignature> dco_decode_list_ffi_primitive_signature(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ffi_primitive_signature)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  StatusResponse dco_decode_status_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return StatusResponse_Pending(
          dco_decode_box_autoadd_status_response_pending_object(raw[1]),
        );
      case 1:
        return StatusResponse_Completed(
          dco_decode_box_autoadd_status_response_completed(raw[1]),
        );
      case 2:
        return StatusResponse_Error(
          dco_decode_box_autoadd_status_response_error(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  StatusResponseCompleted dco_decode_status_response_completed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StatusResponseCompleted(
      createdAt: dco_decode_u_64(arr[0]),
    );
  }

  @protected
  StatusResponseError dco_decode_status_response_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StatusResponseError(
      createdAt: dco_decode_u_64(arr[0]),
      error: dco_decode_String(arr[1]),
    );
  }

  @protected
  StatusResponsePendingObject dco_decode_status_response_pending_object(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StatusResponsePendingObject(
      createdAt: dco_decode_u_64(arr[0]),
      checkIn: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExecuteDetails
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExecuteDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareDetailedResponse
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareDetailedResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponseAvailable
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExecuteDetails
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExecuteDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareDetailedResponse
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareDetailedResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrepareResponseAvailable
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrepareResponseAvailableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiFields
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiFieldsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FFICall sse_decode_box_autoadd_ffi_call(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_call(deserializer));
  }

  @protected
  FFIPrimitiveSignature sse_decode_box_autoadd_ffi_primitive_signature(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_primitive_signature(deserializer));
  }

  @protected
  FFIPulseMetadata sse_decode_box_autoadd_ffi_pulse_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_pulse_metadata(deserializer));
  }

  @protected
  StatusResponseCompleted sse_decode_box_autoadd_status_response_completed(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_status_response_completed(deserializer));
  }

  @protected
  StatusResponseError sse_decode_box_autoadd_status_response_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_status_response_error(deserializer));
  }

  @protected
  StatusResponsePendingObject
      sse_decode_box_autoadd_status_response_pending_object(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_status_response_pending_object(deserializer));
  }

  @protected
  Currency sse_decode_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Currency.values[inner];
  }

  @protected
  Eip1559Estimation sse_decode_eip_1559_estimation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxFeePerGas = sse_decode_String(deserializer);
    var var_maxPriorityFeePerGas = sse_decode_String(deserializer);
    return Eip1559Estimation(
        maxFeePerGas: var_maxFeePerGas,
        maxPriorityFeePerGas: var_maxPriorityFeePerGas);
  }

  @protected
  FFICall sse_decode_ffi_call(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_to = sse_decode_String(deserializer);
    var var_value = sse_decode_U128(deserializer);
    var var_input = sse_decode_list_prim_u_8_strict(deserializer);
    return FFICall(to: var_to, value: var_value, input: var_input);
  }

  @protected
  FFIError sse_decode_ffi_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return FFIError_General(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FFIPrimitiveSignature sse_decode_ffi_primitive_signature(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_yParity = sse_decode_bool(deserializer);
    var var_r = sse_decode_String(deserializer);
    var var_s = sse_decode_String(deserializer);
    return FFIPrimitiveSignature(yParity: var_yParity, r: var_r, s: var_s);
  }

  @protected
  FFIPulseMetadata sse_decode_ffi_pulse_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_opt_String(deserializer);
    var var_bundleId = sse_decode_opt_String(deserializer);
    var var_packageName = sse_decode_opt_String(deserializer);
    var var_sdkVersion = sse_decode_String(deserializer);
    var var_sdkPlatform = sse_decode_String(deserializer);
    return FFIPulseMetadata(
        url: var_url,
        bundleId: var_bundleId,
        packageName: var_packageName,
        sdkVersion: var_sdkVersion,
        sdkPlatform: var_sdkPlatform);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<FFIPrimitiveSignature> sse_decode_list_ffi_primitive_signature(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FFIPrimitiveSignature>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ffi_primitive_signature(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  StatusResponse sse_decode_status_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_status_response_pending_object(deserializer);
        return StatusResponse_Pending(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_status_response_completed(deserializer);
        return StatusResponse_Completed(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_status_response_error(deserializer);
        return StatusResponse_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  StatusResponseCompleted sse_decode_status_response_completed(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_createdAt = sse_decode_u_64(deserializer);
    return StatusResponseCompleted(createdAt: var_createdAt);
  }

  @protected
  StatusResponseError sse_decode_status_response_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_createdAt = sse_decode_u_64(deserializer);
    var var_error = sse_decode_String(deserializer);
    return StatusResponseError(createdAt: var_createdAt, error: var_error);
  }

  @protected
  StatusResponsePendingObject sse_decode_status_response_pending_object(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_createdAt = sse_decode_u_64(deserializer);
    var var_checkIn = sse_decode_u_64(deserializer);
    return StatusResponsePendingObject(
        createdAt: var_createdAt, checkIn: var_checkIn);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          ExecuteDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExecuteDetailsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          PrepareDetailedResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareDetailedResponseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          PrepareResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseAvailableImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecuteDetails(
          ExecuteDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExecuteDetailsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
          PrepareDetailedResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareDetailedResponseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareResponseAvailable(
          PrepareResponseAvailable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrepareResponseAvailableImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiFields(
          UiFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiFieldsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_ffi_call(FFICall self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_call(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_primitive_signature(
      FFIPrimitiveSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_primitive_signature(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_pulse_metadata(
      FFIPulseMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_pulse_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_status_response_completed(
      StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_status_response_completed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_status_response_error(
      StatusResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_status_response_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_status_response_pending_object(
      StatusResponsePendingObject self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_status_response_pending_object(self, serializer);
  }

  @protected
  void sse_encode_currency(Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_eip_1559_estimation(
      Eip1559Estimation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.maxFeePerGas, serializer);
    sse_encode_String(self.maxPriorityFeePerGas, serializer);
  }

  @protected
  void sse_encode_ffi_call(FFICall self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.to, serializer);
    sse_encode_U128(self.value, serializer);
    sse_encode_list_prim_u_8_strict(self.input, serializer);
  }

  @protected
  void sse_encode_ffi_error(FFIError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FFIError_General(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_ffi_primitive_signature(
      FFIPrimitiveSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.yParity, serializer);
    sse_encode_String(self.r, serializer);
    sse_encode_String(self.s, serializer);
  }

  @protected
  void sse_encode_ffi_pulse_metadata(
      FFIPulseMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.bundleId, serializer);
    sse_encode_opt_String(self.packageName, serializer);
    sse_encode_String(self.sdkVersion, serializer);
    sse_encode_String(self.sdkPlatform, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_ffi_primitive_signature(
      List<FFIPrimitiveSignature> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ffi_primitive_signature(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_status_response(
      StatusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case StatusResponse_Pending(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_status_response_pending_object(
            field0, serializer);
      case StatusResponse_Completed(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_status_response_completed(field0, serializer);
      case StatusResponse_Error(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_status_response_error(field0, serializer);
    }
  }

  @protected
  void sse_encode_status_response_completed(
      StatusResponseCompleted self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.createdAt, serializer);
  }

  @protected
  void sse_encode_status_response_error(
      StatusResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_String(self.error, serializer);
  }

  @protected
  void sse_encode_status_response_pending_object(
      StatusResponsePendingObject self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_u_64(self.checkIn, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ChainAbstractionClientImpl extends RustOpaque
    implements ChainAbstractionClient {
  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClientPtr,
  );

  Future<String> erc20TokenBalance(
          {required String chainId,
          required String token,
          required String owner}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
              that: this, chainId: chainId, token: token, owner: owner);

  Future<Eip1559Estimation> estimateFees({required String chainId}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
              that: this, chainId: chainId);

  Future<ExecuteDetails> execute(
          {required UiFields uiFields,
          required List<FFIPrimitiveSignature> routeTxnSigs,
          required FFIPrimitiveSignature initialTxnSig}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientExecute(
              that: this,
              uiFields: uiFields,
              routeTxnSigs: routeTxnSigs,
              initialTxnSig: initialTxnSig);

  Future<UiFields> getUiFields(
          {required PrepareResponseAvailable routeResponse,
          required Currency currency}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientGetUiFields(
              that: this, routeResponse: routeResponse, currency: currency);

  Future<PrepareDetailedResponse> prepareDetailed(
          {required String chainId,
          required String from,
          required FFICall call,
          required Currency localCurrency}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
              that: this,
              chainId: chainId,
              from: from,
              call: call,
              localCurrency: localCurrency);

  Future<StatusResponse> status({required String orchestrationId}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientStatus(
              that: this, orchestrationId: orchestrationId);

  Future<StatusResponseCompleted> waitForSuccessWithTimeout(
          {required String orchestrationId,
          required BigInt checkIn,
          required BigInt timeout}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientWaitForSuccessWithTimeout(
              that: this,
              orchestrationId: orchestrationId,
              checkIn: checkIn,
              timeout: timeout);
}

@sealed
class ExecuteDetailsImpl extends RustOpaque implements ExecuteDetails {
  // Not to be used by end users
  ExecuteDetailsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExecuteDetailsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_ExecuteDetails,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_ExecuteDetails,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ExecuteDetailsPtr,
  );
}

@sealed
class PrepareDetailedResponseImpl extends RustOpaque
    implements PrepareDetailedResponse {
  // Not to be used by end users
  PrepareDetailedResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrepareDetailedResponseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PrepareDetailedResponse,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareDetailedResponse,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_PrepareDetailedResponsePtr,
  );
}

@sealed
class PrepareResponseAvailableImpl extends RustOpaque
    implements PrepareResponseAvailable {
  // Not to be used by end users
  PrepareResponseAvailableImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrepareResponseAvailableImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_PrepareResponseAvailable,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_PrepareResponseAvailable,
    rustArcDecrementStrongCountPtr: YttriumDart.instance.api
        .rust_arc_decrement_strong_count_PrepareResponseAvailablePtr,
  );
}

@sealed
class UiFieldsImpl extends RustOpaque implements UiFields {
  // Not to be used by end users
  UiFieldsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UiFieldsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        YttriumDart.instance.api.rust_arc_increment_strong_count_UiFields,
    rustArcDecrementStrongCount:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFields,
    rustArcDecrementStrongCountPtr:
        YttriumDart.instance.api.rust_arc_decrement_strong_count_UiFieldsPtr,
  );
}
