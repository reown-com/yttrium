// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'chain_abstraction/api/prepare.dart';
import 'chain_abstraction/currency.dart';
import 'chain_abstraction/dart_compat.dart';
import 'chain_abstraction/dart_compat_models.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class YttriumDart extends BaseEntrypoint<YttriumDartApi, YttriumDartApiImpl,
    YttriumDartWire> {
  @internal
  static final instance = YttriumDart._();

  YttriumDart._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    YttriumDartApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required YttriumDartApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<YttriumDartApiImpl, YttriumDartWire>
      get apiImplConstructor => YttriumDartApiImpl.new;

  @override
  WireConstructor<YttriumDartWire> get wireConstructor =>
      YttriumDartWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -1070456081;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'yttrium',
    ioDirectory: '../yttrium/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class YttriumDartApi extends BaseApi {
  Future<String>
      crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
          {required ChainAbstractionClient that,
          required String chainId,
          required String token,
          required String owner});

  Future<Eip1559EstimationCompat>
      crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
          {required ChainAbstractionClient that, required String chainId});

  Future<ExecuteDetailsCompat>
      crateChainAbstractionDartCompatChainAbstractionClientExecute(
          {required ChainAbstractionClient that,
          required UiFieldsCompat uiFields,
          required List<PrimitiveSignatureCompat> routeTxnSigs,
          required PrimitiveSignatureCompat initialTxnSig});

  Future<ChainAbstractionClient>
      crateChainAbstractionDartCompatChainAbstractionClientNew(
          {required String projectId,
          required PulseMetadataCompat pulseMetadata});

  Future<PrepareDetailedResponseCompat>
      crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
          {required ChainAbstractionClient that,
          required String chainId,
          required String from,
          required CallCompat call,
          required Currency localCurrency});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChainAbstractionClientPtr;
}

class YttriumDartApiImpl extends YttriumDartApiImplPlatform
    implements YttriumDartApi {
  YttriumDartApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String>
      crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
          {required ChainAbstractionClient that,
          required String chainId,
          required String token,
          required String owner}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_String(token, serializer);
        sse_encode_String(owner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error_compat,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalanceConstMeta,
      argValues: [that, chainId, token, owner],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalanceConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_erc20_token_balance',
            argNames: ['that', 'chainId', 'token', 'owner'],
          );

  @override
  Future<Eip1559EstimationCompat>
      crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
          {required ChainAbstractionClient that, required String chainId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eip_1559_estimation_compat,
        decodeErrorData: sse_decode_error_compat,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientEstimateFeesConstMeta,
      argValues: [that, chainId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientEstimateFeesConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_estimate_fees',
            argNames: ['that', 'chainId'],
          );

  @override
  Future<ExecuteDetailsCompat>
      crateChainAbstractionDartCompatChainAbstractionClientExecute(
          {required ChainAbstractionClient that,
          required UiFieldsCompat uiFields,
          required List<PrimitiveSignatureCompat> routeTxnSigs,
          required PrimitiveSignatureCompat initialTxnSig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_box_autoadd_ui_fields_compat(uiFields, serializer);
        sse_encode_list_primitive_signature_compat(routeTxnSigs, serializer);
        sse_encode_box_autoadd_primitive_signature_compat(
            initialTxnSig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_execute_details_compat,
        decodeErrorData: sse_decode_error_compat,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientExecuteConstMeta,
      argValues: [that, uiFields, routeTxnSigs, initialTxnSig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientExecuteConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_execute',
            argNames: ['that', 'uiFields', 'routeTxnSigs', 'initialTxnSig'],
          );

  @override
  Future<ChainAbstractionClient>
      crateChainAbstractionDartCompatChainAbstractionClientNew(
          {required String projectId,
          required PulseMetadataCompat pulseMetadata}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(projectId, serializer);
        sse_encode_box_autoadd_pulse_metadata_compat(pulseMetadata, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientNewConstMeta,
      argValues: [projectId, pulseMetadata],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientNewConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_new',
            argNames: ['projectId', 'pulseMetadata'],
          );

  @override
  Future<PrepareDetailedResponseCompat>
      crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
          {required ChainAbstractionClient that,
          required String chainId,
          required String from,
          required CallCompat call,
          required Currency localCurrency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
            that, serializer);
        sse_encode_String(chainId, serializer);
        sse_encode_String(from, serializer);
        sse_encode_box_autoadd_call_compat(call, serializer);
        sse_encode_currency(localCurrency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_prepare_detailed_response_compat,
        decodeErrorData: sse_decode_error_compat,
      ),
      constMeta:
          kCrateChainAbstractionDartCompatChainAbstractionClientPrepareDetailedConstMeta,
      argValues: [that, chainId, from, call, localCurrency],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateChainAbstractionDartCompatChainAbstractionClientPrepareDetailedConstMeta =>
          const TaskConstMeta(
            debugName: 'ChainAbstractionClient_prepare_detailed',
            argNames: ['that', 'chainId', 'from', 'call', 'localCurrency'],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChainAbstractionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChainAbstractionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient;

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ChainAbstractionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  AmountCompat dco_decode_amount_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AmountCompat(
      symbol: dco_decode_String(arr[0]),
      amount: dco_decode_String(arr[1]),
      unit: dco_decode_u_8(arr[2]),
      formatted: dco_decode_String(arr[3]),
      formattedAlt: dco_decode_String(arr[4]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CallCompat dco_decode_box_autoadd_call_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_call_compat(raw);
  }

  @protected
  PrepareDetailedResponseSuccessCompat
      dco_decode_box_autoadd_prepare_detailed_response_success_compat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_detailed_response_success_compat(raw);
  }

  @protected
  PrepareResponseError dco_decode_box_autoadd_prepare_response_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_response_error(raw);
  }

  @protected
  PrepareResponseNotRequiredCompat
      dco_decode_box_autoadd_prepare_response_not_required_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_response_not_required_compat(raw);
  }

  @protected
  PrimitiveSignatureCompat dco_decode_box_autoadd_primitive_signature_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_primitive_signature_compat(raw);
  }

  @protected
  PulseMetadataCompat dco_decode_box_autoadd_pulse_metadata_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pulse_metadata_compat(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  UiFieldsCompat dco_decode_box_autoadd_ui_fields_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_fields_compat(raw);
  }

  @protected
  BridgingError dco_decode_bridging_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BridgingError.values[raw as int];
  }

  @protected
  CallCompat dco_decode_call_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CallCompat(
      to: dco_decode_String(arr[0]),
      value: dco_decode_U128(arr[1]),
      input: dco_decode_String(arr[2]),
    );
  }

  @protected
  Currency dco_decode_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Currency.values[raw as int];
  }

  @protected
  Eip1559EstimationCompat dco_decode_eip_1559_estimation_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Eip1559EstimationCompat(
      maxFeePerGas: dco_decode_String(arr[0]),
      maxPriorityFeePerGas: dco_decode_String(arr[1]),
    );
  }

  @protected
  ErrorCompat dco_decode_error_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ErrorCompat_General(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  ExecuteDetailsCompat dco_decode_execute_details_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExecuteDetailsCompat(
      initialTxnReceipt: dco_decode_transaction_receipt_compat(arr[0]),
      initialTxnHash: dco_decode_String(arr[1]),
    );
  }

  @protected
  FeeEstimatedTransactionCompat dco_decode_fee_estimated_transaction_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return FeeEstimatedTransactionCompat(
      chainId: dco_decode_String(arr[0]),
      from: dco_decode_String(arr[1]),
      to: dco_decode_String(arr[2]),
      value: dco_decode_String(arr[3]),
      input: dco_decode_String(arr[4]),
      gasLimit: dco_decode_String(arr[5]),
      nonce: dco_decode_String(arr[6]),
      maxFeePerGas: dco_decode_String(arr[7]),
      maxPriorityFeePerGas: dco_decode_String(arr[8]),
    );
  }

  @protected
  FundingMetadataCompat dco_decode_funding_metadata_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FundingMetadataCompat(
      chainId: dco_decode_String(arr[0]),
      tokenContract: dco_decode_String(arr[1]),
      symbol: dco_decode_String(arr[2]),
      amount: dco_decode_String(arr[3]),
      bridgingFee: dco_decode_String(arr[4]),
      decimals: dco_decode_u_8(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InitialTransactionMetadataCompat
      dco_decode_initial_transaction_metadata_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return InitialTransactionMetadataCompat(
      transferTo: dco_decode_String(arr[0]),
      amount: dco_decode_String(arr[1]),
      tokenContract: dco_decode_String(arr[2]),
      symbol: dco_decode_String(arr[3]),
      decimals: dco_decode_u_8(arr[4]),
    );
  }

  @protected
  List<FundingMetadataCompat> dco_decode_list_funding_metadata_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_funding_metadata_compat)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<PrimitiveSignatureCompat> dco_decode_list_primitive_signature_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_primitive_signature_compat)
        .toList();
  }

  @protected
  List<TransactionCompat> dco_decode_list_transaction_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction_compat).toList();
  }

  @protected
  List<TransactionFeeCompat> dco_decode_list_transaction_fee_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_transaction_fee_compat)
        .toList();
  }

  @protected
  List<TxnDetailsCompat> dco_decode_list_txn_details_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_txn_details_compat).toList();
  }

  @protected
  MetadataCompat dco_decode_metadata_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MetadataCompat(
      fundingFrom: dco_decode_list_funding_metadata_compat(arr[0]),
      initialTransaction:
          dco_decode_initial_transaction_metadata_compat(arr[1]),
      checkIn: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  PrepareDetailedResponseCompat dco_decode_prepare_detailed_response_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PrepareDetailedResponseCompat_Success(
          value:
              dco_decode_box_autoadd_prepare_detailed_response_success_compat(
                  raw[1]),
        );
      case 1:
        return PrepareDetailedResponseCompat_Error(
          value: dco_decode_box_autoadd_prepare_response_error(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  PrepareDetailedResponseSuccessCompat
      dco_decode_prepare_detailed_response_success_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PrepareDetailedResponseSuccessCompat_Available(
          value: dco_decode_box_autoadd_ui_fields_compat(raw[1]),
        );
      case 1:
        return PrepareDetailedResponseSuccessCompat_NotRequired(
          value: dco_decode_box_autoadd_prepare_response_not_required_compat(
              raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  PrepareResponseAvailableCompat dco_decode_prepare_response_available_compat(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PrepareResponseAvailableCompat(
      orchestrationId: dco_decode_String(arr[0]),
      initialTransaction: dco_decode_transaction_compat(arr[1]),
      transactions: dco_decode_list_transaction_compat(arr[2]),
      metadata: dco_decode_metadata_compat(arr[3]),
    );
  }

  @protected
  PrepareResponseError dco_decode_prepare_response_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareResponseError(
      error: dco_decode_bridging_error(arr[0]),
      reason: dco_decode_String(arr[1]),
    );
  }

  @protected
  PrepareResponseNotRequiredCompat
      dco_decode_prepare_response_not_required_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareResponseNotRequiredCompat(
      initialTransaction: dco_decode_transaction_compat(arr[0]),
      transactions: dco_decode_list_transaction_compat(arr[1]),
    );
  }

  @protected
  PrimitiveSignatureCompat dco_decode_primitive_signature_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PrimitiveSignatureCompat(
      yParity: dco_decode_bool(arr[0]),
      r: dco_decode_String(arr[1]),
      s: dco_decode_String(arr[2]),
    );
  }

  @protected
  PulseMetadataCompat dco_decode_pulse_metadata_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PulseMetadataCompat(
      url: dco_decode_opt_String(arr[0]),
      bundleId: dco_decode_opt_String(arr[1]),
      packageName: dco_decode_opt_String(arr[2]),
      sdkVersion: dco_decode_String(arr[3]),
      sdkPlatform: dco_decode_String(arr[4]),
    );
  }

  @protected
  TransactionCompat dco_decode_transaction_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return TransactionCompat(
      chainId: dco_decode_String(arr[0]),
      from: dco_decode_String(arr[1]),
      to: dco_decode_String(arr[2]),
      value: dco_decode_String(arr[3]),
      input: dco_decode_String(arr[4]),
      gasLimit: dco_decode_u_64(arr[5]),
      nonce: dco_decode_u_64(arr[6]),
    );
  }

  @protected
  TransactionFeeCompat dco_decode_transaction_fee_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TransactionFeeCompat(
      fee: dco_decode_amount_compat(arr[0]),
      localFee: dco_decode_amount_compat(arr[1]),
    );
  }

  @protected
  TransactionReceiptCompat dco_decode_transaction_receipt_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return TransactionReceiptCompat(
      transactionHash: dco_decode_String(arr[0]),
      transactionIndex: dco_decode_opt_box_autoadd_u_64(arr[1]),
      blockHash: dco_decode_opt_String(arr[2]),
      blockNumber: dco_decode_opt_box_autoadd_u_64(arr[3]),
      gasUsed: dco_decode_u_64(arr[4]),
      effectiveGasPrice: dco_decode_String(arr[5]),
      blobGasUsed: dco_decode_opt_box_autoadd_u_64(arr[6]),
      blobGasPrice: dco_decode_opt_String(arr[7]),
      from: dco_decode_String(arr[8]),
      to: dco_decode_opt_String(arr[9]),
      contractAddress: dco_decode_opt_String(arr[10]),
    );
  }

  @protected
  TxnDetailsCompat dco_decode_txn_details_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TxnDetailsCompat(
      transaction: dco_decode_fee_estimated_transaction_compat(arr[0]),
      transactionHashToSign: dco_decode_String(arr[1]),
      fee: dco_decode_transaction_fee_compat(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UiFieldsCompat dco_decode_ui_fields_compat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UiFieldsCompat(
      routeResponse: dco_decode_prepare_response_available_compat(arr[0]),
      route: dco_decode_list_txn_details_compat(arr[1]),
      localRouteTotal: dco_decode_amount_compat(arr[2]),
      bridge: dco_decode_list_transaction_fee_compat(arr[3]),
      localBridgeTotal: dco_decode_amount_compat(arr[4]),
      initial: dco_decode_txn_details_compat(arr[5]),
      localTotal: dco_decode_amount_compat(arr[6]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChainAbstractionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChainAbstractionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  AmountCompat sse_decode_amount_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_symbol = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_unit = sse_decode_u_8(deserializer);
    var var_formatted = sse_decode_String(deserializer);
    var var_formattedAlt = sse_decode_String(deserializer);
    return AmountCompat(
        symbol: var_symbol,
        amount: var_amount,
        unit: var_unit,
        formatted: var_formatted,
        formattedAlt: var_formattedAlt);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CallCompat sse_decode_box_autoadd_call_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_call_compat(deserializer));
  }

  @protected
  PrepareDetailedResponseSuccessCompat
      sse_decode_box_autoadd_prepare_detailed_response_success_compat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_detailed_response_success_compat(deserializer));
  }

  @protected
  PrepareResponseError sse_decode_box_autoadd_prepare_response_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_response_error(deserializer));
  }

  @protected
  PrepareResponseNotRequiredCompat
      sse_decode_box_autoadd_prepare_response_not_required_compat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_response_not_required_compat(deserializer));
  }

  @protected
  PrimitiveSignatureCompat sse_decode_box_autoadd_primitive_signature_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_primitive_signature_compat(deserializer));
  }

  @protected
  PulseMetadataCompat sse_decode_box_autoadd_pulse_metadata_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pulse_metadata_compat(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  UiFieldsCompat sse_decode_box_autoadd_ui_fields_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_fields_compat(deserializer));
  }

  @protected
  BridgingError sse_decode_bridging_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BridgingError.values[inner];
  }

  @protected
  CallCompat sse_decode_call_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_to = sse_decode_String(deserializer);
    var var_value = sse_decode_U128(deserializer);
    var var_input = sse_decode_String(deserializer);
    return CallCompat(to: var_to, value: var_value, input: var_input);
  }

  @protected
  Currency sse_decode_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Currency.values[inner];
  }

  @protected
  Eip1559EstimationCompat sse_decode_eip_1559_estimation_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxFeePerGas = sse_decode_String(deserializer);
    var var_maxPriorityFeePerGas = sse_decode_String(deserializer);
    return Eip1559EstimationCompat(
        maxFeePerGas: var_maxFeePerGas,
        maxPriorityFeePerGas: var_maxPriorityFeePerGas);
  }

  @protected
  ErrorCompat sse_decode_error_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return ErrorCompat_General(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ExecuteDetailsCompat sse_decode_execute_details_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_initialTxnReceipt =
        sse_decode_transaction_receipt_compat(deserializer);
    var var_initialTxnHash = sse_decode_String(deserializer);
    return ExecuteDetailsCompat(
        initialTxnReceipt: var_initialTxnReceipt,
        initialTxnHash: var_initialTxnHash);
  }

  @protected
  FeeEstimatedTransactionCompat sse_decode_fee_estimated_transaction_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chainId = sse_decode_String(deserializer);
    var var_from = sse_decode_String(deserializer);
    var var_to = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_input = sse_decode_String(deserializer);
    var var_gasLimit = sse_decode_String(deserializer);
    var var_nonce = sse_decode_String(deserializer);
    var var_maxFeePerGas = sse_decode_String(deserializer);
    var var_maxPriorityFeePerGas = sse_decode_String(deserializer);
    return FeeEstimatedTransactionCompat(
        chainId: var_chainId,
        from: var_from,
        to: var_to,
        value: var_value,
        input: var_input,
        gasLimit: var_gasLimit,
        nonce: var_nonce,
        maxFeePerGas: var_maxFeePerGas,
        maxPriorityFeePerGas: var_maxPriorityFeePerGas);
  }

  @protected
  FundingMetadataCompat sse_decode_funding_metadata_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chainId = sse_decode_String(deserializer);
    var var_tokenContract = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_bridgingFee = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_8(deserializer);
    return FundingMetadataCompat(
        chainId: var_chainId,
        tokenContract: var_tokenContract,
        symbol: var_symbol,
        amount: var_amount,
        bridgingFee: var_bridgingFee,
        decimals: var_decimals);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InitialTransactionMetadataCompat
      sse_decode_initial_transaction_metadata_compat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transferTo = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_tokenContract = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_8(deserializer);
    return InitialTransactionMetadataCompat(
        transferTo: var_transferTo,
        amount: var_amount,
        tokenContract: var_tokenContract,
        symbol: var_symbol,
        decimals: var_decimals);
  }

  @protected
  List<FundingMetadataCompat> sse_decode_list_funding_metadata_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FundingMetadataCompat>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_funding_metadata_compat(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<PrimitiveSignatureCompat> sse_decode_list_primitive_signature_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PrimitiveSignatureCompat>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_primitive_signature_compat(deserializer));
    }
    return ans_;
  }

  @protected
  List<TransactionCompat> sse_decode_list_transaction_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TransactionCompat>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction_compat(deserializer));
    }
    return ans_;
  }

  @protected
  List<TransactionFeeCompat> sse_decode_list_transaction_fee_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TransactionFeeCompat>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction_fee_compat(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxnDetailsCompat> sse_decode_list_txn_details_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxnDetailsCompat>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_txn_details_compat(deserializer));
    }
    return ans_;
  }

  @protected
  MetadataCompat sse_decode_metadata_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fundingFrom = sse_decode_list_funding_metadata_compat(deserializer);
    var var_initialTransaction =
        sse_decode_initial_transaction_metadata_compat(deserializer);
    var var_checkIn = sse_decode_u_64(deserializer);
    return MetadataCompat(
        fundingFrom: var_fundingFrom,
        initialTransaction: var_initialTransaction,
        checkIn: var_checkIn);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PrepareDetailedResponseCompat sse_decode_prepare_detailed_response_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_value =
            sse_decode_box_autoadd_prepare_detailed_response_success_compat(
                deserializer);
        return PrepareDetailedResponseCompat_Success(value: var_value);
      case 1:
        var var_value =
            sse_decode_box_autoadd_prepare_response_error(deserializer);
        return PrepareDetailedResponseCompat_Error(value: var_value);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PrepareDetailedResponseSuccessCompat
      sse_decode_prepare_detailed_response_success_compat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_value = sse_decode_box_autoadd_ui_fields_compat(deserializer);
        return PrepareDetailedResponseSuccessCompat_Available(value: var_value);
      case 1:
        var var_value =
            sse_decode_box_autoadd_prepare_response_not_required_compat(
                deserializer);
        return PrepareDetailedResponseSuccessCompat_NotRequired(
            value: var_value);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PrepareResponseAvailableCompat sse_decode_prepare_response_available_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_orchestrationId = sse_decode_String(deserializer);
    var var_initialTransaction = sse_decode_transaction_compat(deserializer);
    var var_transactions = sse_decode_list_transaction_compat(deserializer);
    var var_metadata = sse_decode_metadata_compat(deserializer);
    return PrepareResponseAvailableCompat(
        orchestrationId: var_orchestrationId,
        initialTransaction: var_initialTransaction,
        transactions: var_transactions,
        metadata: var_metadata);
  }

  @protected
  PrepareResponseError sse_decode_prepare_response_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_error = sse_decode_bridging_error(deserializer);
    var var_reason = sse_decode_String(deserializer);
    return PrepareResponseError(error: var_error, reason: var_reason);
  }

  @protected
  PrepareResponseNotRequiredCompat
      sse_decode_prepare_response_not_required_compat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_initialTransaction = sse_decode_transaction_compat(deserializer);
    var var_transactions = sse_decode_list_transaction_compat(deserializer);
    return PrepareResponseNotRequiredCompat(
        initialTransaction: var_initialTransaction,
        transactions: var_transactions);
  }

  @protected
  PrimitiveSignatureCompat sse_decode_primitive_signature_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_yParity = sse_decode_bool(deserializer);
    var var_r = sse_decode_String(deserializer);
    var var_s = sse_decode_String(deserializer);
    return PrimitiveSignatureCompat(yParity: var_yParity, r: var_r, s: var_s);
  }

  @protected
  PulseMetadataCompat sse_decode_pulse_metadata_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_opt_String(deserializer);
    var var_bundleId = sse_decode_opt_String(deserializer);
    var var_packageName = sse_decode_opt_String(deserializer);
    var var_sdkVersion = sse_decode_String(deserializer);
    var var_sdkPlatform = sse_decode_String(deserializer);
    return PulseMetadataCompat(
        url: var_url,
        bundleId: var_bundleId,
        packageName: var_packageName,
        sdkVersion: var_sdkVersion,
        sdkPlatform: var_sdkPlatform);
  }

  @protected
  TransactionCompat sse_decode_transaction_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chainId = sse_decode_String(deserializer);
    var var_from = sse_decode_String(deserializer);
    var var_to = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_input = sse_decode_String(deserializer);
    var var_gasLimit = sse_decode_u_64(deserializer);
    var var_nonce = sse_decode_u_64(deserializer);
    return TransactionCompat(
        chainId: var_chainId,
        from: var_from,
        to: var_to,
        value: var_value,
        input: var_input,
        gasLimit: var_gasLimit,
        nonce: var_nonce);
  }

  @protected
  TransactionFeeCompat sse_decode_transaction_fee_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fee = sse_decode_amount_compat(deserializer);
    var var_localFee = sse_decode_amount_compat(deserializer);
    return TransactionFeeCompat(fee: var_fee, localFee: var_localFee);
  }

  @protected
  TransactionReceiptCompat sse_decode_transaction_receipt_compat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transactionHash = sse_decode_String(deserializer);
    var var_transactionIndex = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_blockHash = sse_decode_opt_String(deserializer);
    var var_blockNumber = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_gasUsed = sse_decode_u_64(deserializer);
    var var_effectiveGasPrice = sse_decode_String(deserializer);
    var var_blobGasUsed = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_blobGasPrice = sse_decode_opt_String(deserializer);
    var var_from = sse_decode_String(deserializer);
    var var_to = sse_decode_opt_String(deserializer);
    var var_contractAddress = sse_decode_opt_String(deserializer);
    return TransactionReceiptCompat(
        transactionHash: var_transactionHash,
        transactionIndex: var_transactionIndex,
        blockHash: var_blockHash,
        blockNumber: var_blockNumber,
        gasUsed: var_gasUsed,
        effectiveGasPrice: var_effectiveGasPrice,
        blobGasUsed: var_blobGasUsed,
        blobGasPrice: var_blobGasPrice,
        from: var_from,
        to: var_to,
        contractAddress: var_contractAddress);
  }

  @protected
  TxnDetailsCompat sse_decode_txn_details_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transaction =
        sse_decode_fee_estimated_transaction_compat(deserializer);
    var var_transactionHashToSign = sse_decode_String(deserializer);
    var var_fee = sse_decode_transaction_fee_compat(deserializer);
    return TxnDetailsCompat(
        transaction: var_transaction,
        transactionHashToSign: var_transactionHashToSign,
        fee: var_fee);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UiFieldsCompat sse_decode_ui_fields_compat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_routeResponse =
        sse_decode_prepare_response_available_compat(deserializer);
    var var_route = sse_decode_list_txn_details_compat(deserializer);
    var var_localRouteTotal = sse_decode_amount_compat(deserializer);
    var var_bridge = sse_decode_list_transaction_fee_compat(deserializer);
    var var_localBridgeTotal = sse_decode_amount_compat(deserializer);
    var var_initial = sse_decode_txn_details_compat(deserializer);
    var var_localTotal = sse_decode_amount_compat(deserializer);
    return UiFieldsCompat(
        routeResponse: var_routeResponse,
        route: var_route,
        localRouteTotal: var_localRouteTotal,
        bridge: var_bridge,
        localBridgeTotal: var_localBridgeTotal,
        initial: var_initial,
        localTotal: var_localTotal);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
          ChainAbstractionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChainAbstractionClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_amount_compat(AmountCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.symbol, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_u_8(self.unit, serializer);
    sse_encode_String(self.formatted, serializer);
    sse_encode_String(self.formattedAlt, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_call_compat(
      CallCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_call_compat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_detailed_response_success_compat(
      PrepareDetailedResponseSuccessCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_detailed_response_success_compat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_response_error(
      PrepareResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_response_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_response_not_required_compat(
      PrepareResponseNotRequiredCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_response_not_required_compat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_primitive_signature_compat(
      PrimitiveSignatureCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_primitive_signature_compat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pulse_metadata_compat(
      PulseMetadataCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pulse_metadata_compat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_fields_compat(
      UiFieldsCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_fields_compat(self, serializer);
  }

  @protected
  void sse_encode_bridging_error(BridgingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_call_compat(CallCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.to, serializer);
    sse_encode_U128(self.value, serializer);
    sse_encode_String(self.input, serializer);
  }

  @protected
  void sse_encode_currency(Currency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_eip_1559_estimation_compat(
      Eip1559EstimationCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.maxFeePerGas, serializer);
    sse_encode_String(self.maxPriorityFeePerGas, serializer);
  }

  @protected
  void sse_encode_error_compat(ErrorCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ErrorCompat_General(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_execute_details_compat(
      ExecuteDetailsCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_receipt_compat(self.initialTxnReceipt, serializer);
    sse_encode_String(self.initialTxnHash, serializer);
  }

  @protected
  void sse_encode_fee_estimated_transaction_compat(
      FeeEstimatedTransactionCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.chainId, serializer);
    sse_encode_String(self.from, serializer);
    sse_encode_String(self.to, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.input, serializer);
    sse_encode_String(self.gasLimit, serializer);
    sse_encode_String(self.nonce, serializer);
    sse_encode_String(self.maxFeePerGas, serializer);
    sse_encode_String(self.maxPriorityFeePerGas, serializer);
  }

  @protected
  void sse_encode_funding_metadata_compat(
      FundingMetadataCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.chainId, serializer);
    sse_encode_String(self.tokenContract, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_String(self.bridgingFee, serializer);
    sse_encode_u_8(self.decimals, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_initial_transaction_metadata_compat(
      InitialTransactionMetadataCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.transferTo, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_String(self.tokenContract, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_u_8(self.decimals, serializer);
  }

  @protected
  void sse_encode_list_funding_metadata_compat(
      List<FundingMetadataCompat> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_funding_metadata_compat(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_primitive_signature_compat(
      List<PrimitiveSignatureCompat> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_primitive_signature_compat(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction_compat(
      List<TransactionCompat> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction_compat(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction_fee_compat(
      List<TransactionFeeCompat> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction_fee_compat(item, serializer);
    }
  }

  @protected
  void sse_encode_list_txn_details_compat(
      List<TxnDetailsCompat> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_txn_details_compat(item, serializer);
    }
  }

  @protected
  void sse_encode_metadata_compat(
      MetadataCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_funding_metadata_compat(self.fundingFrom, serializer);
    sse_encode_initial_transaction_metadata_compat(
        self.initialTransaction, serializer);
    sse_encode_u_64(self.checkIn, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_prepare_detailed_response_compat(
      PrepareDetailedResponseCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PrepareDetailedResponseCompat_Success(value: final value):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_prepare_detailed_response_success_compat(
            value, serializer);
      case PrepareDetailedResponseCompat_Error(value: final value):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_prepare_response_error(value, serializer);
    }
  }

  @protected
  void sse_encode_prepare_detailed_response_success_compat(
      PrepareDetailedResponseSuccessCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PrepareDetailedResponseSuccessCompat_Available(value: final value):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_fields_compat(value, serializer);
      case PrepareDetailedResponseSuccessCompat_NotRequired(value: final value):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_prepare_response_not_required_compat(
            value, serializer);
    }
  }

  @protected
  void sse_encode_prepare_response_available_compat(
      PrepareResponseAvailableCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.orchestrationId, serializer);
    sse_encode_transaction_compat(self.initialTransaction, serializer);
    sse_encode_list_transaction_compat(self.transactions, serializer);
    sse_encode_metadata_compat(self.metadata, serializer);
  }

  @protected
  void sse_encode_prepare_response_error(
      PrepareResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bridging_error(self.error, serializer);
    sse_encode_String(self.reason, serializer);
  }

  @protected
  void sse_encode_prepare_response_not_required_compat(
      PrepareResponseNotRequiredCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_compat(self.initialTransaction, serializer);
    sse_encode_list_transaction_compat(self.transactions, serializer);
  }

  @protected
  void sse_encode_primitive_signature_compat(
      PrimitiveSignatureCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.yParity, serializer);
    sse_encode_String(self.r, serializer);
    sse_encode_String(self.s, serializer);
  }

  @protected
  void sse_encode_pulse_metadata_compat(
      PulseMetadataCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.bundleId, serializer);
    sse_encode_opt_String(self.packageName, serializer);
    sse_encode_String(self.sdkVersion, serializer);
    sse_encode_String(self.sdkPlatform, serializer);
  }

  @protected
  void sse_encode_transaction_compat(
      TransactionCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.chainId, serializer);
    sse_encode_String(self.from, serializer);
    sse_encode_String(self.to, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.input, serializer);
    sse_encode_u_64(self.gasLimit, serializer);
    sse_encode_u_64(self.nonce, serializer);
  }

  @protected
  void sse_encode_transaction_fee_compat(
      TransactionFeeCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_amount_compat(self.fee, serializer);
    sse_encode_amount_compat(self.localFee, serializer);
  }

  @protected
  void sse_encode_transaction_receipt_compat(
      TransactionReceiptCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.transactionHash, serializer);
    sse_encode_opt_box_autoadd_u_64(self.transactionIndex, serializer);
    sse_encode_opt_String(self.blockHash, serializer);
    sse_encode_opt_box_autoadd_u_64(self.blockNumber, serializer);
    sse_encode_u_64(self.gasUsed, serializer);
    sse_encode_String(self.effectiveGasPrice, serializer);
    sse_encode_opt_box_autoadd_u_64(self.blobGasUsed, serializer);
    sse_encode_opt_String(self.blobGasPrice, serializer);
    sse_encode_String(self.from, serializer);
    sse_encode_opt_String(self.to, serializer);
    sse_encode_opt_String(self.contractAddress, serializer);
  }

  @protected
  void sse_encode_txn_details_compat(
      TxnDetailsCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_fee_estimated_transaction_compat(self.transaction, serializer);
    sse_encode_String(self.transactionHashToSign, serializer);
    sse_encode_transaction_fee_compat(self.fee, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_ui_fields_compat(
      UiFieldsCompat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_response_available_compat(
        self.routeResponse, serializer);
    sse_encode_list_txn_details_compat(self.route, serializer);
    sse_encode_amount_compat(self.localRouteTotal, serializer);
    sse_encode_list_transaction_fee_compat(self.bridge, serializer);
    sse_encode_amount_compat(self.localBridgeTotal, serializer);
    sse_encode_txn_details_compat(self.initial, serializer);
    sse_encode_amount_compat(self.localTotal, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ChainAbstractionClientImpl extends RustOpaque
    implements ChainAbstractionClient {
  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChainAbstractionClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: YttriumDart
        .instance.api.rust_arc_increment_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCount: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClient,
    rustArcDecrementStrongCountPtr: YttriumDart
        .instance.api.rust_arc_decrement_strong_count_ChainAbstractionClientPtr,
  );

  Future<String> erc20TokenBalance(
          {required String chainId,
          required String token,
          required String owner}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientErc20TokenBalance(
              that: this, chainId: chainId, token: token, owner: owner);

  Future<Eip1559EstimationCompat> estimateFees({required String chainId}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientEstimateFees(
              that: this, chainId: chainId);

  Future<ExecuteDetailsCompat> execute(
          {required UiFieldsCompat uiFields,
          required List<PrimitiveSignatureCompat> routeTxnSigs,
          required PrimitiveSignatureCompat initialTxnSig}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientExecute(
              that: this,
              uiFields: uiFields,
              routeTxnSigs: routeTxnSigs,
              initialTxnSig: initialTxnSig);

  Future<PrepareDetailedResponseCompat> prepareDetailed(
          {required String chainId,
          required String from,
          required CallCompat call,
          required Currency localCurrency}) =>
      YttriumDart.instance.api
          .crateChainAbstractionDartCompatChainAbstractionClientPrepareDetailed(
              that: this,
              chainId: chainId,
              from: from,
              call: call,
              localCurrency: localCurrency);
}
