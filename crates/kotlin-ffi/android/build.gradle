import groovy.json.JsonSlurper

String findRustlsPlatformVerifierProject() {
    try {
        def projectRoot = new File(project.projectDir, "../../..")
        def yttriumCargoToml = new File(projectRoot, "crates/yttrium/Cargo.toml")
        
        def dependencyText = providers.exec {
            it.workingDir = projectRoot
            commandLine("cargo", "metadata", "--format-version", "1", "--filter-platform", "aarch64-linux-android", "--manifest-path", yttriumCargoToml.absolutePath, "--features", "android-tls")
        }.standardOutput.asText.get()

        def dependencyJson = new JsonSlurper().parseText(dependencyText)
        def verifierPackage = dependencyJson.packages.find { it.name == "rustls-platform-verifier-android" }
        
        if (verifierPackage != null) {
            def manifestPath = file(verifierPackage.manifest_path)
            def mavenPath = new File(manifestPath.parentFile, "maven")
            if (mavenPath.exists()) {
                println("Found rustls-platform-verifier maven directory at: ${mavenPath.absolutePath}")
                return mavenPath.absolutePath
            } else {
                throw new GradleException("rustls-platform-verifier maven directory not found at: ${mavenPath.absolutePath}")
            }
        } else {
            throw new GradleException("rustls-platform-verifier-android package not found in cargo metadata")
        }
    } catch (Exception e) {
        throw new GradleException("Could not locate rustls-platform-verifier maven repository: ${e.message}")
    }
}

repositories {
    maven {
        url = findRustlsPlatformVerifierProject()
        metadataSources.artifact()
    }
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'maven-publish'

repositories {
    google()
    mavenCentral()
    maven {
        url = findRustlsPlatformVerifierProject()
        metadataSources.artifact()
    }
}

android {
    namespace "com.reown.yttrium.uniffi"

    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            java.srcDirs = ['src/main/kotlin']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

     packagingOptions {
        doNotStrip "*/libuniffi_yttrium.so"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    dependencies {
        // Note: rustls-platform-verifier is handled on the Rust side via JNI
        // The Rust code already includes the initialization call:
        // rustls_platform_verifier::android::init_hosted() in lib.rs
        //
        // The TLS initialization must be called from Kotlin using:
        // YttriumKt.initializeTls(context) - this calls the JNI function
        // Java_com_yttrium_YttriumKt_initializeTls
        
        implementation 'rustls:rustls-platform-verifier:0.1.1'
        implementation 'net.java.dev.jna:jna:5.12.0@aar'
        implementation 'androidx.core:core-ktx:1.10.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

publishing {
    publications {
        release(MavenPublication) {
            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            groupId = 'com.github.reown-com'
            artifactId = 'yttrium'
            version = project.hasProperty("version") ? project.getProperty("version") : "0.0.1"

            pom {
                name.set("Yttrium")
                description.set("An Android library for Yttrium.")
                url.set("https://github.com/reown-com/Yttrium")

                 scm {
                        connection.set("scm:git:git://github.com:reown-com/yttrium.git")
                        developerConnection.set("scm:git:ssh://github.com:reown-com/yttrium.git")
                        url.set("https://github.com/reown-com/yttrium")
                    }
            }
            
            // // Include dependencies in the POM so they're pulled transitively
            // pom.withXml {
            //     def dependenciesNode = asNode().appendNode('dependencies')
                
            //     // Add rustls-platform-verifier dependency
            //     def rustlsDep = dependenciesNode.appendNode('dependency')
            //     rustlsDep.appendNode('groupId', 'rustls')
            //     rustlsDep.appendNode('artifactId', 'rustls-platform-verifier')
            //     rustlsDep.appendNode('version', '0.1.1')
            //     rustlsDep.appendNode('type', 'aar')
                
            //     // Add other dependencies
            //     configurations.implementation.dependencies.each { dep ->
            //         if (dep.group != null && dep.name != 'rustls-platform-verifier') {
            //             def dependency = dependenciesNode.appendNode('dependency')
            //             dependency.appendNode('groupId', dep.group)
            //             dependency.appendNode('artifactId', dep.name)
            //             dependency.appendNode('version', dep.version)
            //             if (dep.name.endsWith('@aar')) {
            //                 dependency.appendNode('type', 'aar')
            //             }
            //         }
            //     }
            // }
        }
    }
}

tasks.named("publishReleasePublicationToMavenLocal") {
    dependsOn("assembleRelease")
}