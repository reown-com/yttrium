import groovy.json.JsonSlurper

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'maven-publish'

String findRustlsPlatformVerifierProject() {
    try {
        // First, try to find a pre-built maven repository (for JitPack builds)
        def prebuiltMavenPath = new File(project.projectDir, "src/main/rustls-platform-verifier-maven")
        if (prebuiltMavenPath.exists()) {
            println("Using pre-built rustls-platform-verifier maven directory at: ${prebuiltMavenPath.absolutePath}")
            return prebuiltMavenPath.absolutePath
        }
        
        // For local builds, check if this is explicitly a JitPack build
        def isJitPack = System.getenv("JITPACK") != null || project.hasProperty("jitpack.build")
        if (isJitPack) {
            throw new GradleException("JitPack build detected but no pre-built maven repository found. Please ensure rustls-platform-verifier-maven is included in the release artifacts.")
        }
        
        // If pre-built doesn't exist and this is not JitPack, try cargo metadata (for local builds with cargo available)
        def projectRoot = new File(project.projectDir, "../../..")
        def yttriumCargoToml = new File(projectRoot, "crates/yttrium/Cargo.toml")
        
        // Check if cargo is available before trying to execute it
        def cargoAvailable = false
        try {
            def result = providers.exec {
                it.workingDir = projectRoot
                commandLine("cargo", "--version")
                it.isIgnoreExitValue = true
            }
            cargoAvailable = result.getResult().get().getExitValue() == 0
        } catch (Exception cargoCheckEx) {
            println("Cargo not available: ${cargoCheckEx.message}")
        }
        
        if (!cargoAvailable) {
            println("Cargo not available for local build, rustls-platform-verifier will be skipped")
            return null
        }
        
        def dependencyText = providers.exec {
            it.workingDir = projectRoot
            commandLine("cargo", "metadata", "--format-version", "1", "--filter-platform", "aarch64-linux-android", "--manifest-path", yttriumCargoToml.absolutePath, "--features", "android-tls")
        }.standardOutput.asText.get()

        def dependencyJson = new JsonSlurper().parseText(dependencyText)
        def verifierPackage = dependencyJson.packages.find { it.name == "rustls-platform-verifier-android" }
        
        if (verifierPackage != null) {
            def manifestPath = file(verifierPackage.manifest_path)
            def mavenPath = new File(manifestPath.parentFile, "maven")
            if (mavenPath.exists()) {
                println("Found rustls-platform-verifier maven directory at: ${mavenPath.absolutePath}")
                return mavenPath.absolutePath
            } else {
                println("rustls-platform-verifier maven directory not found at: ${mavenPath.absolutePath}, skipping for local build")
                return null
            }
        } else {
            println("rustls-platform-verifier-android package not found in cargo metadata, skipping for local build")
            return null
        }
    } catch (Exception e) {
        def isJitPack = System.getenv("JITPACK") != null || project.hasProperty("jitpack.build")
        if (isJitPack) {
            throw new GradleException("Could not locate rustls-platform-verifier maven repository: ${e.message}")
        } else {
            println("Could not locate rustls-platform-verifier maven repository for local build: ${e.message}")
            return null
        }
    }
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10'
    }
}

repositories {
    google()
    mavenCentral()
    
    // Only add rustls-platform-verifier maven repository if it exists
    def rustlsMavenPath = findRustlsPlatformVerifierProject()
    if (rustlsMavenPath != null) {
        maven {
            url = rustlsMavenPath
            metadataSources.artifact()
        }
    }
}

android {
    namespace "com.reown.yttrium.uniffi"

    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            java.srcDirs = ['src/main/kotlin']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

     packagingOptions {
        doNotStrip "*/libuniffi_yttrium.so"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    dependencies { 
        // Only include rustls-platform-verifier if we found the maven repository
        def rustlsMavenPath = findRustlsPlatformVerifierProject()
        if (rustlsMavenPath != null) {
            implementation 'rustls:rustls-platform-verifier:0.1.1'
        }
        
        implementation 'net.java.dev.jna:jna:5.12.0@aar'
        implementation 'androidx.core:core-ktx:1.10.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

publishing {
    publications {
        release(MavenPublication) {
            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            groupId = 'com.github.reown-com'
            artifactId = 'yttrium'
            version = project.hasProperty("version") ? project.getProperty("version") : "0.0.1"

            pom {
                name.set("Yttrium")
                description.set("An Android library for Yttrium.")
                url.set("https://github.com/reown-com/Yttrium")

                 scm {
                        connection.set("scm:git:git://github.com:reown-com/yttrium.git")
                        developerConnection.set("scm:git:ssh://github.com:reown-com/yttrium.git")
                        url.set("https://github.com/reown-com/yttrium")
                    }
            }
        }
    }
}

tasks.named("publishReleasePublicationToMavenLocal") {
    dependsOn("assembleRelease")
}