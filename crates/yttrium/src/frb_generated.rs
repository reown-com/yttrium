// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::chain_abstraction::dart_compat::*;
use flutter_rust_bridge::for_generated::byteorder::{
    NativeEndian, ReadBytesExt, WriteBytesExt,
};
use flutter_rust_bridge::for_generated::{
    transform_result_dco, Lifetimeable, Lockable,
};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.8.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1070456081;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_erc20_token_balance_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_erc20_token_balance", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);
let api_token = <String>::sse_decode(&mut deserializer);
let api_owner = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat_models::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::erc20_token_balance(&*api_that_guard, &api_chain_id, api_token, api_owner).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_estimate_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_estimate_fees", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat_models::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::estimate_fees(&*api_that_guard, api_chain_id).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_execute_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_execute", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_ui_fields = <crate::chain_abstraction::dart_compat_models::UiFieldsCompat>::sse_decode(&mut deserializer);
let api_route_txn_sigs = <Vec<crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat>>::sse_decode(&mut deserializer);
let api_initial_txn_sig = <crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat_models::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::execute(&*api_that_guard, api_ui_fields, api_route_txn_sigs, api_initial_txn_sig).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_new", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_project_id = <String>::sse_decode(&mut deserializer);
let api_pulse_metadata = <crate::chain_abstraction::dart_compat_models::PulseMetadataCompat>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::chain_abstraction::dart_compat::ChainAbstractionClient::new(api_project_id, api_pulse_metadata))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_prepare_detailed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_prepare_detailed", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);
let api_from = <String>::sse_decode(&mut deserializer);
let api_call = <crate::chain_abstraction::dart_compat_models::CallCompat>::sse_decode(&mut deserializer);
let api_local_currency = <crate::chain_abstraction::currency::Currency>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat_models::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::prepare_detailed(&*api_that_guard, api_chain_id, api_from, api_call, api_local_currency).await?;   Ok(output_ok)
                    })().await)
                } })
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        ChainAbstractionClient,
    >
);

// Section: dart2rust

impl SseDecode for ChainAbstractionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ChainAbstractionClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return inner.parse().unwrap();
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::AmountCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_symbol = <String>::sse_decode(deserializer);
        let mut var_amount = <String>::sse_decode(deserializer);
        let mut var_unit = <u8>::sse_decode(deserializer);
        let mut var_formatted = <String>::sse_decode(deserializer);
        let mut var_formattedAlt = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::AmountCompat {
            symbol: var_symbol,
            amount: var_amount,
            unit: var_unit,
            formatted: var_formatted,
            formatted_alt: var_formattedAlt,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::chain_abstraction::api::prepare::BridgingError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::chain_abstraction::api::prepare::BridgingError::NoRoutesAvailable,
1 => crate::chain_abstraction::api::prepare::BridgingError::InsufficientFunds,
2 => crate::chain_abstraction::api::prepare::BridgingError::InsufficientGasFunds,
            _ => unreachable!("Invalid variant for BridgingError: {}", inner),
        };
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::CallCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_to = <String>::sse_decode(deserializer);
        let mut var_value = <u128>::sse_decode(deserializer);
        let mut var_input = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::CallCompat {
            to: var_to,
            value: var_value,
            input: var_input,
        };
    }
}

impl SseDecode for crate::chain_abstraction::currency::Currency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::chain_abstraction::currency::Currency::Usd,
            1 => crate::chain_abstraction::currency::Currency::Eur,
            2 => crate::chain_abstraction::currency::Currency::Gbp,
            3 => crate::chain_abstraction::currency::Currency::Aud,
            4 => crate::chain_abstraction::currency::Currency::Cad,
            5 => crate::chain_abstraction::currency::Currency::Inr,
            6 => crate::chain_abstraction::currency::Currency::Jpy,
            7 => crate::chain_abstraction::currency::Currency::Btc,
            8 => crate::chain_abstraction::currency::Currency::Eth,
            _ => unreachable!("Invalid variant for Currency: {}", inner),
        };
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_maxFeePerGas = <String>::sse_decode(deserializer);
        let mut var_maxPriorityFeePerGas = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat{max_fee_per_gas: var_maxFeePerGas, max_priority_fee_per_gas: var_maxPriorityFeePerGas};
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::ErrorCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::chain_abstraction::dart_compat_models::ErrorCompat::General{message: var_message};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_initialTxnReceipt = <crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat>::sse_decode(deserializer);
        let mut var_initialTxnHash = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat{initial_txn_receipt: var_initialTxnReceipt, initial_txn_hash: var_initialTxnHash};
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_chainId = <String>::sse_decode(deserializer);
let mut var_from = <String>::sse_decode(deserializer);
let mut var_to = <String>::sse_decode(deserializer);
let mut var_value = <String>::sse_decode(deserializer);
let mut var_input = <String>::sse_decode(deserializer);
let mut var_gasLimit = <String>::sse_decode(deserializer);
let mut var_nonce = <String>::sse_decode(deserializer);
let mut var_maxFeePerGas = <String>::sse_decode(deserializer);
let mut var_maxPriorityFeePerGas = <String>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat{chain_id: var_chainId, from: var_from, to: var_to, value: var_value, input: var_input, gas_limit: var_gasLimit, nonce: var_nonce, max_fee_per_gas: var_maxFeePerGas, max_priority_fee_per_gas: var_maxPriorityFeePerGas};}
                }

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_chainId = <String>::sse_decode(deserializer);
        let mut var_tokenContract = <String>::sse_decode(deserializer);
        let mut var_symbol = <String>::sse_decode(deserializer);
        let mut var_amount = <String>::sse_decode(deserializer);
        let mut var_bridgingFee = <String>::sse_decode(deserializer);
        let mut var_decimals = <u8>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::FundingMetadataCompat{chain_id: var_chainId, token_contract: var_tokenContract, symbol: var_symbol, amount: var_amount, bridging_fee: var_bridgingFee, decimals: var_decimals};
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_transferTo = <String>::sse_decode(deserializer);
let mut var_amount = <String>::sse_decode(deserializer);
let mut var_tokenContract = <String>::sse_decode(deserializer);
let mut var_symbol = <String>::sse_decode(deserializer);
let mut var_decimals = <u8>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat{transfer_to: var_transferTo, amount: var_amount, token_contract: var_tokenContract, symbol: var_symbol, decimals: var_decimals};}
                }

impl SseDecode
    for Vec<crate::chain_abstraction::dart_compat_models::FundingMetadataCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::chain_abstraction::dart_compat_models::FundingMetadataCompat>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<
        crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::MetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_fundingFrom = <Vec<
            crate::chain_abstraction::dart_compat_models::FundingMetadataCompat,
        >>::sse_decode(deserializer);
        let mut var_initialTransaction = <crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat>::sse_decode(deserializer);
        let mut var_checkIn = <u64>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::MetadataCompat {
            funding_from: var_fundingFrom,
            initial_transaction: var_initialTransaction,
            check_in: var_checkIn,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_value = <crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Success{value: var_value}; }
1 => { let mut var_value = <crate::chain_abstraction::api::prepare::PrepareResponseError>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Error{value: var_value}; }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_value = <crate::chain_abstraction::dart_compat_models::UiFieldsCompat>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::Available{value: var_value}; }
1 => { let mut var_value = <crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::NotRequired{value: var_value}; }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_orchestrationId = <String>::sse_decode(deserializer);
let mut var_initialTransaction = <crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_decode(deserializer);
let mut var_transactions = <Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>>::sse_decode(deserializer);
let mut var_metadata = <crate::chain_abstraction::dart_compat_models::MetadataCompat>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat{orchestration_id: var_orchestrationId, initial_transaction: var_initialTransaction, transactions: var_transactions, metadata: var_metadata};}
                }

impl SseDecode
    for crate::chain_abstraction::api::prepare::PrepareResponseError
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_error =
            <crate::chain_abstraction::api::prepare::BridgingError>::sse_decode(
                deserializer,
            );
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::api::prepare::PrepareResponseError {
            error: var_error,
            reason: var_reason,
        };
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_initialTransaction = <crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_decode(deserializer);
let mut var_transactions = <Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>>::sse_decode(deserializer);
return crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat{initial_transaction: var_initialTransaction, transactions: var_transactions};}
                }

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_yParity = <bool>::sse_decode(deserializer);
        let mut var_r = <String>::sse_decode(deserializer);
        let mut var_s = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat{y_parity: var_yParity, r: var_r, s: var_s};
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::PulseMetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_url = <Option<String>>::sse_decode(deserializer);
        let mut var_bundleId = <Option<String>>::sse_decode(deserializer);
        let mut var_packageName = <Option<String>>::sse_decode(deserializer);
        let mut var_sdkVersion = <String>::sse_decode(deserializer);
        let mut var_sdkPlatform = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::PulseMetadataCompat{url: var_url, bundle_id: var_bundleId, package_name: var_packageName, sdk_version: var_sdkVersion, sdk_platform: var_sdkPlatform};
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::TransactionCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_chainId = <String>::sse_decode(deserializer);
        let mut var_from = <String>::sse_decode(deserializer);
        let mut var_to = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        let mut var_input = <String>::sse_decode(deserializer);
        let mut var_gasLimit = <u64>::sse_decode(deserializer);
        let mut var_nonce = <u64>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::TransactionCompat{chain_id: var_chainId, from: var_from, to: var_to, value: var_value, input: var_input, gas_limit: var_gasLimit, nonce: var_nonce};
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_fee = <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_decode(deserializer);
        let mut var_localFee = <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::TransactionFeeCompat{fee: var_fee, local_fee: var_localFee};
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_transactionHash = <String>::sse_decode(deserializer);
        let mut var_transactionIndex = <Option<u64>>::sse_decode(deserializer);
        let mut var_blockHash = <Option<String>>::sse_decode(deserializer);
        let mut var_blockNumber = <Option<u64>>::sse_decode(deserializer);
        let mut var_gasUsed = <u64>::sse_decode(deserializer);
        let mut var_effectiveGasPrice = <String>::sse_decode(deserializer);
        let mut var_blobGasUsed = <Option<u64>>::sse_decode(deserializer);
        let mut var_blobGasPrice = <Option<String>>::sse_decode(deserializer);
        let mut var_from = <String>::sse_decode(deserializer);
        let mut var_to = <Option<String>>::sse_decode(deserializer);
        let mut var_contractAddress =
            <Option<String>>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat{transaction_hash: var_transactionHash, transaction_index: var_transactionIndex, block_hash: var_blockHash, block_number: var_blockNumber, gas_used: var_gasUsed, effective_gas_price: var_effectiveGasPrice, blob_gas_used: var_blobGasUsed, blob_gas_price: var_blobGasPrice, from: var_from, to: var_to, contract_address: var_contractAddress};
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::TxnDetailsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_transaction = <crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat>::sse_decode(deserializer);
        let mut var_transactionHashToSign = <String>::sse_decode(deserializer);
        let mut var_fee = <crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::TxnDetailsCompat{transaction: var_transaction, transaction_hash_to_sign: var_transactionHashToSign, fee: var_fee};
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat_models::UiFieldsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_routeResponse = <crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat>::sse_decode(deserializer);
        let mut var_route = <Vec<
            crate::chain_abstraction::dart_compat_models::TxnDetailsCompat,
        >>::sse_decode(deserializer);
        let mut var_localRouteTotal = <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_decode(deserializer);
        let mut var_bridge = <Vec<
            crate::chain_abstraction::dart_compat_models::TransactionFeeCompat,
        >>::sse_decode(deserializer);
        let mut var_localBridgeTotal = <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_decode(deserializer);
        let mut var_initial = <crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>::sse_decode(deserializer);
        let mut var_localTotal = <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat_models::UiFieldsCompat {
            route_response: var_routeResponse,
            route: var_route,
            local_route_total: var_localRouteTotal,
            bridge: var_bridge,
            local_bridge_total: var_localBridgeTotal,
            initial: var_initial,
            local_total: var_localTotal,
        };
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_erc20_token_balance_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_estimate_fees_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_execute_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_new_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_prepare_detailed_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ChainAbstractionClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
            _,
            MoiArc<_>,
        >(self.0)
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ChainAbstractionClient>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ChainAbstractionClient>>
    for ChainAbstractionClient
{
    fn into_into_dart(self) -> FrbWrapper<ChainAbstractionClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::AmountCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.symbol.into_into_dart().into_dart(),
            self.amount.into_into_dart().into_dart(),
            self.unit.into_into_dart().into_dart(),
            self.formatted.into_into_dart().into_dart(),
            self.formatted_alt.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::AmountCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::AmountCompat,
    > for crate::chain_abstraction::dart_compat_models::AmountCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::AmountCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::prepare::BridgingError
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::NoRoutesAvailable => 0.into_dart(),
            Self::InsufficientFunds => 1.into_dart(),
            Self::InsufficientGasFunds => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::prepare::BridgingError
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::prepare::BridgingError,
    > for crate::chain_abstraction::api::prepare::BridgingError
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::prepare::BridgingError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::CallCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.to.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.input.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::CallCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::CallCompat,
    > for crate::chain_abstraction::dart_compat_models::CallCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::CallCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::currency::Currency
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Usd => 0.into_dart(),
            Self::Eur => 1.into_dart(),
            Self::Gbp => 2.into_dart(),
            Self::Aud => 3.into_dart(),
            Self::Cad => 4.into_dart(),
            Self::Inr => 5.into_dart(),
            Self::Jpy => 6.into_dart(),
            Self::Btc => 7.into_dart(),
            Self::Eth => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::currency::Currency
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::currency::Currency,
    > for crate::chain_abstraction::currency::Currency
{
    fn into_into_dart(self) -> crate::chain_abstraction::currency::Currency {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.max_fee_per_gas.into_into_dart().into_dart(),
            self.max_priority_fee_per_gas.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat,
    >
    for crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::ErrorCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::chain_abstraction::dart_compat_models::ErrorCompat::General{message} => { [0.into_dart(),
message.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::ErrorCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::ErrorCompat,
    > for crate::chain_abstraction::dart_compat_models::ErrorCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::ErrorCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.initial_txn_receipt.into_into_dart().into_dart(),
            self.initial_txn_hash.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat,
    > for crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.chain_id.into_into_dart().into_dart(),
self.from.into_into_dart().into_dart(),
self.to.into_into_dart().into_dart(),
self.value.into_into_dart().into_dart(),
self.input.into_into_dart().into_dart(),
self.gas_limit.into_into_dart().into_dart(),
self.nonce.into_into_dart().into_dart(),
self.max_fee_per_gas.into_into_dart().into_dart(),
self.max_priority_fee_per_gas.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat> for crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.chain_id.into_into_dart().into_dart(),
            self.token_contract.into_into_dart().into_dart(),
            self.symbol.into_into_dart().into_dart(),
            self.amount.into_into_dart().into_dart(),
            self.bridging_fee.into_into_dart().into_dart(),
            self.decimals.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::FundingMetadataCompat,
    > for crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.transfer_to.into_into_dart().into_dart(),
self.amount.into_into_dart().into_dart(),
self.token_contract.into_into_dart().into_dart(),
self.symbol.into_into_dart().into_dart(),
self.decimals.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat> for crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::MetadataCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.funding_from.into_into_dart().into_dart(),
            self.initial_transaction.into_into_dart().into_dart(),
            self.check_in.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::MetadataCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::MetadataCompat,
    > for crate::chain_abstraction::dart_compat_models::MetadataCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::MetadataCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Success{value} => { [0.into_dart(),
value.into_into_dart().into_dart()].into_dart() }
crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Error{value} => { [1.into_dart(),
value.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat> for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::Available{value} => { [0.into_dart(),
value.into_into_dart().into_dart()].into_dart() }
crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::NotRequired{value} => { [1.into_dart(),
value.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat> for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.orchestration_id.into_into_dart().into_dart(),
self.initial_transaction.into_into_dart().into_dart(),
self.transactions.into_into_dart().into_dart(),
self.metadata.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat> for crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::prepare::PrepareResponseError
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.error.into_into_dart().into_dart(),
            self.reason.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::prepare::PrepareResponseError
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::prepare::PrepareResponseError,
    > for crate::chain_abstraction::api::prepare::PrepareResponseError
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::prepare::PrepareResponseError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.initial_transaction.into_into_dart().into_dart(),
self.transactions.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat> for crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {
            fn into_into_dart(self) -> crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.y_parity.into_into_dart().into_dart(),
            self.r.into_into_dart().into_dart(),
            self.s.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat,
    >
    for crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::PulseMetadataCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.bundle_id.into_into_dart().into_dart(),
            self.package_name.into_into_dart().into_dart(),
            self.sdk_version.into_into_dart().into_dart(),
            self.sdk_platform.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::PulseMetadataCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::PulseMetadataCompat,
    > for crate::chain_abstraction::dart_compat_models::PulseMetadataCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::PulseMetadataCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::TransactionCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.chain_id.into_into_dart().into_dart(),
            self.from.into_into_dart().into_dart(),
            self.to.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.input.into_into_dart().into_dart(),
            self.gas_limit.into_into_dart().into_dart(),
            self.nonce.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::TransactionCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::TransactionCompat,
    > for crate::chain_abstraction::dart_compat_models::TransactionCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::TransactionCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fee.into_into_dart().into_dart(),
            self.local_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::TransactionFeeCompat,
    > for crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.transaction_hash.into_into_dart().into_dart(),
            self.transaction_index.into_into_dart().into_dart(),
            self.block_hash.into_into_dart().into_dart(),
            self.block_number.into_into_dart().into_dart(),
            self.gas_used.into_into_dart().into_dart(),
            self.effective_gas_price.into_into_dart().into_dart(),
            self.blob_gas_used.into_into_dart().into_dart(),
            self.blob_gas_price.into_into_dart().into_dart(),
            self.from.into_into_dart().into_dart(),
            self.to.into_into_dart().into_dart(),
            self.contract_address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat,
    >
    for crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::TxnDetailsCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.transaction.into_into_dart().into_dart(),
            self.transaction_hash_to_sign.into_into_dart().into_dart(),
            self.fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::TxnDetailsCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::TxnDetailsCompat,
    > for crate::chain_abstraction::dart_compat_models::TxnDetailsCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::TxnDetailsCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat_models::UiFieldsCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.route_response.into_into_dart().into_dart(),
            self.route.into_into_dart().into_dart(),
            self.local_route_total.into_into_dart().into_dart(),
            self.bridge.into_into_dart().into_dart(),
            self.local_bridge_total.into_into_dart().into_dart(),
            self.initial.into_into_dart().into_dart(),
            self.local_total.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat_models::UiFieldsCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat_models::UiFieldsCompat,
    > for crate::chain_abstraction::dart_compat_models::UiFieldsCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat_models::UiFieldsCompat {
        self
    }
}

impl SseEncode for ChainAbstractionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
                _,
                MoiArc<_>,
            >(self),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ChainAbstractionClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.to_string(), serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::AmountCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.symbol, serializer);
        <String>::sse_encode(self.amount, serializer);
        <u8>::sse_encode(self.unit, serializer);
        <String>::sse_encode(self.formatted, serializer);
        <String>::sse_encode(self.formatted_alt, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::chain_abstraction::api::prepare::BridgingError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(match self {crate::chain_abstraction::api::prepare::BridgingError::NoRoutesAvailable => { 0 }
crate::chain_abstraction::api::prepare::BridgingError::InsufficientFunds => { 1 }
crate::chain_abstraction::api::prepare::BridgingError::InsufficientGasFunds => { 2 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::CallCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.to, serializer);
        <u128>::sse_encode(self.value, serializer);
        <String>::sse_encode(self.input, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::currency::Currency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::chain_abstraction::currency::Currency::Usd => 0,
                crate::chain_abstraction::currency::Currency::Eur => 1,
                crate::chain_abstraction::currency::Currency::Gbp => 2,
                crate::chain_abstraction::currency::Currency::Aud => 3,
                crate::chain_abstraction::currency::Currency::Cad => 4,
                crate::chain_abstraction::currency::Currency::Inr => 5,
                crate::chain_abstraction::currency::Currency::Jpy => 6,
                crate::chain_abstraction::currency::Currency::Btc => 7,
                crate::chain_abstraction::currency::Currency::Eth => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::Eip1559EstimationCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.max_fee_per_gas, serializer);
        <String>::sse_encode(self.max_priority_fee_per_gas, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::ErrorCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {crate::chain_abstraction::dart_compat_models::ErrorCompat::General{message} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(message, serializer);
 }
 _ => { unimplemented!(""); }}
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::ExecuteDetailsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat>::sse_encode(self.initial_txn_receipt, serializer);
        <String>::sse_encode(self.initial_txn_hash, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.chain_id, serializer);
<String>::sse_encode(self.from, serializer);
<String>::sse_encode(self.to, serializer);
<String>::sse_encode(self.value, serializer);
<String>::sse_encode(self.input, serializer);
<String>::sse_encode(self.gas_limit, serializer);
<String>::sse_encode(self.nonce, serializer);
<String>::sse_encode(self.max_fee_per_gas, serializer);
<String>::sse_encode(self.max_priority_fee_per_gas, serializer);}
                }

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::FundingMetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.chain_id, serializer);
        <String>::sse_encode(self.token_contract, serializer);
        <String>::sse_encode(self.symbol, serializer);
        <String>::sse_encode(self.amount, serializer);
        <String>::sse_encode(self.bridging_fee, serializer);
        <u8>::sse_encode(self.decimals, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.transfer_to, serializer);
<String>::sse_encode(self.amount, serializer);
<String>::sse_encode(self.token_contract, serializer);
<String>::sse_encode(self.symbol, serializer);
<u8>::sse_encode(self.decimals, serializer);}
                }

impl SseEncode
    for Vec<crate::chain_abstraction::dart_compat_models::FundingMetadataCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::chain_abstraction::dart_compat_models::FundingMetadataCompat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<
        crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::MetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<
            crate::chain_abstraction::dart_compat_models::FundingMetadataCompat,
        >>::sse_encode(self.funding_from, serializer);
        <crate::chain_abstraction::dart_compat_models::InitialTransactionMetadataCompat>::sse_encode(self.initial_transaction, serializer);
        <u64>::sse_encode(self.check_in, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Success{value} => { <i32>::sse_encode(0, serializer); <crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat>::sse_encode(value, serializer);
 }
crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseCompat::Error{value} => { <i32>::sse_encode(1, serializer); <crate::chain_abstraction::api::prepare::PrepareResponseError>::sse_encode(value, serializer);
 }
 _ => { unimplemented!(""); }}}
                }

impl SseEncode for crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::Available{value} => { <i32>::sse_encode(0, serializer); <crate::chain_abstraction::dart_compat_models::UiFieldsCompat>::sse_encode(value, serializer);
 }
crate::chain_abstraction::dart_compat_models::PrepareDetailedResponseSuccessCompat::NotRequired{value} => { <i32>::sse_encode(1, serializer); <crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat>::sse_encode(value, serializer);
 }
 _ => { unimplemented!(""); }}}
                }

impl SseEncode for crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.orchestration_id, serializer);
<crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_encode(self.initial_transaction, serializer);
<Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>>::sse_encode(self.transactions, serializer);
<crate::chain_abstraction::dart_compat_models::MetadataCompat>::sse_encode(self.metadata, serializer);}
                }

impl SseEncode
    for crate::chain_abstraction::api::prepare::PrepareResponseError
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::chain_abstraction::api::prepare::BridgingError>::sse_encode(
            self.error, serializer,
        );
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat_models::PrepareResponseNotRequiredCompat {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::chain_abstraction::dart_compat_models::TransactionCompat>::sse_encode(self.initial_transaction, serializer);
<Vec<crate::chain_abstraction::dart_compat_models::TransactionCompat>>::sse_encode(self.transactions, serializer);}
                }

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::PrimitiveSignatureCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.y_parity, serializer);
        <String>::sse_encode(self.r, serializer);
        <String>::sse_encode(self.s, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::PulseMetadataCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.bundle_id, serializer);
        <Option<String>>::sse_encode(self.package_name, serializer);
        <String>::sse_encode(self.sdk_version, serializer);
        <String>::sse_encode(self.sdk_platform, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::TransactionCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.chain_id, serializer);
        <String>::sse_encode(self.from, serializer);
        <String>::sse_encode(self.to, serializer);
        <String>::sse_encode(self.value, serializer);
        <String>::sse_encode(self.input, serializer);
        <u64>::sse_encode(self.gas_limit, serializer);
        <u64>::sse_encode(self.nonce, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::TransactionFeeCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_encode(self.fee, serializer);
        <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_encode(self.local_fee, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::TransactionReceiptCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.transaction_hash, serializer);
        <Option<u64>>::sse_encode(self.transaction_index, serializer);
        <Option<String>>::sse_encode(self.block_hash, serializer);
        <Option<u64>>::sse_encode(self.block_number, serializer);
        <u64>::sse_encode(self.gas_used, serializer);
        <String>::sse_encode(self.effective_gas_price, serializer);
        <Option<u64>>::sse_encode(self.blob_gas_used, serializer);
        <Option<String>>::sse_encode(self.blob_gas_price, serializer);
        <String>::sse_encode(self.from, serializer);
        <Option<String>>::sse_encode(self.to, serializer);
        <Option<String>>::sse_encode(self.contract_address, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::TxnDetailsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::chain_abstraction::dart_compat_models::FeeEstimatedTransactionCompat>::sse_encode(self.transaction, serializer);
        <String>::sse_encode(self.transaction_hash_to_sign, serializer);
        <crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>::sse_encode(self.fee, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat_models::UiFieldsCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::chain_abstraction::dart_compat_models::PrepareResponseAvailableCompat>::sse_encode(self.route_response, serializer);
        <Vec<crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>>::sse_encode(self.route, serializer);
        <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_encode(self.local_route_total, serializer);
        <Vec<crate::chain_abstraction::dart_compat_models::TransactionFeeCompat>>::sse_encode(self.bridge, serializer);
        <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_encode(self.local_bridge_total, serializer);
        <crate::chain_abstraction::dart_compat_models::TxnDetailsCompat>::sse_encode(self.initial, serializer);
        <crate::chain_abstraction::dart_compat_models::AmountCompat>::sse_encode(self.local_total, serializer);
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use crate::chain_abstraction::dart_compat::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{
        transform_result_dco, Lifetimeable, Lockable,
    };
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
