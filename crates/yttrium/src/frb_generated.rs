// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::chain_abstraction::dart_compat::*;
use crate::chain_abstraction::error::*;
use flutter_rust_bridge::for_generated::byteorder::{
    NativeEndian, ReadBytesExt, WriteBytesExt,
};
use flutter_rust_bridge::for_generated::{
    transform_result_dco, Lifetimeable, Lockable,
};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1349626400;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_erc20_token_balance_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_erc20_token_balance", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);
let api_token = <String>::sse_decode(&mut deserializer);
let api_owner = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::erc20_token_balance(&*api_that_guard, &api_chain_id, api_token, api_owner).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_estimate_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_estimate_fees", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::estimate_fees(&*api_that_guard, api_chain_id).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_new", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_project_id = <String>::sse_decode(&mut deserializer);
let api_pulse_metadata = <crate::chain_abstraction::dart_compat::PulseMetadataCompat>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::chain_abstraction::dart_compat::ChainAbstractionClient::new(api_project_id, api_pulse_metadata))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_prepare_detailed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_prepare_detailed", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_chain_id = <String>::sse_decode(&mut deserializer);
let api_from = <String>::sse_decode(&mut deserializer);
let api_call = <crate::chain_abstraction::dart_compat::CallCompat>::sse_decode(&mut deserializer);
let api_local_currency = <crate::chain_abstraction::currency::Currency>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::prepare_detailed(&*api_that_guard, api_chain_id, api_from, api_call, api_local_currency).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_status_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_status", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_orchestration_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::status(&*api_that_guard, api_orchestration_id).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_wait_for_success_with_timeout_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ChainAbstractionClient_wait_for_success_with_timeout", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChainAbstractionClient>>>::sse_decode(&mut deserializer);
let api_orchestration_id = <String>::sse_decode(&mut deserializer);
let api_check_in = <u64>::sse_decode(&mut deserializer);
let api_timeout = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, crate::chain_abstraction::dart_compat::ErrorCompat>((move || async move {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::chain_abstraction::dart_compat::ChainAbstractionClient::wait_for_success_with_timeout(&*api_that_guard, api_orchestration_id, api_check_in, api_timeout).await?;   Ok(output_ok)
                    })().await)
                } })
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        ChainAbstractionClient,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        PrepareDetailedResponse,
    >
);

// Section: dart2rust

impl SseDecode for ChainAbstractionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for PrepareDetailedResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                PrepareDetailedResponse,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ChainAbstractionClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            PrepareDetailedResponse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return inner.parse().unwrap();
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat::CallCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_to = <String>::sse_decode(deserializer);
        let mut var_value = <u128>::sse_decode(deserializer);
        let mut var_input = <Vec<u8>>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat::CallCompat {
            to: var_to,
            value: var_value,
            input: var_input,
        };
    }
}

impl SseDecode for crate::chain_abstraction::currency::Currency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::chain_abstraction::currency::Currency::Usd,
            1 => crate::chain_abstraction::currency::Currency::Eur,
            2 => crate::chain_abstraction::currency::Currency::Gbp,
            3 => crate::chain_abstraction::currency::Currency::Aud,
            4 => crate::chain_abstraction::currency::Currency::Cad,
            5 => crate::chain_abstraction::currency::Currency::Inr,
            6 => crate::chain_abstraction::currency::Currency::Jpy,
            7 => crate::chain_abstraction::currency::Currency::Btc,
            8 => crate::chain_abstraction::currency::Currency::Eth,
            _ => unreachable!("Invalid variant for Currency: {}", inner),
        };
    }
}

impl SseDecode
    for crate::chain_abstraction::dart_compat::Eip1559EstimationCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_maxFeePerGas = <String>::sse_decode(deserializer);
        let mut var_maxPriorityFeePerGas = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat::Eip1559EstimationCompat{max_fee_per_gas: var_maxFeePerGas, max_priority_fee_per_gas: var_maxPriorityFeePerGas};
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat::ErrorCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::chain_abstraction::dart_compat::ErrorCompat::General(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::chain_abstraction::dart_compat::PulseMetadataCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_url = <Option<String>>::sse_decode(deserializer);
        let mut var_bundleId = <Option<String>>::sse_decode(deserializer);
        let mut var_packageName = <Option<String>>::sse_decode(deserializer);
        let mut var_sdkVersion = <String>::sse_decode(deserializer);
        let mut var_sdkPlatform = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::dart_compat::PulseMetadataCompat {
            url: var_url,
            bundle_id: var_bundleId,
            package_name: var_packageName,
            sdk_version: var_sdkVersion,
            sdk_platform: var_sdkPlatform,
        };
    }
}

impl SseDecode for crate::chain_abstraction::api::status::StatusResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::chain_abstraction::api::status::StatusResponsePendingObject>::sse_decode(deserializer);
                return crate::chain_abstraction::api::status::StatusResponse::Pending(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::chain_abstraction::api::status::StatusResponseCompleted>::sse_decode(deserializer);
                return crate::chain_abstraction::api::status::StatusResponse::Completed(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::chain_abstraction::api::status::StatusResponseError>::sse_decode(deserializer);
                return crate::chain_abstraction::api::status::StatusResponse::Error(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::chain_abstraction::api::status::StatusResponseCompleted
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_createdAt = <u64>::sse_decode(deserializer);
        return crate::chain_abstraction::api::status::StatusResponseCompleted{created_at: var_createdAt};
    }
}

impl SseDecode for crate::chain_abstraction::api::status::StatusResponseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_createdAt = <u64>::sse_decode(deserializer);
        let mut var_error = <String>::sse_decode(deserializer);
        return crate::chain_abstraction::api::status::StatusResponseError {
            created_at: var_createdAt,
            error: var_error,
        };
    }
}

impl SseDecode
    for crate::chain_abstraction::api::status::StatusResponsePendingObject
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_createdAt = <u64>::sse_decode(deserializer);
        let mut var_checkIn = <u64>::sse_decode(deserializer);
        return crate::chain_abstraction::api::status::StatusResponsePendingObject{created_at: var_createdAt, check_in: var_checkIn};
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_erc20_token_balance_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_estimate_fees_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_new_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_prepare_detailed_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_status_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crate__chain_abstraction__dart_compat__ChainAbstractionClient_wait_for_success_with_timeout_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ChainAbstractionClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
            _,
            MoiArc<_>,
        >(self.0)
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ChainAbstractionClient>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ChainAbstractionClient>>
    for ChainAbstractionClient
{
    fn into_into_dart(self) -> FrbWrapper<ChainAbstractionClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<PrepareDetailedResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
            _,
            MoiArc<_>,
        >(self.0)
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<PrepareDetailedResponse>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PrepareDetailedResponse>>
    for PrepareDetailedResponse
{
    fn into_into_dart(self) -> FrbWrapper<PrepareDetailedResponse> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat::CallCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.to.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.input.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat::CallCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat::CallCompat,
    > for crate::chain_abstraction::dart_compat::CallCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat::CallCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::currency::Currency
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Usd => 0.into_dart(),
            Self::Eur => 1.into_dart(),
            Self::Gbp => 2.into_dart(),
            Self::Aud => 3.into_dart(),
            Self::Cad => 4.into_dart(),
            Self::Inr => 5.into_dart(),
            Self::Jpy => 6.into_dart(),
            Self::Btc => 7.into_dart(),
            Self::Eth => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::currency::Currency
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::currency::Currency,
    > for crate::chain_abstraction::currency::Currency
{
    fn into_into_dart(self) -> crate::chain_abstraction::currency::Currency {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat::Eip1559EstimationCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.max_fee_per_gas.into_into_dart().into_dart(),
            self.max_priority_fee_per_gas.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat::Eip1559EstimationCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat::Eip1559EstimationCompat,
    > for crate::chain_abstraction::dart_compat::Eip1559EstimationCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat::Eip1559EstimationCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat::ErrorCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::chain_abstraction::dart_compat::ErrorCompat::General(
                field0,
            ) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat::ErrorCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat::ErrorCompat,
    > for crate::chain_abstraction::dart_compat::ErrorCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat::ErrorCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::dart_compat::PulseMetadataCompat
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.bundle_id.into_into_dart().into_dart(),
            self.package_name.into_into_dart().into_dart(),
            self.sdk_version.into_into_dart().into_dart(),
            self.sdk_platform.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::dart_compat::PulseMetadataCompat
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::dart_compat::PulseMetadataCompat,
    > for crate::chain_abstraction::dart_compat::PulseMetadataCompat
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::dart_compat::PulseMetadataCompat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::status::StatusResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::chain_abstraction::api::status::StatusResponse::Pending(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::chain_abstraction::api::status::StatusResponse::Completed(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::chain_abstraction::api::status::StatusResponse::Error(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::status::StatusResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::status::StatusResponse,
    > for crate::chain_abstraction::api::status::StatusResponse
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::status::StatusResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::status::StatusResponseCompleted
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.created_at.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::status::StatusResponseCompleted
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::status::StatusResponseCompleted,
    > for crate::chain_abstraction::api::status::StatusResponseCompleted
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::status::StatusResponseCompleted {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::status::StatusResponseError
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.created_at.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::status::StatusResponseError
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::status::StatusResponseError,
    > for crate::chain_abstraction::api::status::StatusResponseError
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::status::StatusResponseError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::chain_abstraction::api::status::StatusResponsePendingObject
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.created_at.into_into_dart().into_dart(),
            self.check_in.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::chain_abstraction::api::status::StatusResponsePendingObject
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::chain_abstraction::api::status::StatusResponsePendingObject,
    > for crate::chain_abstraction::api::status::StatusResponsePendingObject
{
    fn into_into_dart(
        self,
    ) -> crate::chain_abstraction::api::status::StatusResponsePendingObject
    {
        self
    }
}

impl SseEncode for ChainAbstractionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
                _,
                MoiArc<_>,
            >(self),
            serializer,
        );
    }
}

impl SseEncode for PrepareDetailedResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                PrepareDetailedResponse,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<
                _,
                MoiArc<_>,
            >(self),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ChainAbstractionClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            PrepareDetailedResponse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.to_string(), serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat::CallCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.to, serializer);
        <u128>::sse_encode(self.value, serializer);
        <Vec<u8>>::sse_encode(self.input, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::currency::Currency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::chain_abstraction::currency::Currency::Usd => 0,
                crate::chain_abstraction::currency::Currency::Eur => 1,
                crate::chain_abstraction::currency::Currency::Gbp => 2,
                crate::chain_abstraction::currency::Currency::Aud => 3,
                crate::chain_abstraction::currency::Currency::Cad => 4,
                crate::chain_abstraction::currency::Currency::Inr => 5,
                crate::chain_abstraction::currency::Currency::Jpy => 6,
                crate::chain_abstraction::currency::Currency::Btc => 7,
                crate::chain_abstraction::currency::Currency::Eth => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode
    for crate::chain_abstraction::dart_compat::Eip1559EstimationCompat
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.max_fee_per_gas, serializer);
        <String>::sse_encode(self.max_priority_fee_per_gas, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat::ErrorCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::chain_abstraction::dart_compat::ErrorCompat::General(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::chain_abstraction::dart_compat::PulseMetadataCompat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.bundle_id, serializer);
        <Option<String>>::sse_encode(self.package_name, serializer);
        <String>::sse_encode(self.sdk_version, serializer);
        <String>::sse_encode(self.sdk_platform, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::api::status::StatusResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {crate::chain_abstraction::api::status::StatusResponse::Pending(field0) => { <i32>::sse_encode(0, serializer); <crate::chain_abstraction::api::status::StatusResponsePendingObject>::sse_encode(field0, serializer);
 }
crate::chain_abstraction::api::status::StatusResponse::Completed(field0) => { <i32>::sse_encode(1, serializer); <crate::chain_abstraction::api::status::StatusResponseCompleted>::sse_encode(field0, serializer);
 }
crate::chain_abstraction::api::status::StatusResponse::Error(field0) => { <i32>::sse_encode(2, serializer); <crate::chain_abstraction::api::status::StatusResponseError>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}
    }
}

impl SseEncode
    for crate::chain_abstraction::api::status::StatusResponseCompleted
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.created_at, serializer);
    }
}

impl SseEncode for crate::chain_abstraction::api::status::StatusResponseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.error, serializer);
    }
}

impl SseEncode
    for crate::chain_abstraction::api::status::StatusResponsePendingObject
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.created_at, serializer);
        <u64>::sse_encode(self.check_in, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.0.

    // Section: imports

    use super::*;
    use crate::chain_abstraction::dart_compat::*;
    use crate::chain_abstraction::error::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{
        transform_result_dco, Lifetimeable, Lockable,
    };
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChainAbstractionClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ChainAbstractionClient,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                PrepareDetailedResponse,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_yttrium_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareDetailedResponse(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                PrepareDetailedResponse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
