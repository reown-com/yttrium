name: Claude Auto Review

on:
  pull_request:
    types: [opened]
    branches: [main]
  issue_comment:
    types: [created]

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'pull_request'
      || (
        github.event_name == 'issue_comment'
        && github.event.issue.pull_request
        && contains(github.event.comment.body, '@claude review')
      )
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Claude Review
        uses: WalletConnect/actions/claude/auto-review@974cce051b8452198a144e0e6c4df4d2328a132c
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          project_context: |
            This is a cross-platform Rust library for smart account abstraction in the Ethereum ecosystem.

            Architecture:
            - Core Rust library compiled to multiple platforms
            - Native libraries for iOS/macOS (Swift wrapper via UniFFI)
            - Native libraries for Android (Kotlin wrapper via UniFFI)
            - WebAssembly module for TypeScript/JavaScript (via wasm-bindgen)
            - Multi-chain support: Ethereum, Solana, SUI, Stacks, TON

            Tech Stack:
            - Language: Rust (edition 2021, rust-version 1.79)
            - Ethereum: Alloy library for EVM interactions
            - Async Runtime: Tokio
            - Serialization: Serde with JSON support
            - Cross-platform FFI: UniFFI for native bindings, wasm-bindgen for WASM
            - Testing: Cargo test with specialized test suites (Pimlico API, blockchain APIs)
            - Build automation: justfile with cargo/rustc toolchain

            Standards:
            - Implements ERC-4337 (account abstraction) - in development
            - Implements ERC-7702 (account abstraction) - in development

            Key Considerations:
            - Follow Rust best practices and idioms
            - Ensure cross-platform compatibility (iOS, Android, Web, Linux)
            - Maintain proper error handling with eyre/thiserror
            - Keep async code clean with tokio patterns
            - Ensure UniFFI bindings remain compatible with Swift/Kotlin
            - Verify WASM bindings work correctly with wasm-bindgen
            - Run cargo clippy for linting (with -D warnings)
            - Use cargo +nightly fmt for formatting
            - Test thoroughly with just devloop before committing
