name: Build and Release Yttrium Swift Utils

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 0.0.1)'
        required: true

env:
  CARGO_TERM_COLOR: always
  VERSION: ${{ github.event.inputs.version || '0.0.1' }}
  TARGET_BRANCH: ${{ github.ref_name }}

permissions:
  contents: write

jobs:
  release-swift-utils-package:
    runs-on: macos-latest-xlarge
    strategy:
      matrix:
        config:
          - debug
    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install sccache
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6

      # 3. Install pnpm
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      # 4. Install Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # 5. Select Xcode
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.4.app/Contents/Developer

      # 6. Build and Package Utils XCFramework
      - name: Build and Package Utils XCFramework
        run: |
          make build-utils-xcframework
          make generate-package-swift-utils

      # 7. Calculate Utils XCFramework Checksum
      - name: Calculate Utils XCFramework Checksum
        id: checksum
        run: |
          CHECKSUM=$(swift package compute-checksum Output/libyttrium-utils.xcframework.zip)
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Utils XCFramework checksum: $CHECKSUM"

      # 8. Update Package.swift for Utils Only
      - name: Update Package.swift for Utils Only
        run: |
          chmod +x scripts/update-package-swift-utils.sh
          ./scripts/update-package-swift-utils.sh "$VERSION" "${{ steps.checksum.outputs.checksum }}"

      # 9. Update Utils Podspec version
      - name: Update Utils Podspec version
        run: |
          sed -i '' "s/spec.version      = \".*\"/spec.version      = \"$VERSION\"/" YttriumUtilsWrapper.podspec
          
          # Update the download URL to match the utils release format
          DOWNLOAD_URL="https://github.com/reown-com/yttrium/releases/download/$VERSION/libyttrium-utils.xcframework.zip"
          sed -i '' "s|https://github.com/reown-com/yttrium/releases/download/[^/]*/libyttrium-utils.xcframework.zip|${DOWNLOAD_URL}|g" YttriumUtilsWrapper.podspec

      # 10. Commit and Push Package.swift, Utils Sources, and Podspec
      - name: Commit and Push Package.swift, Utils Sources, and Podspec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Package.swift platforms/swift/Sources/YttriumUtils/* YttriumUtilsWrapper.podspec
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update Package.swift, utils sources, and podspec for version $VERSION"
            git push origin HEAD:$TARGET_BRANCH
          fi

      # 11. Create Git Tag for Utils
      - name: Create Git Tag for Utils
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin $TARGET_BRANCH
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Tagging commit ${COMMIT_HASH} with version ${VERSION}"
          git tag -a "${VERSION}" -m "Release YttriumUtils version ${VERSION}" "${COMMIT_HASH}"
          git push origin "${VERSION}"

      # 12. Create a GitHub Release for Utils
      - name: Create Release for Utils
        id: create_release_utils
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: YttriumUtils ${{ env.VERSION }}
          draft: false
          prerelease: true

      # 13. Upload Utils XCFramework to the Release
      - name: Upload Utils XCFramework to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_utils.outputs.upload_url }}
          asset_path: ./Output/libyttrium-utils.xcframework.zip
          asset_name: libyttrium-utils.xcframework.zip
          asset_content_type: application/zip

      # 14. Publish Utils CocoaPods
      - name: Publish Utils CocoaPods
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          pod trunk push YttriumUtilsWrapper.podspec --allow-warnings 