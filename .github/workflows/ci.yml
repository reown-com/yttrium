name: CI

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: write # Needed for Flutter CI which auto-updates bindings

env:
  CARGO_TERM_COLOR: always
  RUST_MSRV: 1.88.0

jobs:

  rust_RUST_MSRV:
    name: Rust MSRV - build & lint
    runs-on: [self-hosted, aws-ecs-16cpu-64mem-35disk-40m]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: apt install -y --no-install-recommends clang
      - run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain=none
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - run: rustup install ${{ env.RUST_MSRV }} -c clippy -t wasm32-unknown-unknown && rustup default ${{ env.RUST_MSRV }}
      - run: rustup toolchain install nightly -c rustfmt
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v2
      # - run: echo ${{ vars.REOWN_PROJECT_ID }} > crates/rust-sample-wallet/.project-id
      # - run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      # - run: cargo clippy -p yttrium --all-targets -- -D warnings # `-p yttrium` to avoid feature unification; kotlin-ffi enables uniffi feature and we want to test without that
      - run: just clippy
      - run: rm -rf target/
      - run: cargo build --jobs=1 --workspace --all-features --all-targets
      - run: cargo build -p yttrium --features=wasm --lib --target wasm32-unknown-unknown
      - run: cargo install cargo-udeps --locked
      - run: just _rust_ci

  rust_RUST_MSRV_test:
    name: Rust MSRV - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: rustup install ${{ env.RUST_MSRV }} -c clippy && rustup default ${{ env.RUST_MSRV }}
      - uses: Swatinem/rust-cache@v2
      - run: rustup toolchain install nightly -c rustfmt
      - run: rustup target add wasm32-unknown-unknown
      - uses: extractions/setup-just@v2
      - run: docker compose up -d
        working-directory: test/scripts/forked_state
      - run: while ! curl localhost:8545/health; do sleep 1; done
        timeout-minutes: 5
      - run: while ! curl localhost:4337/health; do sleep 1; done
        timeout-minutes: 5
      - run: while ! curl localhost:3000/ping; do sleep 1; done
        timeout-minutes: 5
      # - run: echo ${{ vars.REOWN_PROJECT_ID }} > crates/rust-sample-wallet/.project-id
      - run: RUST_BACKTRACE=1 RUST_LOG=yttrium=trace cargo test --features=full,test_depends_on_env_REOWN_PROJECT_ID --lib --bins
        env:
          REOWN_PROJECT_ID: ${{ vars.REOWN_PROJECT_ID }}
      - run: docker logs forked_state-anvil-1
        working-directory: test/scripts/forked_state
        if: failure()
      - run: docker logs forked_state-alto-1
        working-directory: test/scripts/forked_state
        if: failure()
      - run: docker logs forked_state-mock-paymaster-1
        working-directory: test/scripts/forked_state
        if: failure()

  rust_stable:
    name: Rust stable - build & lint
    runs-on: [self-hosted, aws-ecs-16cpu-64mem-35disk-40m]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: apt install -y --no-install-recommends clang
      - run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain=none
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - run: rustup install stable -c clippy -t wasm32-unknown-unknown && rustup default stable
      - run: rustup toolchain install nightly -c rustfmt
      # == below is a duplicate of the pinned job above. Keep them in-sync. ==
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v2
      # - run: echo ${{ vars.REOWN_PROJECT_ID }} > crates/rust-sample-wallet/.project-id
      # - run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      # - run: cargo clippy -p yttrium --all-targets -- -D warnings # `-p yttrium` to avoid feature unification; kotlin-ffi enables uniffi feature and we want to test without that
      - run: just clippy
      - run: cargo build --jobs=1 --workspace --all-features --all-targets
      - run: cargo build -p yttrium --features=wasm --lib --target wasm32-unknown-unknown
      - run: cargo install cargo-udeps --locked
      - run: just _rust_ci

  rust_stable_test:
    name: Rust stable - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: rustup update stable && rustup default stable
      # == below is a duplicate of the pinned job above. Keep them in-sync. ==
      - uses: Swatinem/rust-cache@v2
      - run: rustup toolchain install nightly -c rustfmt
      - run: rustup target add wasm32-unknown-unknown
      - uses: extractions/setup-just@v2
      - run: docker compose up -d
        working-directory: test/scripts/forked_state
      - run: while ! curl localhost:8545/health; do sleep 1; done
        timeout-minutes: 5
      - run: while ! curl localhost:4337/health; do sleep 1; done
        timeout-minutes: 5
      - run: while ! curl localhost:3000/ping; do sleep 1; done
        timeout-minutes: 5
      # - run: echo ${{ vars.REOWN_PROJECT_ID }} > crates/rust-sample-wallet/.project-id
      - run: RUST_BACKTRACE=1 RUST_LOG=yttrium=trace cargo test --features=full,test_depends_on_env_REOWN_PROJECT_ID --lib --bins
        env:
          REOWN_PROJECT_ID: ${{ vars.REOWN_PROJECT_ID }}
      - run: docker logs forked_state-anvil-1
        working-directory: test/scripts/forked_state
        if: failure()
      - run: docker logs forked_state-alto-1
        working-directory: test/scripts/forked_state
        if: failure()
      - run: docker logs forked_state-mock-paymaster-1
        working-directory: test/scripts/forked_state
        if: failure()

  build_swift_and_test:
    name: Swift Package - latest
    runs-on: macos-latest-xlarge
    strategy:
      matrix:
        config:
          - debug
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - run: rustup update ${{ env.RUST_MSRV }} && rustup default ${{ env.RUST_MSRV }}
      - uses: Swatinem/rust-cache@v2
      - name: Select Xcode 15.4
        run: sudo xcode-select -s /Applications/Xcode.app

      # Build bindings
      - run: make build-xcframework
      - run: make build-utils-xcframework

      # Don't think we actually need this check, since bindings will be updated during release
      # - run: git diff crates/ffi
      # - run: if [ -n "$(git diff crates/ffi)" ]; then exit 1; fi

      # Test that it compiles
      - name: Build ${{ matrix.config }}
        run: make CONFIG=${{ matrix.config }} build-swift-apple-platforms


  build-kotlin:
    runs-on: [self-hosted, aws-ecs-8cpu-32mem-50disk-30m]

    steps:
      - uses: actions/checkout@v3

      - name: Install Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_MSRV }}
          target: aarch64-linux-android
          override: true
          components: rust-src
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_MSRV }}
          target: armv7-linux-androideabi
          override: true
          components: rust-src
      - uses: Swatinem/rust-cache@v2

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 35
          build-tools: 35.0.0
          ndk-version: 28.2.13676358

      - name: Install cargo-ndk
        run: |
          # --locked to bypass this pipeline error: https://github.com/reown-com/yttrium/actions/runs/12717232881/job/35453267940?pr=110
          cargo install cargo-ndk --locked

      - name: Build Rust library
        run: |
          ./generate_kotlin_locally.sh
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

  merge_check:
    name: Merge Check
    needs: [ rust_RUST_MSRV, build_swift_and_test, build-kotlin ]
    if: ${{ always() && !cancelled() && !failure() }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "CI is successful"
