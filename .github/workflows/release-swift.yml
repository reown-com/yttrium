name: Build and Release Yttrium Swift

on:
    workflow_dispatch:
      inputs:
        version:
          description: 'Version to release (e.g. 0.0.1)'
          required: true

env:
  CARGO_TERM_COLOR: always
  VERSION: ${{ github.event.inputs.version || '0.0.24' }}
  TARGET_BRANCH: ${{ github.ref_name }}

permissions:
  contents: write  # Grant write access to repository contents for this workflow

jobs:
  release-swift-package:
    runs-on: macos-latest-xlarge
    strategy:
      matrix:
        config:
          - debug
    steps:
      # 1. Checkout the Repository with full history
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history so that we can create and push tags

      # 2. Setup ccache (Optional: Improve build speeds)
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      # 3. Setup pnpm (JavaScript Package Manager)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # 4. Setup Rust Environment and Dependencies
      - name: Setup Rust Environment and Dependencies
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          rustup update stable && rustup default stable
          git submodule update --init --recursive
          make setup-thirdparty

      # 5. Select Specific Xcode Version
      - name: Select Xcode 15.4
        run: | 
          sudo xcode-select -s /Applications/Xcode.app

      # 6. Build and Package XCFramework
      - name: Build and Package XCFramework
        run: |
          make build-xcframework
          # Generate the XCFramework zip for release
          mkdir -p Output
          zip -r Output/libyttrium.xcframework.zip target/ios/libyttrium.xcframework

      # 7. Calculate Core XCFramework Checksum
      - name: Calculate Core XCFramework Checksum
        id: checksum
        run: |
          CHECKSUM=$(swift package compute-checksum Output/libyttrium.xcframework.zip)
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Core XCFramework checksum: $CHECKSUM"

      # 8. Update Package.swift for Core Only
      - name: Update Package.swift for Core Only
        run: |
          chmod +x scripts/update-package-swift-core.sh
          ./scripts/update-package-swift-core.sh "$VERSION" "${{ steps.checksum.outputs.checksum }}"

      # 9. Update Podspec with Version and Download URL
      - name: Update Podspec with Version and Download URL
        run: |
          # Replace the version line in Podspec
          sed -i '' "s/^  s\.version *= *.*/  s.version      = '${VERSION}'/g" YttriumWrapper.podspec

          # Construct the download URL
          DOWNLOAD_URL="https://github.com/reown-com/yttrium/releases/download/${VERSION}/libyttrium.xcframework.zip"

          # Replace all libuniffi_yttrium references with libyttrium
          sed -i '' "s|libuniffi_yttrium|libyttrium|g" YttriumWrapper.podspec
          # Update the download URL to the correct version
          sed -i '' "s|https://github.com/reown-com/yttrium/releases/download/[^']*|${DOWNLOAD_URL}|g" YttriumWrapper.podspec

      # 10. Commit and Push Package.swift and Podspec
      - name: Commit and Push Package.swift and Podspec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use default token
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Package.swift platforms/swift/Sources/Yttrium/* YttriumWrapper.podspec
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update Package.swift and podspec for version $VERSION"
            git push origin HEAD:$TARGET_BRANCH
          fi

      # 11. Create Git Tag
      - name: Create Git Tag
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we're on the latest commit
          git fetch origin $TARGET_BRANCH
          
          # Get the latest commit hash
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Tagging commit ${COMMIT_HASH} with version ${VERSION}"
          
          # Create an annotated tag on the latest commit
          git tag -a "${VERSION}" -m "Release version ${VERSION}" "${COMMIT_HASH}"
          
          # Push the tag to the repository
          git push origin "${VERSION}"

      # 12. Create a GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Yttrium ${{ env.VERSION }}
          draft: false
          prerelease: true

      # 13. Upload XCFramework to the Release
      - name: Upload XCFramework to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/libyttrium.xcframework.zip
          asset_name: libyttrium.xcframework.zip
          asset_content_type: application/zip

      # 14. Publish to CocoaPods Trunk
      - name: Publish to CocoaPods Trunk
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          pod trunk push YttriumWrapper.podspec --allow-warnings
