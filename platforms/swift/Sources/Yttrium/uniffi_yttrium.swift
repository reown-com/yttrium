// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(uniffi_yttriumFFI)
import uniffi_yttriumFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_uniffi_yttrium_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_uniffi_yttrium_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol ChainAbstractionClientProtocol : AnyObject {
    
    func estimateFees(chainId: String) async throws  -> Eip1559Estimation
    
    func route(transaction: InitTransaction) async throws  -> RouteResponse
    
    func status(orchestrationId: String) async throws  -> StatusResponse
    
    func waitForSuccessWithTimeout(orchestrationId: String, checkIn: UInt64, timeout: UInt64) async throws  -> StatusResponseCompleted
    
}

open class ChainAbstractionClient:
    ChainAbstractionClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yttrium_fn_clone_chainabstractionclient(self.pointer, $0) }
    }
public convenience init(projectId: String) {
    let pointer =
        try! rustCall() {
    uniffi_uniffi_yttrium_fn_constructor_chainabstractionclient_new(
        FfiConverterString.lower(projectId),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_uniffi_yttrium_fn_free_chainabstractionclient(pointer, $0) }
    }

    

    
open func estimateFees(chainId: String)async throws  -> Eip1559Estimation  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_chainabstractionclient_estimate_fees(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(chainId)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeEip1559Estimation.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func route(transaction: InitTransaction)async throws  -> RouteResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_chainabstractionclient_route(
                    self.uniffiClonePointer(),
                    FfiConverterTypeInitTransaction.lower(transaction)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeRouteResponse_lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func status(orchestrationId: String)async throws  -> StatusResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_chainabstractionclient_status(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(orchestrationId)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeStatusResponse_lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func waitForSuccessWithTimeout(orchestrationId: String, checkIn: UInt64, timeout: UInt64)async throws  -> StatusResponseCompleted  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_chainabstractionclient_wait_for_success_with_timeout(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(orchestrationId),FfiConverterUInt64.lower(checkIn),FfiConverterUInt64.lower(timeout)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeStatusResponseCompleted_lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChainAbstractionClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChainAbstractionClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChainAbstractionClient {
        return ChainAbstractionClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChainAbstractionClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainAbstractionClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChainAbstractionClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChainAbstractionClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChainAbstractionClient {
    return try FfiConverterTypeChainAbstractionClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChainAbstractionClient_lower(_ value: ChainAbstractionClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChainAbstractionClient.lower(value)
}




public protocol FfiAccountClientProtocol : AnyObject {
    
    func chainId()  -> UInt64
    
    func doSendTransactions(signatures: [OwnerSignature], doSendTransactionParams: String) async throws  -> String
    
    func getAddress() async throws  -> String
    
    func prepareSendTransactions(transactions: [FfiTransaction]) async throws  -> PreparedSendTransaction
    
    func sendTransactions(transactions: [FfiTransaction]) async throws  -> String
    
    func signMessageWithMnemonic(message: String, mnemonic: String) throws  -> String
    
    func waitForUserOperationReceipt(userOperationHash: String) async throws  -> String
    
}

open class FfiAccountClient:
    FfiAccountClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yttrium_fn_clone_ffiaccountclient(self.pointer, $0) }
    }
public convenience init(config: FfiAccountClientConfig) {
    let pointer =
        try! rustCall() {
    uniffi_uniffi_yttrium_fn_constructor_ffiaccountclient_new(
        FfiConverterTypeFFIAccountClientConfig.lower(config),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_uniffi_yttrium_fn_free_ffiaccountclient(pointer, $0) }
    }

    

    
open func chainId() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_uniffi_yttrium_fn_method_ffiaccountclient_chain_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func doSendTransactions(signatures: [OwnerSignature], doSendTransactionParams: String)async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_ffiaccountclient_do_send_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeOwnerSignature.lower(signatures),FfiConverterString.lower(doSendTransactionParams)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func getAddress()async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_ffiaccountclient_get_address(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func prepareSendTransactions(transactions: [FfiTransaction])async throws  -> PreparedSendTransaction  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_ffiaccountclient_prepare_send_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeFFITransaction.lower(transactions)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypePreparedSendTransaction.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func sendTransactions(transactions: [FfiTransaction])async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_ffiaccountclient_send_transactions(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeFFITransaction.lower(transactions)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    
open func signMessageWithMnemonic(message: String, mnemonic: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFFIError.lift) {
    uniffi_uniffi_yttrium_fn_method_ffiaccountclient_sign_message_with_mnemonic(self.uniffiClonePointer(),
        FfiConverterString.lower(message),
        FfiConverterString.lower(mnemonic),$0
    )
})
}
    
open func waitForUserOperationReceipt(userOperationHash: String)async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_uniffi_yttrium_fn_method_ffiaccountclient_wait_for_user_operation_receipt(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(userOperationHash)
                )
            },
            pollFunc: ffi_uniffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_uniffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_uniffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeFFIError.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIAccountClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiAccountClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiAccountClient {
        return FfiAccountClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiAccountClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAccountClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiAccountClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAccountClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiAccountClient {
    return try FfiConverterTypeFFIAccountClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAccountClient_lower(_ value: FfiAccountClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIAccountClient.lower(value)
}


public struct Eip1559Estimation {
    public var maxFeePerGas: String
    public var maxPriorityFeePerGas: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(maxFeePerGas: String, maxPriorityFeePerGas: String) {
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
    }
}



extension Eip1559Estimation: Equatable, Hashable {
    public static func ==(lhs: Eip1559Estimation, rhs: Eip1559Estimation) -> Bool {
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEip1559Estimation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip1559Estimation {
        return
            try Eip1559Estimation(
                maxFeePerGas: FfiConverterString.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Eip1559Estimation, into buf: inout [UInt8]) {
        FfiConverterString.write(value.maxFeePerGas, into: &buf)
        FfiConverterString.write(value.maxPriorityFeePerGas, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip1559Estimation_lift(_ buf: RustBuffer) throws -> Eip1559Estimation {
    return try FfiConverterTypeEip1559Estimation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip1559Estimation_lower(_ value: Eip1559Estimation) -> RustBuffer {
    return FfiConverterTypeEip1559Estimation.lower(value)
}


public struct FfiAccountClientConfig {
    public var ownerAddress: String
    public var chainId: UInt64
    public var config: Config
    public var signerType: String
    public var safe: Bool
    public var privateKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ownerAddress: String, chainId: UInt64, config: Config, signerType: String, safe: Bool, privateKey: String) {
        self.ownerAddress = ownerAddress
        self.chainId = chainId
        self.config = config
        self.signerType = signerType
        self.safe = safe
        self.privateKey = privateKey
    }
}



extension FfiAccountClientConfig: Equatable, Hashable {
    public static func ==(lhs: FfiAccountClientConfig, rhs: FfiAccountClientConfig) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress {
            return false
        }
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.config != rhs.config {
            return false
        }
        if lhs.signerType != rhs.signerType {
            return false
        }
        if lhs.safe != rhs.safe {
            return false
        }
        if lhs.privateKey != rhs.privateKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ownerAddress)
        hasher.combine(chainId)
        hasher.combine(config)
        hasher.combine(signerType)
        hasher.combine(safe)
        hasher.combine(privateKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIAccountClientConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAccountClientConfig {
        return
            try FfiAccountClientConfig(
                ownerAddress: FfiConverterString.read(from: &buf), 
                chainId: FfiConverterUInt64.read(from: &buf), 
                config: FfiConverterTypeConfig.read(from: &buf), 
                signerType: FfiConverterString.read(from: &buf), 
                safe: FfiConverterBool.read(from: &buf), 
                privateKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: FfiAccountClientConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.ownerAddress, into: &buf)
        FfiConverterUInt64.write(value.chainId, into: &buf)
        FfiConverterTypeConfig.write(value.config, into: &buf)
        FfiConverterString.write(value.signerType, into: &buf)
        FfiConverterBool.write(value.safe, into: &buf)
        FfiConverterString.write(value.privateKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAccountClientConfig_lift(_ buf: RustBuffer) throws -> FfiAccountClientConfig {
    return try FfiConverterTypeFFIAccountClientConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAccountClientConfig_lower(_ value: FfiAccountClientConfig) -> RustBuffer {
    return FfiConverterTypeFFIAccountClientConfig.lower(value)
}


public struct FfiTransaction {
    public var to: String
    public var value: String
    public var data: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: String, value: String, data: String) {
        self.to = to
        self.value = value
        self.data = data
    }
}



extension FfiTransaction: Equatable, Hashable {
    public static func ==(lhs: FfiTransaction, rhs: FfiTransaction) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(data)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFITransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiTransaction {
        return
            try FfiTransaction(
                to: FfiConverterString.read(from: &buf), 
                value: FfiConverterString.read(from: &buf), 
                data: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: FfiTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.to, into: &buf)
        FfiConverterString.write(value.value, into: &buf)
        FfiConverterString.write(value.data, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFITransaction_lift(_ buf: RustBuffer) throws -> FfiTransaction {
    return try FfiConverterTypeFFITransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFITransaction_lower(_ value: FfiTransaction) -> RustBuffer {
    return FfiConverterTypeFFITransaction.lower(value)
}


public struct InitTransaction {
    public var from: FfiAddress
    public var to: FfiAddress
    public var value: Ffiu256
    public var gas: Ffiu64
    public var gasPrice: Ffiu256
    public var data: FfiBytes
    public var nonce: Ffiu64
    public var maxFeePerGas: Ffiu256
    public var maxPriorityFeePerGas: Ffiu256
    public var chainId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(from: FfiAddress, to: FfiAddress, value: Ffiu256, gas: Ffiu64, gasPrice: Ffiu256, data: FfiBytes, nonce: Ffiu64, maxFeePerGas: Ffiu256, maxPriorityFeePerGas: Ffiu256, chainId: String) {
        self.from = from
        self.to = to
        self.value = value
        self.gas = gas
        self.gasPrice = gasPrice
        self.data = data
        self.nonce = nonce
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.chainId = chainId
    }
}



extension InitTransaction: Equatable, Hashable {
    public static func ==(lhs: InitTransaction, rhs: InitTransaction) -> Bool {
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.gas != rhs.gas {
            return false
        }
        if lhs.gasPrice != rhs.gasPrice {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.chainId != rhs.chainId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(gas)
        hasher.combine(gasPrice)
        hasher.combine(data)
        hasher.combine(nonce)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(chainId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInitTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InitTransaction {
        return
            try InitTransaction(
                from: FfiConverterTypeFFIAddress.read(from: &buf), 
                to: FfiConverterTypeFFIAddress.read(from: &buf), 
                value: FfiConverterTypeFFIU256.read(from: &buf), 
                gas: FfiConverterTypeFFIU64.read(from: &buf), 
                gasPrice: FfiConverterTypeFFIU256.read(from: &buf), 
                data: FfiConverterTypeFFIBytes.read(from: &buf), 
                nonce: FfiConverterTypeFFIU64.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeFFIU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeFFIU256.read(from: &buf), 
                chainId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: InitTransaction, into buf: inout [UInt8]) {
        FfiConverterTypeFFIAddress.write(value.from, into: &buf)
        FfiConverterTypeFFIAddress.write(value.to, into: &buf)
        FfiConverterTypeFFIU256.write(value.value, into: &buf)
        FfiConverterTypeFFIU64.write(value.gas, into: &buf)
        FfiConverterTypeFFIU256.write(value.gasPrice, into: &buf)
        FfiConverterTypeFFIBytes.write(value.data, into: &buf)
        FfiConverterTypeFFIU64.write(value.nonce, into: &buf)
        FfiConverterTypeFFIU256.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeFFIU256.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterString.write(value.chainId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInitTransaction_lift(_ buf: RustBuffer) throws -> InitTransaction {
    return try FfiConverterTypeInitTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInitTransaction_lower(_ value: InitTransaction) -> RustBuffer {
    return FfiConverterTypeInitTransaction.lower(value)
}


public struct OwnerSignature {
    public var owner: String
    public var signature: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(owner: String, signature: String) {
        self.owner = owner
        self.signature = signature
    }
}



extension OwnerSignature: Equatable, Hashable {
    public static func ==(lhs: OwnerSignature, rhs: OwnerSignature) -> Bool {
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(owner)
        hasher.combine(signature)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOwnerSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OwnerSignature {
        return
            try OwnerSignature(
                owner: FfiConverterString.read(from: &buf), 
                signature: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: OwnerSignature, into buf: inout [UInt8]) {
        FfiConverterString.write(value.owner, into: &buf)
        FfiConverterString.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lift(_ buf: RustBuffer) throws -> OwnerSignature {
    return try FfiConverterTypeOwnerSignature.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lower(_ value: OwnerSignature) -> RustBuffer {
    return FfiConverterTypeOwnerSignature.lower(value)
}


public struct PreparedSendTransaction {
    public var hash: String
    public var doSendTransactionParams: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: String, doSendTransactionParams: String) {
        self.hash = hash
        self.doSendTransactionParams = doSendTransactionParams
    }
}



extension PreparedSendTransaction: Equatable, Hashable {
    public static func ==(lhs: PreparedSendTransaction, rhs: PreparedSendTransaction) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(doSendTransactionParams)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSendTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSendTransaction {
        return
            try PreparedSendTransaction(
                hash: FfiConverterString.read(from: &buf), 
                doSendTransactionParams: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PreparedSendTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hash, into: &buf)
        FfiConverterString.write(value.doSendTransactionParams, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lift(_ buf: RustBuffer) throws -> PreparedSendTransaction {
    return try FfiConverterTypePreparedSendTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lower(_ value: PreparedSendTransaction) -> RustBuffer {
    return FfiConverterTypePreparedSendTransaction.lower(value)
}


public enum FfiError {

    
    
    case General(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .General(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .General(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension FfiError: Equatable, Hashable {}

extension FfiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFFITransaction: FfiConverterRustBuffer {
    typealias SwiftType = [FfiTransaction]

    public static func write(_ value: [FfiTransaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFFITransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FfiTransaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [FfiTransaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFFITransaction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeOwnerSignature: FfiConverterRustBuffer {
    typealias SwiftType = [OwnerSignature]

    public static func write(_ value: [OwnerSignature], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOwnerSignature.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [OwnerSignature] {
        let len: Int32 = try readInt(&buf)
        var seq = [OwnerSignature]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOwnerSignature.read(from: &buf))
        }
        return seq
    }
}










/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias FfiAddress = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAddress {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: FfiAddress, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> FfiAddress {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: FfiAddress) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAddress_lift(_ value: RustBuffer) throws -> FfiAddress {
    return try FfiConverterTypeFFIAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAddress_lower(_ value: FfiAddress) -> RustBuffer {
    return FfiConverterTypeFFIAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias FfiBytes = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIBytes: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiBytes {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: FfiBytes, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> FfiBytes {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: FfiBytes) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIBytes_lift(_ value: RustBuffer) throws -> FfiBytes {
    return try FfiConverterTypeFFIBytes.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIBytes_lower(_ value: FfiBytes) -> RustBuffer {
    return FfiConverterTypeFFIBytes.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ffiu256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIU256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ffiu256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ffiu256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ffiu256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ffiu256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIU256_lift(_ value: RustBuffer) throws -> Ffiu256 {
    return try FfiConverterTypeFFIU256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIU256_lower(_ value: Ffiu256) -> RustBuffer {
    return FfiConverterTypeFFIU256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Ffiu64 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIU64: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ffiu64 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Ffiu64, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Ffiu64 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Ffiu64) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIU64_lift(_ value: RustBuffer) throws -> Ffiu64 {
    return try FfiConverterTypeFFIU64.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIU64_lower(_ value: Ffiu64) -> RustBuffer {
    return FfiConverterTypeFFIU64.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_uniffi_yttrium_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_chainabstractionclient_estimate_fees() != 51281) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_chainabstractionclient_route() != 214) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_chainabstractionclient_status() != 15758) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_chainabstractionclient_wait_for_success_with_timeout() != 16595) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_chain_id() != 40865) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_do_send_transactions() != 33638) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_get_address() != 38899) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_prepare_send_transactions() != 33465) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_send_transactions() != 46699) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_sign_message_with_mnemonic() != 60647) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_method_ffiaccountclient_wait_for_user_operation_receipt() != 13654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_constructor_chainabstractionclient_new() != 39164) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_uniffi_yttrium_checksum_constructor_ffiaccountclient_new() != 64773) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all