// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(yttriumFFI)
    import yttriumFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_yttrium_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_yttrium_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol AccountClientProtocol: AnyObject {}

open class AccountClient:
    AccountClientProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_accountclient(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_accountclient(pointer, $0) }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AccountClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountClient {
        return AccountClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AccountClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AccountClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountClient {
    return try FfiConverterTypeAccountClient.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountClient_lower(_ value: AccountClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAccountClient.lower(value)
}

public protocol ClientProtocol: AnyObject {
    func createSponsoredUserOp(transaction: InitialTransaction) async -> PreparedSend

    func prepare(transaction: InitialTransaction) async -> PreparedGasAbstraction

    func prepareDeploy(authSig: SignedAuthorization, params: PrepareDeployParams) async -> PreparedSend

    func send(signature: PrimitiveSignature, params: SendParams) async -> UserOperationReceipt
}

open class Client:
    ClientProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_client(self.pointer, $0) }
    }

    public convenience init(projectId: ProjectId, chainId: String, config: Config) {
        let pointer =
            try! rustCall {
                uniffi_yttrium_fn_constructor_client_new(
                    FfiConverterTypeProjectId.lower(projectId),
                    FfiConverterString.lower(chainId),
                    FfiConverterTypeConfig.lower(config), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_client(pointer, $0) }
    }

    open func createSponsoredUserOp(transaction: InitialTransaction) async -> PreparedSend {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_yttrium_fn_method_client_create_sponsored_user_op(
                        self.uniffiClonePointer(),
                        FfiConverterTypeInitialTransaction.lower(transaction)
                    )
                },
                pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
                completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
                freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
                liftFunc: FfiConverterTypePreparedSend.lift,
                errorHandler: nil
            )
    }

    open func prepare(transaction: InitialTransaction) async -> PreparedGasAbstraction {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_yttrium_fn_method_client_prepare(
                        self.uniffiClonePointer(),
                        FfiConverterTypeInitialTransaction.lower(transaction)
                    )
                },
                pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
                completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
                freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
                liftFunc: FfiConverterTypePreparedGasAbstraction.lift,
                errorHandler: nil
            )
    }

    open func prepareDeploy(authSig: SignedAuthorization, params: PrepareDeployParams) async -> PreparedSend {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_yttrium_fn_method_client_prepare_deploy(
                        self.uniffiClonePointer(),
                        FfiConverterTypeSignedAuthorization.lower(authSig), FfiConverterTypePrepareDeployParams.lower(params)
                    )
                },
                pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
                completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
                freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
                liftFunc: FfiConverterTypePreparedSend.lift,
                errorHandler: nil
            )
    }

    open func send(signature: PrimitiveSignature, params: SendParams) async -> UserOperationReceipt {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_yttrium_fn_method_client_send(
                        self.uniffiClonePointer(),
                        FfiConverterTypePrimitiveSignature.lower(signature), FfiConverterTypeSendParams.lower(params)
                    )
                },
                pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
                completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
                freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
                liftFunc: FfiConverterTypeUserOperationReceipt.lift,
                errorHandler: nil
            )
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
    return try FfiConverterTypeClient.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeClient_lower(_ value: Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClient.lower(value)
}

public protocol Erc6492ClientProtocol: AnyObject {
    func verifySignature(signature: Bytes, address: Address, messageHash: B256) async throws -> Bool
}

open class Erc6492Client:
    Erc6492ClientProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_erc6492client(self.pointer, $0) }
    }

    public convenience init(rpcUrl: String) {
        let pointer =
            try! rustCall {
                uniffi_yttrium_fn_constructor_erc6492client_new(
                    FfiConverterString.lower(rpcUrl), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_erc6492client(pointer, $0) }
    }

    open func verifySignature(signature: Bytes, address: Address, messageHash: B256) async throws -> Bool {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_yttrium_fn_method_erc6492client_verify_signature(
                        self.uniffiClonePointer(),
                        FfiConverterTypeBytes.lower(signature), FfiConverterTypeAddress.lower(address), FfiConverterTypeB256.lower(messageHash)
                    )
                },
                pollFunc: ffi_yttrium_rust_future_poll_i8,
                completeFunc: ffi_yttrium_rust_future_complete_i8,
                freeFunc: ffi_yttrium_rust_future_free_i8,
                liftFunc: FfiConverterBool.lift,
                errorHandler: FfiConverterTypeErc6492Error.lift
            )
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Client: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc6492Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
        return Erc6492Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc6492Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
    return try FfiConverterTypeErc6492Client.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc6492Client.lower(value)
}

public struct Amount {
    public var symbol: String
    public var amount: U256
    public var unit: UInt8
    public var formatted: String
    public var formattedAlt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(symbol: String, amount: U256, unit: UInt8, formatted: String, formattedAlt: String) {
        self.symbol = symbol
        self.amount = amount
        self.unit = unit
        self.formatted = formatted
        self.formattedAlt = formattedAlt
    }
}

extension Amount: Equatable, Hashable {
    public static func == (lhs: Amount, rhs: Amount) -> Bool {
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.formatted != rhs.formatted {
            return false
        }
        if lhs.formattedAlt != rhs.formattedAlt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(symbol)
        hasher.combine(amount)
        hasher.combine(unit)
        hasher.combine(formatted)
        hasher.combine(formattedAlt)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAmount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Amount {
        return
            try Amount(
                symbol: FfiConverterString.read(from: &buf),
                amount: FfiConverterTypeU256.read(from: &buf),
                unit: FfiConverterUInt8.read(from: &buf),
                formatted: FfiConverterString.read(from: &buf),
                formattedAlt: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Amount, into buf: inout [UInt8]) {
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterTypeU256.write(value.amount, into: &buf)
        FfiConverterUInt8.write(value.unit, into: &buf)
        FfiConverterString.write(value.formatted, into: &buf)
        FfiConverterString.write(value.formattedAlt, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lift(_ buf: RustBuffer) throws -> Amount {
    return try FfiConverterTypeAmount.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lower(_ value: Amount) -> RustBuffer {
    return FfiConverterTypeAmount.lower(value)
}

public struct Config {
    public var endpoints: Endpoints

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoints: Endpoints) {
        self.endpoints = endpoints
    }
}

extension Config: Equatable, Hashable {
    public static func == (lhs: Config, rhs: Config) -> Bool {
        if lhs.endpoints != rhs.endpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoints)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                endpoints: FfiConverterTypeEndpoints.read(from: &buf)
            )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoints.write(value.endpoints, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}

public struct DoSendTransactionParams {
    public var userOp: UserOperationV07
    public var validAfter: U48
    public var validUntil: U48

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userOp: UserOperationV07, validAfter: U48, validUntil: U48) {
        self.userOp = userOp
        self.validAfter = validAfter
        self.validUntil = validUntil
    }
}

extension DoSendTransactionParams: Equatable, Hashable {
    public static func == (lhs: DoSendTransactionParams, rhs: DoSendTransactionParams) -> Bool {
        if lhs.userOp != rhs.userOp {
            return false
        }
        if lhs.validAfter != rhs.validAfter {
            return false
        }
        if lhs.validUntil != rhs.validUntil {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userOp)
        hasher.combine(validAfter)
        hasher.combine(validUntil)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDoSendTransactionParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DoSendTransactionParams {
        return
            try DoSendTransactionParams(
                userOp: FfiConverterTypeUserOperationV07.read(from: &buf),
                validAfter: FfiConverterTypeU48.read(from: &buf),
                validUntil: FfiConverterTypeU48.read(from: &buf)
            )
    }

    public static func write(_ value: DoSendTransactionParams, into buf: inout [UInt8]) {
        FfiConverterTypeUserOperationV07.write(value.userOp, into: &buf)
        FfiConverterTypeU48.write(value.validAfter, into: &buf)
        FfiConverterTypeU48.write(value.validUntil, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lift(_ buf: RustBuffer) throws -> DoSendTransactionParams {
    return try FfiConverterTypeDoSendTransactionParams.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lower(_ value: DoSendTransactionParams) -> RustBuffer {
    return FfiConverterTypeDoSendTransactionParams.lower(value)
}

public struct Endpoint {
    public var baseUrl: String
    public var apiKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(baseUrl: String, apiKey: String) {
        self.baseUrl = baseUrl
        self.apiKey = apiKey
    }
}

extension Endpoint: Equatable, Hashable {
    public static func == (lhs: Endpoint, rhs: Endpoint) -> Bool {
        if lhs.baseUrl != rhs.baseUrl {
            return false
        }
        if lhs.apiKey != rhs.apiKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseUrl)
        hasher.combine(apiKey)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoint {
        return
            try Endpoint(
                baseUrl: FfiConverterString.read(from: &buf),
                apiKey: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Endpoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.baseUrl, into: &buf)
        FfiConverterString.write(value.apiKey, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lift(_ buf: RustBuffer) throws -> Endpoint {
    return try FfiConverterTypeEndpoint.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lower(_ value: Endpoint) -> RustBuffer {
    return FfiConverterTypeEndpoint.lower(value)
}

public struct Endpoints {
    public var rpc: Endpoint
    public var bundler: Endpoint
    public var paymaster: Endpoint

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpc: Endpoint, bundler: Endpoint, paymaster: Endpoint) {
        self.rpc = rpc
        self.bundler = bundler
        self.paymaster = paymaster
    }
}

extension Endpoints: Equatable, Hashable {
    public static func == (lhs: Endpoints, rhs: Endpoints) -> Bool {
        if lhs.rpc != rhs.rpc {
            return false
        }
        if lhs.bundler != rhs.bundler {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpc)
        hasher.combine(bundler)
        hasher.combine(paymaster)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoints: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoints {
        return
            try Endpoints(
                rpc: FfiConverterTypeEndpoint.read(from: &buf),
                bundler: FfiConverterTypeEndpoint.read(from: &buf),
                paymaster: FfiConverterTypeEndpoint.read(from: &buf)
            )
    }

    public static func write(_ value: Endpoints, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoint.write(value.rpc, into: &buf)
        FfiConverterTypeEndpoint.write(value.bundler, into: &buf)
        FfiConverterTypeEndpoint.write(value.paymaster, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lift(_ buf: RustBuffer) throws -> Endpoints {
    return try FfiConverterTypeEndpoints.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lower(_ value: Endpoints) -> RustBuffer {
    return FfiConverterTypeEndpoints.lower(value)
}

public struct Execution {
    public var to: Address
    public var value: U256
    public var data: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: Address, value: U256, data: Bytes) {
        self.to = to
        self.value = value
        self.data = data
    }
}

extension Execution: Equatable, Hashable {
    public static func == (lhs: Execution, rhs: Execution) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(data)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeExecution: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Execution {
        return
            try Execution(
                to: FfiConverterTypeAddress.read(from: &buf),
                value: FfiConverterTypeU256.read(from: &buf),
                data: FfiConverterTypeBytes.read(from: &buf)
            )
    }

    public static func write(_ value: Execution, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.data, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeExecution_lift(_ buf: RustBuffer) throws -> Execution {
    return try FfiConverterTypeExecution.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeExecution_lower(_ value: Execution) -> RustBuffer {
    return FfiConverterTypeExecution.lower(value)
}

public struct FeeEstimatedTransaction {
    public var chainId: String
    public var from: Address
    public var to: Address
    public var value: U256
    public var input: Bytes
    public var gasLimit: U64
    public var nonce: U64
    public var maxFeePerGas: U128
    public var maxPriorityFeePerGas: U128

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, from: Address, to: Address, value: U256, input: Bytes, gasLimit: U64, nonce: U64, maxFeePerGas: U128, maxPriorityFeePerGas: U128) {
        self.chainId = chainId
        self.from = from
        self.to = to
        self.value = value
        self.input = input
        self.gasLimit = gasLimit
        self.nonce = nonce
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
    }
}

extension FeeEstimatedTransaction: Equatable, Hashable {
    public static func == (lhs: FeeEstimatedTransaction, rhs: FeeEstimatedTransaction) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        if lhs.gasLimit != rhs.gasLimit {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(input)
        hasher.combine(gasLimit)
        hasher.combine(nonce)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFeeEstimatedTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeeEstimatedTransaction {
        return
            try FeeEstimatedTransaction(
                chainId: FfiConverterString.read(from: &buf),
                from: FfiConverterTypeAddress.read(from: &buf),
                to: FfiConverterTypeAddress.read(from: &buf),
                value: FfiConverterTypeU256.read(from: &buf),
                input: FfiConverterTypeBytes.read(from: &buf),
                gasLimit: FfiConverterTypeU64.read(from: &buf),
                nonce: FfiConverterTypeU64.read(from: &buf),
                maxFeePerGas: FfiConverterTypeU128.read(from: &buf),
                maxPriorityFeePerGas: FfiConverterTypeU128.read(from: &buf)
            )
    }

    public static func write(_ value: FeeEstimatedTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.from, into: &buf)
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.input, into: &buf)
        FfiConverterTypeU64.write(value.gasLimit, into: &buf)
        FfiConverterTypeU64.write(value.nonce, into: &buf)
        FfiConverterTypeU128.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeU128.write(value.maxPriorityFeePerGas, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFeeEstimatedTransaction_lift(_ buf: RustBuffer) throws -> FeeEstimatedTransaction {
    return try FfiConverterTypeFeeEstimatedTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFeeEstimatedTransaction_lower(_ value: FeeEstimatedTransaction) -> RustBuffer {
    return FfiConverterTypeFeeEstimatedTransaction.lower(value)
}

public struct FundingMetadata {
    public var chainId: String
    public var tokenContract: Address
    public var symbol: String
    public var amount: U256
    public var bridgingFee: U256
    public var decimals: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, tokenContract: Address, symbol: String, amount: U256, bridgingFee: U256, decimals: UInt8) {
        self.chainId = chainId
        self.tokenContract = tokenContract
        self.symbol = symbol
        self.amount = amount
        self.bridgingFee = bridgingFee
        self.decimals = decimals
    }
}

extension FundingMetadata: Equatable, Hashable {
    public static func == (lhs: FundingMetadata, rhs: FundingMetadata) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.tokenContract != rhs.tokenContract {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.bridgingFee != rhs.bridgingFee {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(tokenContract)
        hasher.combine(symbol)
        hasher.combine(amount)
        hasher.combine(bridgingFee)
        hasher.combine(decimals)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFundingMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FundingMetadata {
        return
            try FundingMetadata(
                chainId: FfiConverterString.read(from: &buf),
                tokenContract: FfiConverterTypeAddress.read(from: &buf),
                symbol: FfiConverterString.read(from: &buf),
                amount: FfiConverterTypeU256.read(from: &buf),
                bridgingFee: FfiConverterTypeU256.read(from: &buf),
                decimals: FfiConverterUInt8.read(from: &buf)
            )
    }

    public static func write(_ value: FundingMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.tokenContract, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterTypeU256.write(value.amount, into: &buf)
        FfiConverterTypeU256.write(value.bridgingFee, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFundingMetadata_lift(_ buf: RustBuffer) throws -> FundingMetadata {
    return try FfiConverterTypeFundingMetadata.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFundingMetadata_lower(_ value: FundingMetadata) -> RustBuffer {
    return FfiConverterTypeFundingMetadata.lower(value)
}

public struct InitialTransaction {
    public var chainId: String
    public var from: Address
    public var to: Address
    public var value: U256
    public var input: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, from: Address, to: Address, value: U256, input: Bytes) {
        self.chainId = chainId
        self.from = from
        self.to = to
        self.value = value
        self.input = input
    }
}

extension InitialTransaction: Equatable, Hashable {
    public static func == (lhs: InitialTransaction, rhs: InitialTransaction) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(input)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeInitialTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InitialTransaction {
        return
            try InitialTransaction(
                chainId: FfiConverterString.read(from: &buf),
                from: FfiConverterTypeAddress.read(from: &buf),
                to: FfiConverterTypeAddress.read(from: &buf),
                value: FfiConverterTypeU256.read(from: &buf),
                input: FfiConverterTypeBytes.read(from: &buf)
            )
    }

    public static func write(_ value: InitialTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.from, into: &buf)
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.input, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialTransaction_lift(_ buf: RustBuffer) throws -> InitialTransaction {
    return try FfiConverterTypeInitialTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialTransaction_lower(_ value: InitialTransaction) -> RustBuffer {
    return FfiConverterTypeInitialTransaction.lower(value)
}

public struct InitialTransactionMetadata {
    public var transferTo: Address
    public var amount: U256
    public var tokenContract: Address
    public var symbol: String
    public var decimals: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transferTo: Address, amount: U256, tokenContract: Address, symbol: String, decimals: UInt8) {
        self.transferTo = transferTo
        self.amount = amount
        self.tokenContract = tokenContract
        self.symbol = symbol
        self.decimals = decimals
    }
}

extension InitialTransactionMetadata: Equatable, Hashable {
    public static func == (lhs: InitialTransactionMetadata, rhs: InitialTransactionMetadata) -> Bool {
        if lhs.transferTo != rhs.transferTo {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.tokenContract != rhs.tokenContract {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transferTo)
        hasher.combine(amount)
        hasher.combine(tokenContract)
        hasher.combine(symbol)
        hasher.combine(decimals)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeInitialTransactionMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InitialTransactionMetadata {
        return
            try InitialTransactionMetadata(
                transferTo: FfiConverterTypeAddress.read(from: &buf),
                amount: FfiConverterTypeU256.read(from: &buf),
                tokenContract: FfiConverterTypeAddress.read(from: &buf),
                symbol: FfiConverterString.read(from: &buf),
                decimals: FfiConverterUInt8.read(from: &buf)
            )
    }

    public static func write(_ value: InitialTransactionMetadata, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.transferTo, into: &buf)
        FfiConverterTypeU256.write(value.amount, into: &buf)
        FfiConverterTypeAddress.write(value.tokenContract, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialTransactionMetadata_lift(_ buf: RustBuffer) throws -> InitialTransactionMetadata {
    return try FfiConverterTypeInitialTransactionMetadata.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialTransactionMetadata_lower(_ value: InitialTransactionMetadata) -> RustBuffer {
    return FfiConverterTypeInitialTransactionMetadata.lower(value)
}

public struct Metadata {
    public var fundingFrom: [FundingMetadata]
    public var initialTransaction: InitialTransactionMetadata
    public var checkIn: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fundingFrom: [FundingMetadata], initialTransaction: InitialTransactionMetadata, checkIn: UInt64) {
        self.fundingFrom = fundingFrom
        self.initialTransaction = initialTransaction
        self.checkIn = checkIn
    }
}

extension Metadata: Equatable, Hashable {
    public static func == (lhs: Metadata, rhs: Metadata) -> Bool {
        if lhs.fundingFrom != rhs.fundingFrom {
            return false
        }
        if lhs.initialTransaction != rhs.initialTransaction {
            return false
        }
        if lhs.checkIn != rhs.checkIn {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fundingFrom)
        hasher.combine(initialTransaction)
        hasher.combine(checkIn)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Metadata {
        return
            try Metadata(
                fundingFrom: FfiConverterSequenceTypeFundingMetadata.read(from: &buf),
                initialTransaction: FfiConverterTypeInitialTransactionMetadata.read(from: &buf),
                checkIn: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: Metadata, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeFundingMetadata.write(value.fundingFrom, into: &buf)
        FfiConverterTypeInitialTransactionMetadata.write(value.initialTransaction, into: &buf)
        FfiConverterUInt64.write(value.checkIn, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lift(_ buf: RustBuffer) throws -> Metadata {
    return try FfiConverterTypeMetadata.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lower(_ value: Metadata) -> RustBuffer {
    return FfiConverterTypeMetadata.lower(value)
}

public struct OwnerSignature {
    public var owner: Address
    public var signature: PrimitiveSignature

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(owner: Address, signature: PrimitiveSignature) {
        self.owner = owner
        self.signature = signature
    }
}

extension OwnerSignature: Equatable, Hashable {
    public static func == (lhs: OwnerSignature, rhs: OwnerSignature) -> Bool {
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(owner)
        hasher.combine(signature)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeOwnerSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OwnerSignature {
        return
            try OwnerSignature(
                owner: FfiConverterTypeAddress.read(from: &buf),
                signature: FfiConverterTypePrimitiveSignature.read(from: &buf)
            )
    }

    public static func write(_ value: OwnerSignature, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.owner, into: &buf)
        FfiConverterTypePrimitiveSignature.write(value.signature, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lift(_ buf: RustBuffer) throws -> OwnerSignature {
    return try FfiConverterTypeOwnerSignature.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lower(_ value: OwnerSignature) -> RustBuffer {
    return FfiConverterTypeOwnerSignature.lower(value)
}

public struct PrepareDeployParams {
    public var transaction: InitialTransaction

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transaction: InitialTransaction) {
        self.transaction = transaction
    }
}

extension PrepareDeployParams: Equatable, Hashable {
    public static func == (lhs: PrepareDeployParams, rhs: PrepareDeployParams) -> Bool {
        if lhs.transaction != rhs.transaction {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transaction)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareDeployParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareDeployParams {
        return
            try PrepareDeployParams(
                transaction: FfiConverterTypeInitialTransaction.read(from: &buf)
            )
    }

    public static func write(_ value: PrepareDeployParams, into buf: inout [UInt8]) {
        FfiConverterTypeInitialTransaction.write(value.transaction, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDeployParams_lift(_ buf: RustBuffer) throws -> PrepareDeployParams {
    return try FfiConverterTypePrepareDeployParams.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDeployParams_lower(_ value: PrepareDeployParams) -> RustBuffer {
    return FfiConverterTypePrepareDeployParams.lower(value)
}

public struct PrepareResponseAvailable {
    public var orchestrationId: String
    public var initialTransaction: Transaction
    public var transactions: [Transaction]
    public var metadata: Metadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(orchestrationId: String, initialTransaction: Transaction, transactions: [Transaction], metadata: Metadata) {
        self.orchestrationId = orchestrationId
        self.initialTransaction = initialTransaction
        self.transactions = transactions
        self.metadata = metadata
    }
}

extension PrepareResponseAvailable: Equatable, Hashable {
    public static func == (lhs: PrepareResponseAvailable, rhs: PrepareResponseAvailable) -> Bool {
        if lhs.orchestrationId != rhs.orchestrationId {
            return false
        }
        if lhs.initialTransaction != rhs.initialTransaction {
            return false
        }
        if lhs.transactions != rhs.transactions {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(orchestrationId)
        hasher.combine(initialTransaction)
        hasher.combine(transactions)
        hasher.combine(metadata)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareResponseAvailable: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareResponseAvailable {
        return
            try PrepareResponseAvailable(
                orchestrationId: FfiConverterString.read(from: &buf),
                initialTransaction: FfiConverterTypeTransaction.read(from: &buf),
                transactions: FfiConverterSequenceTypeTransaction.read(from: &buf),
                metadata: FfiConverterTypeMetadata.read(from: &buf)
            )
    }

    public static func write(_ value: PrepareResponseAvailable, into buf: inout [UInt8]) {
        FfiConverterString.write(value.orchestrationId, into: &buf)
        FfiConverterTypeTransaction.write(value.initialTransaction, into: &buf)
        FfiConverterSequenceTypeTransaction.write(value.transactions, into: &buf)
        FfiConverterTypeMetadata.write(value.metadata, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseAvailable_lift(_ buf: RustBuffer) throws -> PrepareResponseAvailable {
    return try FfiConverterTypePrepareResponseAvailable.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseAvailable_lower(_ value: PrepareResponseAvailable) -> RustBuffer {
    return FfiConverterTypePrepareResponseAvailable.lower(value)
}

/**
 * Bridging check error response that should be returned as a normal HTTP 200
 * response
 */
public struct PrepareResponseError {
    public var error: BridgingError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: BridgingError) {
        self.error = error
    }
}

extension PrepareResponseError: Equatable, Hashable {
    public static func == (lhs: PrepareResponseError, rhs: PrepareResponseError) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareResponseError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareResponseError {
        return
            try PrepareResponseError(
                error: FfiConverterTypeBridgingError.read(from: &buf)
            )
    }

    public static func write(_ value: PrepareResponseError, into buf: inout [UInt8]) {
        FfiConverterTypeBridgingError.write(value.error, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseError_lift(_ buf: RustBuffer) throws -> PrepareResponseError {
    return try FfiConverterTypePrepareResponseError.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseError_lower(_ value: PrepareResponseError) -> RustBuffer {
    return FfiConverterTypePrepareResponseError.lower(value)
}

public struct PrepareResponseNotRequired {
    public var initialTransaction: Transaction
    public var transactions: [Transaction]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(initialTransaction: Transaction, transactions: [Transaction]) {
        self.initialTransaction = initialTransaction
        self.transactions = transactions
    }
}

extension PrepareResponseNotRequired: Equatable, Hashable {
    public static func == (lhs: PrepareResponseNotRequired, rhs: PrepareResponseNotRequired) -> Bool {
        if lhs.initialTransaction != rhs.initialTransaction {
            return false
        }
        if lhs.transactions != rhs.transactions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(initialTransaction)
        hasher.combine(transactions)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareResponseNotRequired: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareResponseNotRequired {
        return
            try PrepareResponseNotRequired(
                initialTransaction: FfiConverterTypeTransaction.read(from: &buf),
                transactions: FfiConverterSequenceTypeTransaction.read(from: &buf)
            )
    }

    public static func write(_ value: PrepareResponseNotRequired, into buf: inout [UInt8]) {
        FfiConverterTypeTransaction.write(value.initialTransaction, into: &buf)
        FfiConverterSequenceTypeTransaction.write(value.transactions, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseNotRequired_lift(_ buf: RustBuffer) throws -> PrepareResponseNotRequired {
    return try FfiConverterTypePrepareResponseNotRequired.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseNotRequired_lower(_ value: PrepareResponseNotRequired) -> RustBuffer {
    return FfiConverterTypePrepareResponseNotRequired.lower(value)
}

public struct PreparedGasAbstractionAuthorization {
    public var auth: Authorization
    public var hash: B256

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(auth: Authorization, hash: B256) {
        self.auth = auth
        self.hash = hash
    }
}

extension PreparedGasAbstractionAuthorization: Equatable, Hashable {
    public static func == (lhs: PreparedGasAbstractionAuthorization, rhs: PreparedGasAbstractionAuthorization) -> Bool {
        if lhs.auth != rhs.auth {
            return false
        }
        if lhs.hash != rhs.hash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(auth)
        hasher.combine(hash)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedGasAbstractionAuthorization: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedGasAbstractionAuthorization {
        return
            try PreparedGasAbstractionAuthorization(
                auth: FfiConverterTypeAuthorization.read(from: &buf),
                hash: FfiConverterTypeB256.read(from: &buf)
            )
    }

    public static func write(_ value: PreparedGasAbstractionAuthorization, into buf: inout [UInt8]) {
        FfiConverterTypeAuthorization.write(value.auth, into: &buf)
        FfiConverterTypeB256.write(value.hash, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedGasAbstractionAuthorization_lift(_ buf: RustBuffer) throws -> PreparedGasAbstractionAuthorization {
    return try FfiConverterTypePreparedGasAbstractionAuthorization.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedGasAbstractionAuthorization_lower(_ value: PreparedGasAbstractionAuthorization) -> RustBuffer {
    return FfiConverterTypePreparedGasAbstractionAuthorization.lower(value)
}

public struct PreparedSend {
    public var message: Bytes
    public var hash: B256
    public var sendParams: SendParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(message: Bytes, hash: B256, sendParams: SendParams) {
        self.message = message
        self.hash = hash
        self.sendParams = sendParams
    }
}

extension PreparedSend: Equatable, Hashable {
    public static func == (lhs: PreparedSend, rhs: PreparedSend) -> Bool {
        if lhs.message != rhs.message {
            return false
        }
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.sendParams != rhs.sendParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(message)
        hasher.combine(hash)
        hasher.combine(sendParams)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSend: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSend {
        return
            try PreparedSend(
                message: FfiConverterTypeBytes.read(from: &buf),
                hash: FfiConverterTypeB256.read(from: &buf),
                sendParams: FfiConverterTypeSendParams.read(from: &buf)
            )
    }

    public static func write(_ value: PreparedSend, into buf: inout [UInt8]) {
        FfiConverterTypeBytes.write(value.message, into: &buf)
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeSendParams.write(value.sendParams, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSend_lift(_ buf: RustBuffer) throws -> PreparedSend {
    return try FfiConverterTypePreparedSend.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSend_lower(_ value: PreparedSend) -> RustBuffer {
    return FfiConverterTypePreparedSend.lower(value)
}

public struct PreparedSendTransaction {
    public var safeOp: SafeOp
    public var domain: Eip712Domain
    public var hash: B256
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(safeOp: SafeOp, domain: Eip712Domain, hash: B256, doSendTransactionParams: DoSendTransactionParams) {
        self.safeOp = safeOp
        self.domain = domain
        self.hash = hash
        self.doSendTransactionParams = doSendTransactionParams
    }
}

extension PreparedSendTransaction: Equatable, Hashable {
    public static func == (lhs: PreparedSendTransaction, rhs: PreparedSendTransaction) -> Bool {
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(safeOp)
        hasher.combine(domain)
        hasher.combine(hash)
        hasher.combine(doSendTransactionParams)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSendTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSendTransaction {
        return
            try PreparedSendTransaction(
                safeOp: FfiConverterTypeSafeOp.read(from: &buf),
                domain: FfiConverterTypeEip712Domain.read(from: &buf),
                hash: FfiConverterTypeB256.read(from: &buf),
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
            )
    }

    public static func write(_ value: PreparedSendTransaction, into buf: inout [UInt8]) {
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lift(_ buf: RustBuffer) throws -> PreparedSendTransaction {
    return try FfiConverterTypePreparedSendTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lower(_ value: PreparedSendTransaction) -> RustBuffer {
    return FfiConverterTypePreparedSendTransaction.lower(value)
}

public struct SendParams {
    public var userOp: UserOperationV07

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userOp: UserOperationV07) {
        self.userOp = userOp
    }
}

extension SendParams: Equatable, Hashable {
    public static func == (lhs: SendParams, rhs: SendParams) -> Bool {
        if lhs.userOp != rhs.userOp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userOp)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendParams {
        return
            try SendParams(
                userOp: FfiConverterTypeUserOperationV07.read(from: &buf)
            )
    }

    public static func write(_ value: SendParams, into buf: inout [UInt8]) {
        FfiConverterTypeUserOperationV07.write(value.userOp, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendParams_lift(_ buf: RustBuffer) throws -> SendParams {
    return try FfiConverterTypeSendParams.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendParams_lower(_ value: SendParams) -> RustBuffer {
    return FfiConverterTypeSendParams.lower(value)
}

public struct SignOutput {
    public var toSign: SignOutputToSign
    public var signStep3Params: SignStep3Params

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(toSign: SignOutputToSign, signStep3Params: SignStep3Params) {
        self.toSign = toSign
        self.signStep3Params = signStep3Params
    }
}

extension SignOutput: Equatable, Hashable {
    public static func == (lhs: SignOutput, rhs: SignOutput) -> Bool {
        if lhs.toSign != rhs.toSign {
            return false
        }
        if lhs.signStep3Params != rhs.signStep3Params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(toSign)
        hasher.combine(signStep3Params)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutput {
        return
            try SignOutput(
                toSign: FfiConverterTypeSignOutputToSign.read(from: &buf),
                signStep3Params: FfiConverterTypeSignStep3Params.read(from: &buf)
            )
    }

    public static func write(_ value: SignOutput, into buf: inout [UInt8]) {
        FfiConverterTypeSignOutputToSign.write(value.toSign, into: &buf)
        FfiConverterTypeSignStep3Params.write(value.signStep3Params, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutput_lift(_ buf: RustBuffer) throws -> SignOutput {
    return try FfiConverterTypeSignOutput.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutput_lower(_ value: SignOutput) -> RustBuffer {
    return FfiConverterTypeSignOutput.lower(value)
}

public struct SignOutputToSign {
    public var hash: B256
    public var safeOp: SafeOp
    public var domain: Eip712Domain

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: B256, safeOp: SafeOp, domain: Eip712Domain) {
        self.hash = hash
        self.safeOp = safeOp
        self.domain = domain
    }
}

extension SignOutputToSign: Equatable, Hashable {
    public static func == (lhs: SignOutputToSign, rhs: SignOutputToSign) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(safeOp)
        hasher.combine(domain)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputToSign: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputToSign {
        return
            try SignOutputToSign(
                hash: FfiConverterTypeB256.read(from: &buf),
                safeOp: FfiConverterTypeSafeOp.read(from: &buf),
                domain: FfiConverterTypeEip712Domain.read(from: &buf)
            )
    }

    public static func write(_ value: SignOutputToSign, into buf: inout [UInt8]) {
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lift(_ buf: RustBuffer) throws -> SignOutputToSign {
    return try FfiConverterTypeSignOutputToSign.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lower(_ value: SignOutputToSign) -> RustBuffer {
    return FfiConverterTypeSignOutputToSign.lower(value)
}

public struct SignStep3Params {
    public var signature: Bytes
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(signature: Bytes, doSendTransactionParams: DoSendTransactionParams) {
        self.signature = signature
        self.doSendTransactionParams = doSendTransactionParams
    }
}

extension SignStep3Params: Equatable, Hashable {
    public static func == (lhs: SignStep3Params, rhs: SignStep3Params) -> Bool {
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signature)
        hasher.combine(doSendTransactionParams)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignStep3Params: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignStep3Params {
        return
            try SignStep3Params(
                signature: FfiConverterTypeBytes.read(from: &buf),
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
            )
    }

    public static func write(_ value: SignStep3Params, into buf: inout [UInt8]) {
        FfiConverterTypeBytes.write(value.signature, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lift(_ buf: RustBuffer) throws -> SignStep3Params {
    return try FfiConverterTypeSignStep3Params.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lower(_ value: SignStep3Params) -> RustBuffer {
    return FfiConverterTypeSignStep3Params.lower(value)
}

public struct SignedAuthorization {
    public var auth: Authorization
    public var signature: PrimitiveSignature

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(auth: Authorization, signature: PrimitiveSignature) {
        self.auth = auth
        self.signature = signature
    }
}

extension SignedAuthorization: Equatable, Hashable {
    public static func == (lhs: SignedAuthorization, rhs: SignedAuthorization) -> Bool {
        if lhs.auth != rhs.auth {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(auth)
        hasher.combine(signature)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignedAuthorization: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignedAuthorization {
        return
            try SignedAuthorization(
                auth: FfiConverterTypeAuthorization.read(from: &buf),
                signature: FfiConverterTypePrimitiveSignature.read(from: &buf)
            )
    }

    public static func write(_ value: SignedAuthorization, into buf: inout [UInt8]) {
        FfiConverterTypeAuthorization.write(value.auth, into: &buf)
        FfiConverterTypePrimitiveSignature.write(value.signature, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignedAuthorization_lift(_ buf: RustBuffer) throws -> SignedAuthorization {
    return try FfiConverterTypeSignedAuthorization.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignedAuthorization_lower(_ value: SignedAuthorization) -> RustBuffer {
    return FfiConverterTypeSignedAuthorization.lower(value)
}

public struct StatusResponseCompleted {
    public var createdAt: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64) {
        self.createdAt = createdAt
    }
}

extension StatusResponseCompleted: Equatable, Hashable {
    public static func == (lhs: StatusResponseCompleted, rhs: StatusResponseCompleted) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponseCompleted: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponseCompleted {
        return
            try StatusResponseCompleted(
                createdAt: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: StatusResponseCompleted, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseCompleted_lift(_ buf: RustBuffer) throws -> StatusResponseCompleted {
    return try FfiConverterTypeStatusResponseCompleted.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseCompleted_lower(_ value: StatusResponseCompleted) -> RustBuffer {
    return FfiConverterTypeStatusResponseCompleted.lower(value)
}

public struct StatusResponseError {
    public var createdAt: UInt64
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64, error: String) {
        self.createdAt = createdAt
        self.error = error
    }
}

extension StatusResponseError: Equatable, Hashable {
    public static func == (lhs: StatusResponseError, rhs: StatusResponseError) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
        hasher.combine(error)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponseError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponseError {
        return
            try StatusResponseError(
                createdAt: FfiConverterUInt64.read(from: &buf),
                error: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: StatusResponseError, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
        FfiConverterString.write(value.error, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseError_lift(_ buf: RustBuffer) throws -> StatusResponseError {
    return try FfiConverterTypeStatusResponseError.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseError_lower(_ value: StatusResponseError) -> RustBuffer {
    return FfiConverterTypeStatusResponseError.lower(value)
}

public struct StatusResponsePending {
    public var createdAt: UInt64
    /**
     * Polling interval in ms for the client
     */
    public var checkIn: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64,
                /**
                    * Polling interval in ms for the client
                    */ checkIn: UInt64)
    {
        self.createdAt = createdAt
        self.checkIn = checkIn
    }
}

extension StatusResponsePending: Equatable, Hashable {
    public static func == (lhs: StatusResponsePending, rhs: StatusResponsePending) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.checkIn != rhs.checkIn {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
        hasher.combine(checkIn)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponsePending: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponsePending {
        return
            try StatusResponsePending(
                createdAt: FfiConverterUInt64.read(from: &buf),
                checkIn: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: StatusResponsePending, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
        FfiConverterUInt64.write(value.checkIn, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponsePending_lift(_ buf: RustBuffer) throws -> StatusResponsePending {
    return try FfiConverterTypeStatusResponsePending.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponsePending_lower(_ value: StatusResponsePending) -> RustBuffer {
    return FfiConverterTypeStatusResponsePending.lower(value)
}

public struct Transaction {
    public var chainId: String
    public var from: Address
    public var to: Address
    public var value: U256
    public var input: Bytes
    public var gasLimit: U64
    public var nonce: U64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, from: Address, to: Address, value: U256, input: Bytes, gasLimit: U64, nonce: U64) {
        self.chainId = chainId
        self.from = from
        self.to = to
        self.value = value
        self.input = input
        self.gasLimit = gasLimit
        self.nonce = nonce
    }
}

extension Transaction: Equatable, Hashable {
    public static func == (lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        if lhs.gasLimit != rhs.gasLimit {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(input)
        hasher.combine(gasLimit)
        hasher.combine(nonce)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return
            try Transaction(
                chainId: FfiConverterString.read(from: &buf),
                from: FfiConverterTypeAddress.read(from: &buf),
                to: FfiConverterTypeAddress.read(from: &buf),
                value: FfiConverterTypeU256.read(from: &buf),
                input: FfiConverterTypeBytes.read(from: &buf),
                gasLimit: FfiConverterTypeU64.read(from: &buf),
                nonce: FfiConverterTypeU64.read(from: &buf)
            )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.from, into: &buf)
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.input, into: &buf)
        FfiConverterTypeU64.write(value.gasLimit, into: &buf)
        FfiConverterTypeU64.write(value.nonce, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}

public struct TransactionFee {
    public var fee: Amount
    public var localFee: Amount

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fee: Amount, localFee: Amount) {
        self.fee = fee
        self.localFee = localFee
    }
}

extension TransactionFee: Equatable, Hashable {
    public static func == (lhs: TransactionFee, rhs: TransactionFee) -> Bool {
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.localFee != rhs.localFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fee)
        hasher.combine(localFee)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionFee: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionFee {
        return
            try TransactionFee(
                fee: FfiConverterTypeAmount.read(from: &buf),
                localFee: FfiConverterTypeAmount.read(from: &buf)
            )
    }

    public static func write(_ value: TransactionFee, into buf: inout [UInt8]) {
        FfiConverterTypeAmount.write(value.fee, into: &buf)
        FfiConverterTypeAmount.write(value.localFee, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionFee_lift(_ buf: RustBuffer) throws -> TransactionFee {
    return try FfiConverterTypeTransactionFee.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionFee_lower(_ value: TransactionFee) -> RustBuffer {
    return FfiConverterTypeTransactionFee.lower(value)
}

public struct TransactionLog {
    public var address: Address
    public var topics: [B256]
    public var data: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: Address, topics: [B256], data: Bytes) {
        self.address = address
        self.topics = topics
        self.data = data
    }
}

extension TransactionLog: Equatable, Hashable {
    public static func == (lhs: TransactionLog, rhs: TransactionLog) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.topics != rhs.topics {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(topics)
        hasher.combine(data)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionLog: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionLog {
        return
            try TransactionLog(
                address: FfiConverterTypeAddress.read(from: &buf),
                topics: FfiConverterSequenceTypeB256.read(from: &buf),
                data: FfiConverterTypeBytes.read(from: &buf)
            )
    }

    public static func write(_ value: TransactionLog, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.address, into: &buf)
        FfiConverterSequenceTypeB256.write(value.topics, into: &buf)
        FfiConverterTypeBytes.write(value.data, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionLog_lift(_ buf: RustBuffer) throws -> TransactionLog {
    return try FfiConverterTypeTransactionLog.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionLog_lower(_ value: TransactionLog) -> RustBuffer {
    return FfiConverterTypeTransactionLog.lower(value)
}

public struct TransactionReceipt {
    public var transactionHash: B256
    public var transactionIndex: String
    public var blockHash: B256
    public var blockNumber: U64
    public var from: Address
    public var to: Address
    public var cumulativeGasUsed: String
    public var gasUsed: U128
    public var contractAddress: String?
    public var status: U8
    public var logsBloom: String
    public var effectiveGasPrice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transactionHash: B256, transactionIndex: String, blockHash: B256, blockNumber: U64, from: Address, to: Address, cumulativeGasUsed: String, gasUsed: U128, contractAddress: String?, status: U8, logsBloom: String, effectiveGasPrice: String) {
        self.transactionHash = transactionHash
        self.transactionIndex = transactionIndex
        self.blockHash = blockHash
        self.blockNumber = blockNumber
        self.from = from
        self.to = to
        self.cumulativeGasUsed = cumulativeGasUsed
        self.gasUsed = gasUsed
        self.contractAddress = contractAddress
        self.status = status
        self.logsBloom = logsBloom
        self.effectiveGasPrice = effectiveGasPrice
    }
}

extension TransactionReceipt: Equatable, Hashable {
    public static func == (lhs: TransactionReceipt, rhs: TransactionReceipt) -> Bool {
        if lhs.transactionHash != rhs.transactionHash {
            return false
        }
        if lhs.transactionIndex != rhs.transactionIndex {
            return false
        }
        if lhs.blockHash != rhs.blockHash {
            return false
        }
        if lhs.blockNumber != rhs.blockNumber {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.cumulativeGasUsed != rhs.cumulativeGasUsed {
            return false
        }
        if lhs.gasUsed != rhs.gasUsed {
            return false
        }
        if lhs.contractAddress != rhs.contractAddress {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.logsBloom != rhs.logsBloom {
            return false
        }
        if lhs.effectiveGasPrice != rhs.effectiveGasPrice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transactionHash)
        hasher.combine(transactionIndex)
        hasher.combine(blockHash)
        hasher.combine(blockNumber)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(cumulativeGasUsed)
        hasher.combine(gasUsed)
        hasher.combine(contractAddress)
        hasher.combine(status)
        hasher.combine(logsBloom)
        hasher.combine(effectiveGasPrice)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionReceipt: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionReceipt {
        return
            try TransactionReceipt(
                transactionHash: FfiConverterTypeB256.read(from: &buf),
                transactionIndex: FfiConverterString.read(from: &buf),
                blockHash: FfiConverterTypeB256.read(from: &buf),
                blockNumber: FfiConverterTypeU64.read(from: &buf),
                from: FfiConverterTypeAddress.read(from: &buf),
                to: FfiConverterTypeAddress.read(from: &buf),
                cumulativeGasUsed: FfiConverterString.read(from: &buf),
                gasUsed: FfiConverterTypeU128.read(from: &buf),
                contractAddress: FfiConverterOptionString.read(from: &buf),
                status: FfiConverterTypeU8.read(from: &buf),
                logsBloom: FfiConverterString.read(from: &buf),
                effectiveGasPrice: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: TransactionReceipt, into buf: inout [UInt8]) {
        FfiConverterTypeB256.write(value.transactionHash, into: &buf)
        FfiConverterString.write(value.transactionIndex, into: &buf)
        FfiConverterTypeB256.write(value.blockHash, into: &buf)
        FfiConverterTypeU64.write(value.blockNumber, into: &buf)
        FfiConverterTypeAddress.write(value.from, into: &buf)
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterString.write(value.cumulativeGasUsed, into: &buf)
        FfiConverterTypeU128.write(value.gasUsed, into: &buf)
        FfiConverterOptionString.write(value.contractAddress, into: &buf)
        FfiConverterTypeU8.write(value.status, into: &buf)
        FfiConverterString.write(value.logsBloom, into: &buf)
        FfiConverterString.write(value.effectiveGasPrice, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lift(_ buf: RustBuffer) throws -> TransactionReceipt {
    return try FfiConverterTypeTransactionReceipt.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lower(_ value: TransactionReceipt) -> RustBuffer {
    return FfiConverterTypeTransactionReceipt.lower(value)
}

public struct TxnDetails {
    public var transaction: FeeEstimatedTransaction
    public var fee: TransactionFee

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transaction: FeeEstimatedTransaction, fee: TransactionFee) {
        self.transaction = transaction
        self.fee = fee
    }
}

extension TxnDetails: Equatable, Hashable {
    public static func == (lhs: TxnDetails, rhs: TxnDetails) -> Bool {
        if lhs.transaction != rhs.transaction {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transaction)
        hasher.combine(fee)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxnDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxnDetails {
        return
            try TxnDetails(
                transaction: FfiConverterTypeFeeEstimatedTransaction.read(from: &buf),
                fee: FfiConverterTypeTransactionFee.read(from: &buf)
            )
    }

    public static func write(_ value: TxnDetails, into buf: inout [UInt8]) {
        FfiConverterTypeFeeEstimatedTransaction.write(value.transaction, into: &buf)
        FfiConverterTypeTransactionFee.write(value.fee, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTxnDetails_lift(_ buf: RustBuffer) throws -> TxnDetails {
    return try FfiConverterTypeTxnDetails.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTxnDetails_lower(_ value: TxnDetails) -> RustBuffer {
    return FfiConverterTypeTxnDetails.lower(value)
}

public struct UiFields {
    public var route: [TxnDetails]
    public var localRouteTotal: Amount
    public var bridge: [TransactionFee]
    public var localBridgeTotal: Amount
    public var initial: TxnDetails
    public var localTotal: Amount

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(route: [TxnDetails], localRouteTotal: Amount, bridge: [TransactionFee], localBridgeTotal: Amount, initial: TxnDetails, localTotal: Amount) {
        self.route = route
        self.localRouteTotal = localRouteTotal
        self.bridge = bridge
        self.localBridgeTotal = localBridgeTotal
        self.initial = initial
        self.localTotal = localTotal
    }
}

extension UiFields: Equatable, Hashable {
    public static func == (lhs: UiFields, rhs: UiFields) -> Bool {
        if lhs.route != rhs.route {
            return false
        }
        if lhs.localRouteTotal != rhs.localRouteTotal {
            return false
        }
        if lhs.bridge != rhs.bridge {
            return false
        }
        if lhs.localBridgeTotal != rhs.localBridgeTotal {
            return false
        }
        if lhs.initial != rhs.initial {
            return false
        }
        if lhs.localTotal != rhs.localTotal {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(route)
        hasher.combine(localRouteTotal)
        hasher.combine(bridge)
        hasher.combine(localBridgeTotal)
        hasher.combine(initial)
        hasher.combine(localTotal)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeUiFields: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UiFields {
        return
            try UiFields(
                route: FfiConverterSequenceTypeTxnDetails.read(from: &buf),
                localRouteTotal: FfiConverterTypeAmount.read(from: &buf),
                bridge: FfiConverterSequenceTypeTransactionFee.read(from: &buf),
                localBridgeTotal: FfiConverterTypeAmount.read(from: &buf),
                initial: FfiConverterTypeTxnDetails.read(from: &buf),
                localTotal: FfiConverterTypeAmount.read(from: &buf)
            )
    }

    public static func write(_ value: UiFields, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeTxnDetails.write(value.route, into: &buf)
        FfiConverterTypeAmount.write(value.localRouteTotal, into: &buf)
        FfiConverterSequenceTypeTransactionFee.write(value.bridge, into: &buf)
        FfiConverterTypeAmount.write(value.localBridgeTotal, into: &buf)
        FfiConverterTypeTxnDetails.write(value.initial, into: &buf)
        FfiConverterTypeAmount.write(value.localTotal, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUiFields_lift(_ buf: RustBuffer) throws -> UiFields {
    return try FfiConverterTypeUiFields.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUiFields_lower(_ value: UiFields) -> RustBuffer {
    return FfiConverterTypeUiFields.lower(value)
}

public struct UserOperationReceipt {
    public var userOpHash: B256
    public var entryPoint: Address?
    public var sender: Address
    public var nonce: String
    public var paymaster: String
    public var actualGasCost: String
    public var actualGasUsed: String
    public var success: Bool
    public var receipt: TransactionReceipt
    public var logs: [TransactionLog]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userOpHash: B256, entryPoint: Address?, sender: Address, nonce: String, paymaster: String, actualGasCost: String, actualGasUsed: String, success: Bool, receipt: TransactionReceipt, logs: [TransactionLog]) {
        self.userOpHash = userOpHash
        self.entryPoint = entryPoint
        self.sender = sender
        self.nonce = nonce
        self.paymaster = paymaster
        self.actualGasCost = actualGasCost
        self.actualGasUsed = actualGasUsed
        self.success = success
        self.receipt = receipt
        self.logs = logs
    }
}

extension UserOperationReceipt: Equatable, Hashable {
    public static func == (lhs: UserOperationReceipt, rhs: UserOperationReceipt) -> Bool {
        if lhs.userOpHash != rhs.userOpHash {
            return false
        }
        if lhs.entryPoint != rhs.entryPoint {
            return false
        }
        if lhs.sender != rhs.sender {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        if lhs.actualGasCost != rhs.actualGasCost {
            return false
        }
        if lhs.actualGasUsed != rhs.actualGasUsed {
            return false
        }
        if lhs.success != rhs.success {
            return false
        }
        if lhs.receipt != rhs.receipt {
            return false
        }
        if lhs.logs != rhs.logs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userOpHash)
        hasher.combine(entryPoint)
        hasher.combine(sender)
        hasher.combine(nonce)
        hasher.combine(paymaster)
        hasher.combine(actualGasCost)
        hasher.combine(actualGasUsed)
        hasher.combine(success)
        hasher.combine(receipt)
        hasher.combine(logs)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationReceipt: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationReceipt {
        return
            try UserOperationReceipt(
                userOpHash: FfiConverterTypeB256.read(from: &buf),
                entryPoint: FfiConverterOptionTypeAddress.read(from: &buf),
                sender: FfiConverterTypeAddress.read(from: &buf),
                nonce: FfiConverterString.read(from: &buf),
                paymaster: FfiConverterString.read(from: &buf),
                actualGasCost: FfiConverterString.read(from: &buf),
                actualGasUsed: FfiConverterString.read(from: &buf),
                success: FfiConverterBool.read(from: &buf),
                receipt: FfiConverterTypeTransactionReceipt.read(from: &buf),
                logs: FfiConverterSequenceTypeTransactionLog.read(from: &buf)
            )
    }

    public static func write(_ value: UserOperationReceipt, into buf: inout [UInt8]) {
        FfiConverterTypeB256.write(value.userOpHash, into: &buf)
        FfiConverterOptionTypeAddress.write(value.entryPoint, into: &buf)
        FfiConverterTypeAddress.write(value.sender, into: &buf)
        FfiConverterString.write(value.nonce, into: &buf)
        FfiConverterString.write(value.paymaster, into: &buf)
        FfiConverterString.write(value.actualGasCost, into: &buf)
        FfiConverterString.write(value.actualGasUsed, into: &buf)
        FfiConverterBool.write(value.success, into: &buf)
        FfiConverterTypeTransactionReceipt.write(value.receipt, into: &buf)
        FfiConverterSequenceTypeTransactionLog.write(value.logs, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lift(_ buf: RustBuffer) throws -> UserOperationReceipt {
    return try FfiConverterTypeUserOperationReceipt.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lower(_ value: UserOperationReceipt) -> RustBuffer {
    return FfiConverterTypeUserOperationReceipt.lower(value)
}

public struct UserOperationV07 {
    public var sender: AccountAddress
    public var nonce: U256
    public var factory: Address?
    public var factoryData: Bytes?
    public var callData: Bytes
    public var callGasLimit: U256
    public var verificationGasLimit: U256
    public var preVerificationGas: U256
    public var maxFeePerGas: U256
    public var maxPriorityFeePerGas: U256
    public var paymaster: Address?
    public var paymasterVerificationGasLimit: U256?
    public var paymasterPostOpGasLimit: U256?
    public var paymasterData: Bytes?
    public var signature: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sender: AccountAddress, nonce: U256, factory: Address?, factoryData: Bytes?, callData: Bytes, callGasLimit: U256, verificationGasLimit: U256, preVerificationGas: U256, maxFeePerGas: U256, maxPriorityFeePerGas: U256, paymaster: Address?, paymasterVerificationGasLimit: U256?, paymasterPostOpGasLimit: U256?, paymasterData: Bytes?, signature: Bytes) {
        self.sender = sender
        self.nonce = nonce
        self.factory = factory
        self.factoryData = factoryData
        self.callData = callData
        self.callGasLimit = callGasLimit
        self.verificationGasLimit = verificationGasLimit
        self.preVerificationGas = preVerificationGas
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.paymaster = paymaster
        self.paymasterVerificationGasLimit = paymasterVerificationGasLimit
        self.paymasterPostOpGasLimit = paymasterPostOpGasLimit
        self.paymasterData = paymasterData
        self.signature = signature
    }
}

extension UserOperationV07: Equatable, Hashable {
    public static func == (lhs: UserOperationV07, rhs: UserOperationV07) -> Bool {
        if lhs.sender != rhs.sender {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.factory != rhs.factory {
            return false
        }
        if lhs.factoryData != rhs.factoryData {
            return false
        }
        if lhs.callData != rhs.callData {
            return false
        }
        if lhs.callGasLimit != rhs.callGasLimit {
            return false
        }
        if lhs.verificationGasLimit != rhs.verificationGasLimit {
            return false
        }
        if lhs.preVerificationGas != rhs.preVerificationGas {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        if lhs.paymasterVerificationGasLimit != rhs.paymasterVerificationGasLimit {
            return false
        }
        if lhs.paymasterPostOpGasLimit != rhs.paymasterPostOpGasLimit {
            return false
        }
        if lhs.paymasterData != rhs.paymasterData {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sender)
        hasher.combine(nonce)
        hasher.combine(factory)
        hasher.combine(factoryData)
        hasher.combine(callData)
        hasher.combine(callGasLimit)
        hasher.combine(verificationGasLimit)
        hasher.combine(preVerificationGas)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(paymaster)
        hasher.combine(paymasterVerificationGasLimit)
        hasher.combine(paymasterPostOpGasLimit)
        hasher.combine(paymasterData)
        hasher.combine(signature)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationV07: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationV07 {
        return
            try UserOperationV07(
                sender: FfiConverterTypeAccountAddress.read(from: &buf),
                nonce: FfiConverterTypeU256.read(from: &buf),
                factory: FfiConverterOptionTypeAddress.read(from: &buf),
                factoryData: FfiConverterOptionTypeBytes.read(from: &buf),
                callData: FfiConverterTypeBytes.read(from: &buf),
                callGasLimit: FfiConverterTypeU256.read(from: &buf),
                verificationGasLimit: FfiConverterTypeU256.read(from: &buf),
                preVerificationGas: FfiConverterTypeU256.read(from: &buf),
                maxFeePerGas: FfiConverterTypeU256.read(from: &buf),
                maxPriorityFeePerGas: FfiConverterTypeU256.read(from: &buf),
                paymaster: FfiConverterOptionTypeAddress.read(from: &buf),
                paymasterVerificationGasLimit: FfiConverterOptionTypeU256.read(from: &buf),
                paymasterPostOpGasLimit: FfiConverterOptionTypeU256.read(from: &buf),
                paymasterData: FfiConverterOptionTypeBytes.read(from: &buf),
                signature: FfiConverterTypeBytes.read(from: &buf)
            )
    }

    public static func write(_ value: UserOperationV07, into buf: inout [UInt8]) {
        FfiConverterTypeAccountAddress.write(value.sender, into: &buf)
        FfiConverterTypeU256.write(value.nonce, into: &buf)
        FfiConverterOptionTypeAddress.write(value.factory, into: &buf)
        FfiConverterOptionTypeBytes.write(value.factoryData, into: &buf)
        FfiConverterTypeBytes.write(value.callData, into: &buf)
        FfiConverterTypeU256.write(value.callGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.verificationGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.preVerificationGas, into: &buf)
        FfiConverterTypeU256.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeU256.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterOptionTypeAddress.write(value.paymaster, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterVerificationGasLimit, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterPostOpGasLimit, into: &buf)
        FfiConverterOptionTypeBytes.write(value.paymasterData, into: &buf)
        FfiConverterTypeBytes.write(value.signature, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lift(_ buf: RustBuffer) throws -> UserOperationV07 {
    return try FfiConverterTypeUserOperationV07.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lower(_ value: UserOperationV07) -> RustBuffer {
    return FfiConverterTypeUserOperationV07.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BridgingError {
    case noRoutesAvailable
    case insufficientFunds
    case insufficientGasFunds
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeBridgingError: FfiConverterRustBuffer {
    typealias SwiftType = BridgingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BridgingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .noRoutesAvailable

        case 2: return .insufficientFunds

        case 3: return .insufficientGasFunds

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BridgingError, into buf: inout [UInt8]) {
        switch value {
        case .noRoutesAvailable:
            writeInt(&buf, Int32(1))

        case .insufficientFunds:
            writeInt(&buf, Int32(2))

        case .insufficientGasFunds:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBridgingError_lift(_ buf: RustBuffer) throws -> BridgingError {
    return try FfiConverterTypeBridgingError.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBridgingError_lower(_ value: BridgingError) -> RustBuffer {
    return FfiConverterTypeBridgingError.lower(value)
}

extension BridgingError: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Currency {
    case usd
    case eur
    case gbp
    case aud
    case cad
    case inr
    case jpy
    case btc
    case eth
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurrency: FfiConverterRustBuffer {
    typealias SwiftType = Currency

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Currency {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .usd

        case 2: return .eur

        case 3: return .gbp

        case 4: return .aud

        case 5: return .cad

        case 6: return .inr

        case 7: return .jpy

        case 8: return .btc

        case 9: return .eth

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Currency, into buf: inout [UInt8]) {
        switch value {
        case .usd:
            writeInt(&buf, Int32(1))

        case .eur:
            writeInt(&buf, Int32(2))

        case .gbp:
            writeInt(&buf, Int32(3))

        case .aud:
            writeInt(&buf, Int32(4))

        case .cad:
            writeInt(&buf, Int32(5))

        case .inr:
            writeInt(&buf, Int32(6))

        case .jpy:
            writeInt(&buf, Int32(7))

        case .btc:
            writeInt(&buf, Int32(8))

        case .eth:
            writeInt(&buf, Int32(9))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrency_lift(_ buf: RustBuffer) throws -> Currency {
    return try FfiConverterTypeCurrency.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrency_lower(_ value: Currency) -> RustBuffer {
    return FfiConverterTypeCurrency.lower(value)
}

extension Currency: Equatable, Hashable {}

public enum Erc6492Error {
    case RpcError(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Error: FfiConverterRustBuffer {
    typealias SwiftType = Erc6492Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .RpcError(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Erc6492Error, into buf: inout [UInt8]) {
        switch value {
        case let .RpcError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension Erc6492Error: Equatable, Hashable {}

extension Erc6492Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PrepareDetailedResponse {
    case success(PrepareDetailedResponseSuccess
    )
    case error(PrepareResponseError
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareDetailedResponse: FfiConverterRustBuffer {
    typealias SwiftType = PrepareDetailedResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareDetailedResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .success(FfiConverterTypePrepareDetailedResponseSuccess.read(from: &buf)
            )

        case 2: return try .error(FfiConverterTypePrepareResponseError.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PrepareDetailedResponse, into buf: inout [UInt8]) {
        switch value {
        case let .success(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypePrepareDetailedResponseSuccess.write(v1, into: &buf)

        case let .error(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypePrepareResponseError.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDetailedResponse_lift(_ buf: RustBuffer) throws -> PrepareDetailedResponse {
    return try FfiConverterTypePrepareDetailedResponse.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDetailedResponse_lower(_ value: PrepareDetailedResponse) -> RustBuffer {
    return FfiConverterTypePrepareDetailedResponse.lower(value)
}

extension PrepareDetailedResponse: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PrepareDetailedResponseSuccess {
    case available(UiFields
    )
    case notRequired(PrepareResponseNotRequired
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareDetailedResponseSuccess: FfiConverterRustBuffer {
    typealias SwiftType = PrepareDetailedResponseSuccess

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareDetailedResponseSuccess {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .available(FfiConverterTypeUiFields.read(from: &buf)
            )

        case 2: return try .notRequired(FfiConverterTypePrepareResponseNotRequired.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PrepareDetailedResponseSuccess, into buf: inout [UInt8]) {
        switch value {
        case let .available(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeUiFields.write(v1, into: &buf)

        case let .notRequired(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypePrepareResponseNotRequired.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDetailedResponseSuccess_lift(_ buf: RustBuffer) throws -> PrepareDetailedResponseSuccess {
    return try FfiConverterTypePrepareDetailedResponseSuccess.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareDetailedResponseSuccess_lower(_ value: PrepareDetailedResponseSuccess) -> RustBuffer {
    return FfiConverterTypePrepareDetailedResponseSuccess.lower(value)
}

extension PrepareDetailedResponseSuccess: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PrepareResponse {
    case success(PrepareResponseSuccess
    )
    case error(PrepareResponseError
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareResponse: FfiConverterRustBuffer {
    typealias SwiftType = PrepareResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .success(FfiConverterTypePrepareResponseSuccess.read(from: &buf)
            )

        case 2: return try .error(FfiConverterTypePrepareResponseError.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PrepareResponse, into buf: inout [UInt8]) {
        switch value {
        case let .success(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypePrepareResponseSuccess.write(v1, into: &buf)

        case let .error(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypePrepareResponseError.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponse_lift(_ buf: RustBuffer) throws -> PrepareResponse {
    return try FfiConverterTypePrepareResponse.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponse_lower(_ value: PrepareResponse) -> RustBuffer {
    return FfiConverterTypePrepareResponse.lower(value)
}

extension PrepareResponse: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PrepareResponseSuccess {
    case available(PrepareResponseAvailable
    )
    case notRequired(PrepareResponseNotRequired
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareResponseSuccess: FfiConverterRustBuffer {
    typealias SwiftType = PrepareResponseSuccess

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareResponseSuccess {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .available(FfiConverterTypePrepareResponseAvailable.read(from: &buf)
            )

        case 2: return try .notRequired(FfiConverterTypePrepareResponseNotRequired.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PrepareResponseSuccess, into buf: inout [UInt8]) {
        switch value {
        case let .available(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypePrepareResponseAvailable.write(v1, into: &buf)

        case let .notRequired(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypePrepareResponseNotRequired.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseSuccess_lift(_ buf: RustBuffer) throws -> PrepareResponseSuccess {
    return try FfiConverterTypePrepareResponseSuccess.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareResponseSuccess_lower(_ value: PrepareResponseSuccess) -> RustBuffer {
    return FfiConverterTypePrepareResponseSuccess.lower(value)
}

extension PrepareResponseSuccess: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PreparedGasAbstraction {
    case deploymentRequired(auth: PreparedGasAbstractionAuthorization, prepareDeployParams: PrepareDeployParams)
    case deploymentNotRequired(preparedSend: PreparedSend
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedGasAbstraction: FfiConverterRustBuffer {
    typealias SwiftType = PreparedGasAbstraction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedGasAbstraction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .deploymentRequired(auth: FfiConverterTypePreparedGasAbstractionAuthorization.read(from: &buf), prepareDeployParams: FfiConverterTypePrepareDeployParams.read(from: &buf))

        case 2: return try .deploymentNotRequired(preparedSend: FfiConverterTypePreparedSend.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PreparedGasAbstraction, into buf: inout [UInt8]) {
        switch value {
        case let .deploymentRequired(auth, prepareDeployParams):
            writeInt(&buf, Int32(1))
            FfiConverterTypePreparedGasAbstractionAuthorization.write(auth, into: &buf)
            FfiConverterTypePrepareDeployParams.write(prepareDeployParams, into: &buf)

        case let .deploymentNotRequired(preparedSend):
            writeInt(&buf, Int32(2))
            FfiConverterTypePreparedSend.write(preparedSend, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedGasAbstraction_lift(_ buf: RustBuffer) throws -> PreparedGasAbstraction {
    return try FfiConverterTypePreparedGasAbstraction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedGasAbstraction_lower(_ value: PreparedGasAbstraction) -> RustBuffer {
    return FfiConverterTypePreparedGasAbstraction.lower(value)
}

extension PreparedGasAbstraction: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SignOutputEnum {
    case signature(Bytes
    )
    case signOutput(SignOutput
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputEnum: FfiConverterRustBuffer {
    typealias SwiftType = SignOutputEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .signature(FfiConverterTypeBytes.read(from: &buf)
            )

        case 2: return try .signOutput(FfiConverterTypeSignOutput.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignOutputEnum, into buf: inout [UInt8]) {
        switch value {
        case let .signature(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeBytes.write(v1, into: &buf)

        case let .signOutput(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeSignOutput.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lift(_ buf: RustBuffer) throws -> SignOutputEnum {
    return try FfiConverterTypeSignOutputEnum.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lower(_ value: SignOutputEnum) -> RustBuffer {
    return FfiConverterTypeSignOutputEnum.lower(value)
}

extension SignOutputEnum: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum StatusResponse {
    case pending(StatusResponsePending
    )
    case completed(StatusResponseCompleted
    )
    case error(StatusResponseError
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponse: FfiConverterRustBuffer {
    typealias SwiftType = StatusResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .pending(FfiConverterTypeStatusResponsePending.read(from: &buf)
            )

        case 2: return try .completed(FfiConverterTypeStatusResponseCompleted.read(from: &buf)
            )

        case 3: return try .error(FfiConverterTypeStatusResponseError.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StatusResponse, into buf: inout [UInt8]) {
        switch value {
        case let .pending(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStatusResponsePending.write(v1, into: &buf)

        case let .completed(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeStatusResponseCompleted.write(v1, into: &buf)

        case let .error(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeStatusResponseError.write(v1, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponse_lift(_ buf: RustBuffer) throws -> StatusResponse {
    return try FfiConverterTypeStatusResponse.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponse_lower(_ value: StatusResponse) -> RustBuffer {
    return FfiConverterTypeStatusResponse.lower(value)
}

extension StatusResponse: Equatable, Hashable {}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeBytes: FfiConverterRustBuffer {
    typealias SwiftType = Bytes?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBytes.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBytes.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeU256: FfiConverterRustBuffer {
    typealias SwiftType = U256?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeU256.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeU256.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeFundingMetadata: FfiConverterRustBuffer {
    typealias SwiftType = [FundingMetadata]

    public static func write(_ value: [FundingMetadata], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFundingMetadata.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FundingMetadata] {
        let len: Int32 = try readInt(&buf)
        var seq = [FundingMetadata]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeFundingMetadata.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [Transaction]

    public static func write(_ value: [Transaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Transaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [Transaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTransaction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeTransactionFee: FfiConverterRustBuffer {
    typealias SwiftType = [TransactionFee]

    public static func write(_ value: [TransactionFee], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransactionFee.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TransactionFee] {
        let len: Int32 = try readInt(&buf)
        var seq = [TransactionFee]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTransactionFee.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeTransactionLog: FfiConverterRustBuffer {
    typealias SwiftType = [TransactionLog]

    public static func write(_ value: [TransactionLog], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransactionLog.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TransactionLog] {
        let len: Int32 = try readInt(&buf)
        var seq = [TransactionLog]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTransactionLog.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeTxnDetails: FfiConverterRustBuffer {
    typealias SwiftType = [TxnDetails]

    public static func write(_ value: [TxnDetails], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTxnDetails.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TxnDetails] {
        let len: Int32 = try readInt(&buf)
        var seq = [TxnDetails]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTxnDetails.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeB256: FfiConverterRustBuffer {
    typealias SwiftType = [B256]

    public static func write(_ value: [B256], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeB256.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [B256] {
        let len: Int32 = try readInt(&buf)
        var seq = [B256]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeB256.read(from: &buf))
        }
        return seq
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AccountAddress = Address

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountAddress {
        return try FfiConverterTypeAddress.read(from: &buf)
    }

    public static func write(_ value: AccountAddress, into buf: inout [UInt8]) {
        return FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AccountAddress {
        return try FfiConverterTypeAddress.lift(value)
    }

    public static func lower(_ value: AccountAddress) -> RustBuffer {
        return FfiConverterTypeAddress.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lift(_ value: RustBuffer) throws -> AccountAddress {
    return try FfiConverterTypeAccountAddress.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lower(_ value: AccountAddress) -> RustBuffer {
    return FfiConverterTypeAccountAddress.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ value: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Authorization = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthorization: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Authorization {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Authorization, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Authorization {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Authorization) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lift(_ value: RustBuffer) throws -> Authorization {
    return try FfiConverterTypeAuthorization.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lower(_ value: Authorization) -> RustBuffer {
    return FfiConverterTypeAuthorization.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias B256 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeB256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> B256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: B256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> B256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: B256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lift(_ value: RustBuffer) throws -> B256 {
    return try FfiConverterTypeB256.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lower(_ value: B256) -> RustBuffer {
    return FfiConverterTypeB256.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Bytes = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeBytes: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bytes {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Bytes, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Bytes {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Bytes) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lift(_ value: RustBuffer) throws -> Bytes {
    return try FfiConverterTypeBytes.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lower(_ value: Bytes) -> RustBuffer {
    return FfiConverterTypeBytes.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Eip712Domain = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEip712Domain: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip712Domain {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Eip712Domain, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Eip712Domain {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Eip712Domain) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lift(_ value: RustBuffer) throws -> Eip712Domain {
    return try FfiConverterTypeEip712Domain.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lower(_ value: Eip712Domain) -> RustBuffer {
    return FfiConverterTypeEip712Domain.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrimitiveSignature = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrimitiveSignature: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrimitiveSignature {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrimitiveSignature, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrimitiveSignature {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrimitiveSignature) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lift(_ value: RustBuffer) throws -> PrimitiveSignature {
    return try FfiConverterTypePrimitiveSignature.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lower(_ value: PrimitiveSignature) -> RustBuffer {
    return FfiConverterTypePrimitiveSignature.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ProjectId = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeProjectId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProjectId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ProjectId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ProjectId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ProjectId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lift(_ value: RustBuffer) throws -> ProjectId {
    return try FfiConverterTypeProjectId.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lower(_ value: ProjectId) -> RustBuffer {
    return FfiConverterTypeProjectId.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SafeOp = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSafeOp: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SafeOp {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SafeOp, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SafeOp {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SafeOp) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lift(_ value: RustBuffer) throws -> SafeOp {
    return try FfiConverterTypeSafeOp.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lower(_ value: SafeOp) -> RustBuffer {
    return FfiConverterTypeSafeOp.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U128 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeU128: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U128 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U128, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U128 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U128) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lift(_ value: RustBuffer) throws -> U128 {
    return try FfiConverterTypeU128.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lower(_ value: U128) -> RustBuffer {
    return FfiConverterTypeU128.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U256 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeU256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lift(_ value: RustBuffer) throws -> U256 {
    return try FfiConverterTypeU256.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lower(_ value: U256) -> RustBuffer {
    return FfiConverterTypeU256.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U48 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeU48: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U48 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U48, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U48 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U48) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lift(_ value: RustBuffer) throws -> U48 {
    return try FfiConverterTypeU48.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lower(_ value: U48) -> RustBuffer {
    return FfiConverterTypeU48.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U64 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeU64: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U64 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U64, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U64 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U64) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lift(_ value: RustBuffer) throws -> U64 {
    return try FfiConverterTypeU64.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lower(_ value: U64) -> RustBuffer {
    return FfiConverterTypeU64.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U8 = String

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeU8: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U8 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U8, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U8 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U8) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lift(_ value: RustBuffer) throws -> U8 {
    return try FfiConverterTypeU8.lift(value)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lower(_ value: U8) -> RustBuffer {
    return FfiConverterTypeU8.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> Void,
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

public func fundingMetadataToAmount(value: FundingMetadata) -> Amount {
    return try! FfiConverterTypeAmount.lift(try! rustCall {
        uniffi_yttrium_fn_func_funding_metadata_to_amount(
            FfiConverterTypeFundingMetadata.lower(value), $0
        )
    })
}

public func fundingMetadataToBridgingFeeAmount(value: FundingMetadata) -> Amount {
    return try! FfiConverterTypeAmount.lift(try! rustCall {
        uniffi_yttrium_fn_func_funding_metadata_to_bridging_fee_amount(
            FfiConverterTypeFundingMetadata.lower(value), $0
        )
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_yttrium_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_yttrium_checksum_func_funding_metadata_to_amount() != 52092 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_func_funding_metadata_to_bridging_fee_amount() != 38273 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_method_client_create_sponsored_user_op() != 36285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_method_client_prepare() != 48673 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_method_client_prepare_deploy() != 29256 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_method_client_send() != 27936 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_method_erc6492client_verify_signature() != 43990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_constructor_client_new() != 2503 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_yttrium_checksum_constructor_erc6492client_new() != 33633 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
