// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(yttriumFFI)
import yttriumFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_yttrium_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_yttrium_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureYttriumInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol Erc6492ClientProtocol: AnyObject {
    
    func verifySignature(signature: Bytes, address: Address, messageHash: B256) async throws  -> Bool
    
}
open class Erc6492Client: Erc6492ClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_erc6492client(self.pointer, $0) }
    }
public convenience init(rpcUrl: String) {
    let pointer =
        try! rustCall() {
    uniffi_yttrium_fn_constructor_erc6492client_new(
        FfiConverterString.lower(rpcUrl),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_erc6492client(pointer, $0) }
    }

    

    
open func verifySignature(signature: Bytes, address: Address, messageHash: B256)async throws  -> Bool  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_erc6492client_verify_signature(
                    self.uniffiClonePointer(),
                    FfiConverterTypeBytes_lower(signature),FfiConverterTypeAddress_lower(address),FfiConverterTypeB256_lower(messageHash)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_i8,
            completeFunc: ffi_yttrium_rust_future_complete_i8,
            freeFunc: ffi_yttrium_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: FfiConverterTypeErc6492Error.lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Client: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc6492Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
        return Erc6492Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc6492Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
    return try FfiConverterTypeErc6492Client.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc6492Client.lower(value)
}




public struct Call {
    public var to: Address
    public var value: U256
    public var input: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: Address, value: U256, input: Bytes) {
        self.to = to
        self.value = value
        self.input = input
    }
}

#if compiler(>=6)
extension Call: Sendable {}
#endif


extension Call: Equatable, Hashable {
    public static func ==(lhs: Call, rhs: Call) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(input)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCall: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Call {
        return
            try Call(
                to: FfiConverterTypeAddress.read(from: &buf), 
                value: FfiConverterTypeU256.read(from: &buf), 
                input: FfiConverterTypeBytes.read(from: &buf)
        )
    }

    public static func write(_ value: Call, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.input, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lift(_ buf: RustBuffer) throws -> Call {
    return try FfiConverterTypeCall.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lower(_ value: Call) -> RustBuffer {
    return FfiConverterTypeCall.lower(value)
}


public struct Config {
    public var endpoints: Endpoints

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoints: Endpoints) {
        self.endpoints = endpoints
    }
}

#if compiler(>=6)
extension Config: Sendable {}
#endif


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.endpoints != rhs.endpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoints)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                endpoints: FfiConverterTypeEndpoints.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoints.write(value.endpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct DoSendTransactionParams {
    public var userOp: UserOperationV07
    public var validAfter: U48
    public var validUntil: U48

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userOp: UserOperationV07, validAfter: U48, validUntil: U48) {
        self.userOp = userOp
        self.validAfter = validAfter
        self.validUntil = validUntil
    }
}

#if compiler(>=6)
extension DoSendTransactionParams: Sendable {}
#endif


extension DoSendTransactionParams: Equatable, Hashable {
    public static func ==(lhs: DoSendTransactionParams, rhs: DoSendTransactionParams) -> Bool {
        if lhs.userOp != rhs.userOp {
            return false
        }
        if lhs.validAfter != rhs.validAfter {
            return false
        }
        if lhs.validUntil != rhs.validUntil {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userOp)
        hasher.combine(validAfter)
        hasher.combine(validUntil)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDoSendTransactionParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DoSendTransactionParams {
        return
            try DoSendTransactionParams(
                userOp: FfiConverterTypeUserOperationV07.read(from: &buf), 
                validAfter: FfiConverterTypeU48.read(from: &buf), 
                validUntil: FfiConverterTypeU48.read(from: &buf)
        )
    }

    public static func write(_ value: DoSendTransactionParams, into buf: inout [UInt8]) {
        FfiConverterTypeUserOperationV07.write(value.userOp, into: &buf)
        FfiConverterTypeU48.write(value.validAfter, into: &buf)
        FfiConverterTypeU48.write(value.validUntil, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lift(_ buf: RustBuffer) throws -> DoSendTransactionParams {
    return try FfiConverterTypeDoSendTransactionParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lower(_ value: DoSendTransactionParams) -> RustBuffer {
    return FfiConverterTypeDoSendTransactionParams.lower(value)
}


public struct Endpoint {
    public var baseUrl: String
    public var apiKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(baseUrl: String, apiKey: String) {
        self.baseUrl = baseUrl
        self.apiKey = apiKey
    }
}

#if compiler(>=6)
extension Endpoint: Sendable {}
#endif


extension Endpoint: Equatable, Hashable {
    public static func ==(lhs: Endpoint, rhs: Endpoint) -> Bool {
        if lhs.baseUrl != rhs.baseUrl {
            return false
        }
        if lhs.apiKey != rhs.apiKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseUrl)
        hasher.combine(apiKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoint {
        return
            try Endpoint(
                baseUrl: FfiConverterString.read(from: &buf), 
                apiKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.baseUrl, into: &buf)
        FfiConverterString.write(value.apiKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lift(_ buf: RustBuffer) throws -> Endpoint {
    return try FfiConverterTypeEndpoint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lower(_ value: Endpoint) -> RustBuffer {
    return FfiConverterTypeEndpoint.lower(value)
}


public struct Endpoints {
    public var rpc: Endpoint
    public var bundler: Endpoint
    public var paymaster: Endpoint

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpc: Endpoint, bundler: Endpoint, paymaster: Endpoint) {
        self.rpc = rpc
        self.bundler = bundler
        self.paymaster = paymaster
    }
}

#if compiler(>=6)
extension Endpoints: Sendable {}
#endif


extension Endpoints: Equatable, Hashable {
    public static func ==(lhs: Endpoints, rhs: Endpoints) -> Bool {
        if lhs.rpc != rhs.rpc {
            return false
        }
        if lhs.bundler != rhs.bundler {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpc)
        hasher.combine(bundler)
        hasher.combine(paymaster)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoints: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoints {
        return
            try Endpoints(
                rpc: FfiConverterTypeEndpoint.read(from: &buf), 
                bundler: FfiConverterTypeEndpoint.read(from: &buf), 
                paymaster: FfiConverterTypeEndpoint.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoints, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoint.write(value.rpc, into: &buf)
        FfiConverterTypeEndpoint.write(value.bundler, into: &buf)
        FfiConverterTypeEndpoint.write(value.paymaster, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lift(_ buf: RustBuffer) throws -> Endpoints {
    return try FfiConverterTypeEndpoints.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lower(_ value: Endpoints) -> RustBuffer {
    return FfiConverterTypeEndpoints.lower(value)
}


public struct Erc20Metadata {
    public var name: String
    public var symbol: String
    public var decimals: UInt8
    public var value: Double?
    public var price: Double
    public var iconUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String, decimals: UInt8, value: Double?, price: Double, iconUrl: String) {
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.value = value
        self.price = price
        self.iconUrl = iconUrl
    }
}

#if compiler(>=6)
extension Erc20Metadata: Sendable {}
#endif


extension Erc20Metadata: Equatable, Hashable {
    public static func ==(lhs: Erc20Metadata, rhs: Erc20Metadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.iconUrl != rhs.iconUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(decimals)
        hasher.combine(value)
        hasher.combine(price)
        hasher.combine(iconUrl)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc20Metadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc20Metadata {
        return
            try Erc20Metadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                decimals: FfiConverterUInt8.read(from: &buf), 
                value: FfiConverterOptionDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                iconUrl: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Erc20Metadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
        FfiConverterOptionDouble.write(value.value, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterString.write(value.iconUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc20Metadata_lift(_ buf: RustBuffer) throws -> Erc20Metadata {
    return try FfiConverterTypeErc20Metadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc20Metadata_lower(_ value: Erc20Metadata) -> RustBuffer {
    return FfiConverterTypeErc20Metadata.lower(value)
}


public struct Erc721Metadata {
    public var name: String
    public var symbol: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String) {
        self.name = name
        self.symbol = symbol
    }
}

#if compiler(>=6)
extension Erc721Metadata: Sendable {}
#endif


extension Erc721Metadata: Equatable, Hashable {
    public static func ==(lhs: Erc721Metadata, rhs: Erc721Metadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc721Metadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc721Metadata {
        return
            try Erc721Metadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Erc721Metadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc721Metadata_lift(_ buf: RustBuffer) throws -> Erc721Metadata {
    return try FfiConverterTypeErc721Metadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc721Metadata_lower(_ value: Erc721Metadata) -> RustBuffer {
    return FfiConverterTypeErc721Metadata.lower(value)
}


public struct FfiAuthorization {
    /**
     * The chain ID of the authorization.
     */
    public var chainId: U256
    /**
     * The address of the authorization.
     */
    public var address: Address
    /**
     * The nonce for the authorization.
     */
    public var nonce: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The chain ID of the authorization.
         */chainId: U256, 
        /**
         * The address of the authorization.
         */address: Address, 
        /**
         * The nonce for the authorization.
         */nonce: UInt64) {
        self.chainId = chainId
        self.address = address
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension FfiAuthorization: Sendable {}
#endif


extension FfiAuthorization: Equatable, Hashable {
    public static func ==(lhs: FfiAuthorization, rhs: FfiAuthorization) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(address)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiAuthorization: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAuthorization {
        return
            try FfiAuthorization(
                chainId: FfiConverterTypeU256.read(from: &buf), 
                address: FfiConverterTypeAddress.read(from: &buf), 
                nonce: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FfiAuthorization, into buf: inout [UInt8]) {
        FfiConverterTypeU256.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAuthorization_lift(_ buf: RustBuffer) throws -> FfiAuthorization {
    return try FfiConverterTypeFfiAuthorization.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAuthorization_lower(_ value: FfiAuthorization) -> RustBuffer {
    return FfiConverterTypeFfiAuthorization.lower(value)
}


public struct GetAssetsFilters {
    public var assetFilter: [U64: [AddressOrNative]]?
    public var assetTypeFilter: [AssetType]?
    public var chainFilter: [U64]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(assetFilter: [U64: [AddressOrNative]]?, assetTypeFilter: [AssetType]?, chainFilter: [U64]?) {
        self.assetFilter = assetFilter
        self.assetTypeFilter = assetTypeFilter
        self.chainFilter = chainFilter
    }
}

#if compiler(>=6)
extension GetAssetsFilters: Sendable {}
#endif


extension GetAssetsFilters: Equatable, Hashable {
    public static func ==(lhs: GetAssetsFilters, rhs: GetAssetsFilters) -> Bool {
        if lhs.assetFilter != rhs.assetFilter {
            return false
        }
        if lhs.assetTypeFilter != rhs.assetTypeFilter {
            return false
        }
        if lhs.chainFilter != rhs.chainFilter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assetFilter)
        hasher.combine(assetTypeFilter)
        hasher.combine(chainFilter)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetAssetsFilters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssetsFilters {
        return
            try GetAssetsFilters(
                assetFilter: FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative.read(from: &buf), 
                assetTypeFilter: FfiConverterOptionSequenceTypeAssetType.read(from: &buf), 
                chainFilter: FfiConverterOptionSequenceTypeU64.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssetsFilters, into buf: inout [UInt8]) {
        FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative.write(value.assetFilter, into: &buf)
        FfiConverterOptionSequenceTypeAssetType.write(value.assetTypeFilter, into: &buf)
        FfiConverterOptionSequenceTypeU64.write(value.chainFilter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsFilters_lift(_ buf: RustBuffer) throws -> GetAssetsFilters {
    return try FfiConverterTypeGetAssetsFilters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsFilters_lower(_ value: GetAssetsFilters) -> RustBuffer {
    return FfiConverterTypeGetAssetsFilters.lower(value)
}


public struct GetAssetsParams {
    public var account: Address
    public var filters: GetAssetsFilters

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(account: Address, filters: GetAssetsFilters) {
        self.account = account
        self.filters = filters
    }
}

#if compiler(>=6)
extension GetAssetsParams: Sendable {}
#endif


extension GetAssetsParams: Equatable, Hashable {
    public static func ==(lhs: GetAssetsParams, rhs: GetAssetsParams) -> Bool {
        if lhs.account != rhs.account {
            return false
        }
        if lhs.filters != rhs.filters {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(account)
        hasher.combine(filters)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetAssetsParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssetsParams {
        return
            try GetAssetsParams(
                account: FfiConverterTypeAddress.read(from: &buf), 
                filters: FfiConverterTypeGetAssetsFilters.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssetsParams, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.account, into: &buf)
        FfiConverterTypeGetAssetsFilters.write(value.filters, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsParams_lift(_ buf: RustBuffer) throws -> GetAssetsParams {
    return try FfiConverterTypeGetAssetsParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsParams_lower(_ value: GetAssetsParams) -> RustBuffer {
    return FfiConverterTypeGetAssetsParams.lower(value)
}


public struct NativeMetadata {
    public var name: String
    public var symbol: String
    public var decimals: UInt8
    public var value: Double?
    public var price: Double
    public var iconUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String, decimals: UInt8, value: Double?, price: Double, iconUrl: String) {
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.value = value
        self.price = price
        self.iconUrl = iconUrl
    }
}

#if compiler(>=6)
extension NativeMetadata: Sendable {}
#endif


extension NativeMetadata: Equatable, Hashable {
    public static func ==(lhs: NativeMetadata, rhs: NativeMetadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.iconUrl != rhs.iconUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(decimals)
        hasher.combine(value)
        hasher.combine(price)
        hasher.combine(iconUrl)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNativeMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NativeMetadata {
        return
            try NativeMetadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                decimals: FfiConverterUInt8.read(from: &buf), 
                value: FfiConverterOptionDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                iconUrl: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: NativeMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
        FfiConverterOptionDouble.write(value.value, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterString.write(value.iconUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNativeMetadata_lift(_ buf: RustBuffer) throws -> NativeMetadata {
    return try FfiConverterTypeNativeMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNativeMetadata_lower(_ value: NativeMetadata) -> RustBuffer {
    return FfiConverterTypeNativeMetadata.lower(value)
}


public struct OwnerSignature {
    public var owner: Address
    public var signature: PrimitiveSignature

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(owner: Address, signature: PrimitiveSignature) {
        self.owner = owner
        self.signature = signature
    }
}

#if compiler(>=6)
extension OwnerSignature: Sendable {}
#endif


extension OwnerSignature: Equatable, Hashable {
    public static func ==(lhs: OwnerSignature, rhs: OwnerSignature) -> Bool {
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(owner)
        hasher.combine(signature)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOwnerSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OwnerSignature {
        return
            try OwnerSignature(
                owner: FfiConverterTypeAddress.read(from: &buf), 
                signature: FfiConverterTypePrimitiveSignature.read(from: &buf)
        )
    }

    public static func write(_ value: OwnerSignature, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.owner, into: &buf)
        FfiConverterTypePrimitiveSignature.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lift(_ buf: RustBuffer) throws -> OwnerSignature {
    return try FfiConverterTypeOwnerSignature.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lower(_ value: OwnerSignature) -> RustBuffer {
    return FfiConverterTypeOwnerSignature.lower(value)
}


public struct PreparedSendTransaction {
    public var safeOp: SafeOp
    public var domain: Eip712Domain
    public var hash: B256
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(safeOp: SafeOp, domain: Eip712Domain, hash: B256, doSendTransactionParams: DoSendTransactionParams) {
        self.safeOp = safeOp
        self.domain = domain
        self.hash = hash
        self.doSendTransactionParams = doSendTransactionParams
    }
}

#if compiler(>=6)
extension PreparedSendTransaction: Sendable {}
#endif


extension PreparedSendTransaction: Equatable, Hashable {
    public static func ==(lhs: PreparedSendTransaction, rhs: PreparedSendTransaction) -> Bool {
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(safeOp)
        hasher.combine(domain)
        hasher.combine(hash)
        hasher.combine(doSendTransactionParams)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSendTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSendTransaction {
        return
            try PreparedSendTransaction(
                safeOp: FfiConverterTypeSafeOp.read(from: &buf), 
                domain: FfiConverterTypeEip712Domain.read(from: &buf), 
                hash: FfiConverterTypeB256.read(from: &buf), 
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
        )
    }

    public static func write(_ value: PreparedSendTransaction, into buf: inout [UInt8]) {
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lift(_ buf: RustBuffer) throws -> PreparedSendTransaction {
    return try FfiConverterTypePreparedSendTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lower(_ value: PreparedSendTransaction) -> RustBuffer {
    return FfiConverterTypePreparedSendTransaction.lower(value)
}


/**
 * ```solidity
 * struct SafeOp { address safe; uint256 nonce; bytes initCode; bytes callData; uint128 verificationGasLimit; uint128 callGasLimit; uint256 preVerificationGas; uint128 maxPriorityFeePerGas; uint128 maxFeePerGas; bytes paymasterAndData; uint48 validAfter; uint48 validUntil; address entryPoint; }
 * ```
 */
public struct SafeOp {
    public var safe: Address
    public var nonce: U256
    public var initCode: Bytes
    public var callData: Bytes
    public var verificationGasLimit: U128Primitive
    public var callGasLimit: U128Primitive
    public var preVerificationGas: U256
    public var maxPriorityFeePerGas: U128Primitive
    public var maxFeePerGas: U128Primitive
    public var paymasterAndData: Bytes
    public var validAfter: U48
    public var validUntil: U48
    public var entryPoint: Address

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(safe: Address, nonce: U256, initCode: Bytes, callData: Bytes, verificationGasLimit: U128Primitive, callGasLimit: U128Primitive, preVerificationGas: U256, maxPriorityFeePerGas: U128Primitive, maxFeePerGas: U128Primitive, paymasterAndData: Bytes, validAfter: U48, validUntil: U48, entryPoint: Address) {
        self.safe = safe
        self.nonce = nonce
        self.initCode = initCode
        self.callData = callData
        self.verificationGasLimit = verificationGasLimit
        self.callGasLimit = callGasLimit
        self.preVerificationGas = preVerificationGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.maxFeePerGas = maxFeePerGas
        self.paymasterAndData = paymasterAndData
        self.validAfter = validAfter
        self.validUntil = validUntil
        self.entryPoint = entryPoint
    }
}

#if compiler(>=6)
extension SafeOp: Sendable {}
#endif


extension SafeOp: Equatable, Hashable {
    public static func ==(lhs: SafeOp, rhs: SafeOp) -> Bool {
        if lhs.safe != rhs.safe {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.initCode != rhs.initCode {
            return false
        }
        if lhs.callData != rhs.callData {
            return false
        }
        if lhs.verificationGasLimit != rhs.verificationGasLimit {
            return false
        }
        if lhs.callGasLimit != rhs.callGasLimit {
            return false
        }
        if lhs.preVerificationGas != rhs.preVerificationGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.paymasterAndData != rhs.paymasterAndData {
            return false
        }
        if lhs.validAfter != rhs.validAfter {
            return false
        }
        if lhs.validUntil != rhs.validUntil {
            return false
        }
        if lhs.entryPoint != rhs.entryPoint {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(safe)
        hasher.combine(nonce)
        hasher.combine(initCode)
        hasher.combine(callData)
        hasher.combine(verificationGasLimit)
        hasher.combine(callGasLimit)
        hasher.combine(preVerificationGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(maxFeePerGas)
        hasher.combine(paymasterAndData)
        hasher.combine(validAfter)
        hasher.combine(validUntil)
        hasher.combine(entryPoint)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSafeOp: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SafeOp {
        return
            try SafeOp(
                safe: FfiConverterTypeAddress.read(from: &buf), 
                nonce: FfiConverterTypeU256.read(from: &buf), 
                initCode: FfiConverterTypeBytes.read(from: &buf), 
                callData: FfiConverterTypeBytes.read(from: &buf), 
                verificationGasLimit: FfiConverterTypeU128Primitive.read(from: &buf), 
                callGasLimit: FfiConverterTypeU128Primitive.read(from: &buf), 
                preVerificationGas: FfiConverterTypeU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeU128Primitive.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeU128Primitive.read(from: &buf), 
                paymasterAndData: FfiConverterTypeBytes.read(from: &buf), 
                validAfter: FfiConverterTypeU48.read(from: &buf), 
                validUntil: FfiConverterTypeU48.read(from: &buf), 
                entryPoint: FfiConverterTypeAddress.read(from: &buf)
        )
    }

    public static func write(_ value: SafeOp, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.safe, into: &buf)
        FfiConverterTypeU256.write(value.nonce, into: &buf)
        FfiConverterTypeBytes.write(value.initCode, into: &buf)
        FfiConverterTypeBytes.write(value.callData, into: &buf)
        FfiConverterTypeU128Primitive.write(value.verificationGasLimit, into: &buf)
        FfiConverterTypeU128Primitive.write(value.callGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.preVerificationGas, into: &buf)
        FfiConverterTypeU128Primitive.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterTypeU128Primitive.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeBytes.write(value.paymasterAndData, into: &buf)
        FfiConverterTypeU48.write(value.validAfter, into: &buf)
        FfiConverterTypeU48.write(value.validUntil, into: &buf)
        FfiConverterTypeAddress.write(value.entryPoint, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lift(_ buf: RustBuffer) throws -> SafeOp {
    return try FfiConverterTypeSafeOp.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lower(_ value: SafeOp) -> RustBuffer {
    return FfiConverterTypeSafeOp.lower(value)
}


public struct SignOutputObject {
    public var toSign: SignOutputToSign
    public var signStep3Params: SignStep3Params

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(toSign: SignOutputToSign, signStep3Params: SignStep3Params) {
        self.toSign = toSign
        self.signStep3Params = signStep3Params
    }
}

#if compiler(>=6)
extension SignOutputObject: Sendable {}
#endif


extension SignOutputObject: Equatable, Hashable {
    public static func ==(lhs: SignOutputObject, rhs: SignOutputObject) -> Bool {
        if lhs.toSign != rhs.toSign {
            return false
        }
        if lhs.signStep3Params != rhs.signStep3Params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(toSign)
        hasher.combine(signStep3Params)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputObject: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputObject {
        return
            try SignOutputObject(
                toSign: FfiConverterTypeSignOutputToSign.read(from: &buf), 
                signStep3Params: FfiConverterTypeSignStep3Params.read(from: &buf)
        )
    }

    public static func write(_ value: SignOutputObject, into buf: inout [UInt8]) {
        FfiConverterTypeSignOutputToSign.write(value.toSign, into: &buf)
        FfiConverterTypeSignStep3Params.write(value.signStep3Params, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputObject_lift(_ buf: RustBuffer) throws -> SignOutputObject {
    return try FfiConverterTypeSignOutputObject.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputObject_lower(_ value: SignOutputObject) -> RustBuffer {
    return FfiConverterTypeSignOutputObject.lower(value)
}


public struct SignOutputToSign {
    public var hash: B256
    public var safeOp: SafeOp
    public var domain: Eip712Domain

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: B256, safeOp: SafeOp, domain: Eip712Domain) {
        self.hash = hash
        self.safeOp = safeOp
        self.domain = domain
    }
}

#if compiler(>=6)
extension SignOutputToSign: Sendable {}
#endif


extension SignOutputToSign: Equatable, Hashable {
    public static func ==(lhs: SignOutputToSign, rhs: SignOutputToSign) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(safeOp)
        hasher.combine(domain)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputToSign: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputToSign {
        return
            try SignOutputToSign(
                hash: FfiConverterTypeB256.read(from: &buf), 
                safeOp: FfiConverterTypeSafeOp.read(from: &buf), 
                domain: FfiConverterTypeEip712Domain.read(from: &buf)
        )
    }

    public static func write(_ value: SignOutputToSign, into buf: inout [UInt8]) {
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lift(_ buf: RustBuffer) throws -> SignOutputToSign {
    return try FfiConverterTypeSignOutputToSign.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lower(_ value: SignOutputToSign) -> RustBuffer {
    return FfiConverterTypeSignOutputToSign.lower(value)
}


public struct SignStep3Params {
    public var signature: Bytes
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(signature: Bytes, doSendTransactionParams: DoSendTransactionParams) {
        self.signature = signature
        self.doSendTransactionParams = doSendTransactionParams
    }
}

#if compiler(>=6)
extension SignStep3Params: Sendable {}
#endif


extension SignStep3Params: Equatable, Hashable {
    public static func ==(lhs: SignStep3Params, rhs: SignStep3Params) -> Bool {
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signature)
        hasher.combine(doSendTransactionParams)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignStep3Params: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignStep3Params {
        return
            try SignStep3Params(
                signature: FfiConverterTypeBytes.read(from: &buf), 
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
        )
    }

    public static func write(_ value: SignStep3Params, into buf: inout [UInt8]) {
        FfiConverterTypeBytes.write(value.signature, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lift(_ buf: RustBuffer) throws -> SignStep3Params {
    return try FfiConverterTypeSignStep3Params.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lower(_ value: SignStep3Params) -> RustBuffer {
    return FfiConverterTypeSignStep3Params.lower(value)
}


public struct UserOperationV07 {
    public var sender: AccountAddress
    public var nonce: U256
    public var factory: Address?
    public var factoryData: Bytes?
    public var callData: Bytes
    public var callGasLimit: U256
    public var verificationGasLimit: U256
    public var preVerificationGas: U256
    public var maxFeePerGas: U256
    public var maxPriorityFeePerGas: U256
    public var paymaster: Address?
    public var paymasterVerificationGasLimit: U256?
    public var paymasterPostOpGasLimit: U256?
    public var paymasterData: Bytes?
    public var signature: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sender: AccountAddress, nonce: U256, factory: Address?, factoryData: Bytes?, callData: Bytes, callGasLimit: U256, verificationGasLimit: U256, preVerificationGas: U256, maxFeePerGas: U256, maxPriorityFeePerGas: U256, paymaster: Address?, paymasterVerificationGasLimit: U256?, paymasterPostOpGasLimit: U256?, paymasterData: Bytes?, signature: Bytes) {
        self.sender = sender
        self.nonce = nonce
        self.factory = factory
        self.factoryData = factoryData
        self.callData = callData
        self.callGasLimit = callGasLimit
        self.verificationGasLimit = verificationGasLimit
        self.preVerificationGas = preVerificationGas
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.paymaster = paymaster
        self.paymasterVerificationGasLimit = paymasterVerificationGasLimit
        self.paymasterPostOpGasLimit = paymasterPostOpGasLimit
        self.paymasterData = paymasterData
        self.signature = signature
    }
}

#if compiler(>=6)
extension UserOperationV07: Sendable {}
#endif


extension UserOperationV07: Equatable, Hashable {
    public static func ==(lhs: UserOperationV07, rhs: UserOperationV07) -> Bool {
        if lhs.sender != rhs.sender {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.factory != rhs.factory {
            return false
        }
        if lhs.factoryData != rhs.factoryData {
            return false
        }
        if lhs.callData != rhs.callData {
            return false
        }
        if lhs.callGasLimit != rhs.callGasLimit {
            return false
        }
        if lhs.verificationGasLimit != rhs.verificationGasLimit {
            return false
        }
        if lhs.preVerificationGas != rhs.preVerificationGas {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        if lhs.paymasterVerificationGasLimit != rhs.paymasterVerificationGasLimit {
            return false
        }
        if lhs.paymasterPostOpGasLimit != rhs.paymasterPostOpGasLimit {
            return false
        }
        if lhs.paymasterData != rhs.paymasterData {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sender)
        hasher.combine(nonce)
        hasher.combine(factory)
        hasher.combine(factoryData)
        hasher.combine(callData)
        hasher.combine(callGasLimit)
        hasher.combine(verificationGasLimit)
        hasher.combine(preVerificationGas)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(paymaster)
        hasher.combine(paymasterVerificationGasLimit)
        hasher.combine(paymasterPostOpGasLimit)
        hasher.combine(paymasterData)
        hasher.combine(signature)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationV07: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationV07 {
        return
            try UserOperationV07(
                sender: FfiConverterTypeAccountAddress.read(from: &buf), 
                nonce: FfiConverterTypeU256.read(from: &buf), 
                factory: FfiConverterOptionTypeAddress.read(from: &buf), 
                factoryData: FfiConverterOptionTypeBytes.read(from: &buf), 
                callData: FfiConverterTypeBytes.read(from: &buf), 
                callGasLimit: FfiConverterTypeU256.read(from: &buf), 
                verificationGasLimit: FfiConverterTypeU256.read(from: &buf), 
                preVerificationGas: FfiConverterTypeU256.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeU256.read(from: &buf), 
                paymaster: FfiConverterOptionTypeAddress.read(from: &buf), 
                paymasterVerificationGasLimit: FfiConverterOptionTypeU256.read(from: &buf), 
                paymasterPostOpGasLimit: FfiConverterOptionTypeU256.read(from: &buf), 
                paymasterData: FfiConverterOptionTypeBytes.read(from: &buf), 
                signature: FfiConverterTypeBytes.read(from: &buf)
        )
    }

    public static func write(_ value: UserOperationV07, into buf: inout [UInt8]) {
        FfiConverterTypeAccountAddress.write(value.sender, into: &buf)
        FfiConverterTypeU256.write(value.nonce, into: &buf)
        FfiConverterOptionTypeAddress.write(value.factory, into: &buf)
        FfiConverterOptionTypeBytes.write(value.factoryData, into: &buf)
        FfiConverterTypeBytes.write(value.callData, into: &buf)
        FfiConverterTypeU256.write(value.callGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.verificationGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.preVerificationGas, into: &buf)
        FfiConverterTypeU256.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeU256.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterOptionTypeAddress.write(value.paymaster, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterVerificationGasLimit, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterPostOpGasLimit, into: &buf)
        FfiConverterOptionTypeBytes.write(value.paymasterData, into: &buf)
        FfiConverterTypeBytes.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lift(_ buf: RustBuffer) throws -> UserOperationV07 {
    return try FfiConverterTypeUserOperationV07.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lower(_ value: UserOperationV07) -> RustBuffer {
    return FfiConverterTypeUserOperationV07.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AddressOrNative {
    
    case addressVariant(Address
    )
    case native
}


#if compiler(>=6)
extension AddressOrNative: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = AddressOrNative

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressOrNative {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .addressVariant(try FfiConverterTypeAddress.read(from: &buf)
        )
        
        case 2: return .native
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressOrNative, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .addressVariant(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAddress.write(v1, into: &buf)
            
        
        case .native:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressOrNative_lift(_ buf: RustBuffer) throws -> AddressOrNative {
    return try FfiConverterTypeAddressOrNative.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressOrNative_lower(_ value: AddressOrNative) -> RustBuffer {
    return FfiConverterTypeAddressOrNative.lower(value)
}


extension AddressOrNative: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AssetFfi {
    
    case native(address: AddressOrNative, balance: U256, metadata: NativeMetadata
    )
    case erc20(address: AddressOrNative, balance: U256, metadata: Erc20Metadata
    )
    case erc721(address: AddressOrNative, balance: U256, metadata: Erc721Metadata
    )
}


#if compiler(>=6)
extension AssetFfi: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetFfi: FfiConverterRustBuffer {
    typealias SwiftType = AssetFfi

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetFfi {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .native(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeNativeMetadata.read(from: &buf)
        )
        
        case 2: return .erc20(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeErc20Metadata.read(from: &buf)
        )
        
        case 3: return .erc721(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeErc721Metadata.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AssetFfi, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .native(address,balance,metadata):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeNativeMetadata.write(metadata, into: &buf)
            
        
        case let .erc20(address,balance,metadata):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeErc20Metadata.write(metadata, into: &buf)
            
        
        case let .erc721(address,balance,metadata):
            writeInt(&buf, Int32(3))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeErc721Metadata.write(metadata, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetFfi_lift(_ buf: RustBuffer) throws -> AssetFfi {
    return try FfiConverterTypeAssetFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetFfi_lower(_ value: AssetFfi) -> RustBuffer {
    return FfiConverterTypeAssetFfi.lower(value)
}


extension AssetFfi: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AssetType {
    
    case native
    case erc20
    case erc721
}


#if compiler(>=6)
extension AssetType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = AssetType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .native
        
        case 2: return .erc20
        
        case 3: return .erc721
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AssetType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .native:
            writeInt(&buf, Int32(1))
        
        
        case .erc20:
            writeInt(&buf, Int32(2))
        
        
        case .erc721:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lift(_ buf: RustBuffer) throws -> AssetType {
    return try FfiConverterTypeAssetType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lower(_ value: AssetType) -> RustBuffer {
    return FfiConverterTypeAssetType.lower(value)
}


extension AssetType: Equatable, Hashable {}




public enum Erc6492Error {

    
    
    case RpcError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Error: FfiConverterRustBuffer {
    typealias SwiftType = Erc6492Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .RpcError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Erc6492Error, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .RpcError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Error_lift(_ buf: RustBuffer) throws -> Erc6492Error {
    return try FfiConverterTypeErc6492Error.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Error_lower(_ value: Erc6492Error) -> RustBuffer {
    return FfiConverterTypeErc6492Error.lower(value)
}


extension Erc6492Error: Equatable, Hashable {}



extension Erc6492Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SignOutputEnum {
    
    case signature(Bytes
    )
    case signOutput(SignOutputObject
    )
}


#if compiler(>=6)
extension SignOutputEnum: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputEnum: FfiConverterRustBuffer {
    typealias SwiftType = SignOutputEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .signature(try FfiConverterTypeBytes.read(from: &buf)
        )
        
        case 2: return .signOutput(try FfiConverterTypeSignOutputObject.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignOutputEnum, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .signature(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeBytes.write(v1, into: &buf)
            
        
        case let .signOutput(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeSignOutputObject.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lift(_ buf: RustBuffer) throws -> SignOutputEnum {
    return try FfiConverterTypeSignOutputEnum.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lower(_ value: SignOutputEnum) -> RustBuffer {
    return FfiConverterTypeSignOutputEnum.lower(value)
}


extension SignOutputEnum: Equatable, Hashable {}




public enum SolanaDeriveKeypairFromMnemonicError {

    
    
    case DerivationPath(String
    )
    case Derive(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSolanaDeriveKeypairFromMnemonicError: FfiConverterRustBuffer {
    typealias SwiftType = SolanaDeriveKeypairFromMnemonicError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SolanaDeriveKeypairFromMnemonicError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DerivationPath(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Derive(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SolanaDeriveKeypairFromMnemonicError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DerivationPath(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Derive(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSolanaDeriveKeypairFromMnemonicError_lift(_ buf: RustBuffer) throws -> SolanaDeriveKeypairFromMnemonicError {
    return try FfiConverterTypeSolanaDeriveKeypairFromMnemonicError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSolanaDeriveKeypairFromMnemonicError_lower(_ value: SolanaDeriveKeypairFromMnemonicError) -> RustBuffer {
    return FfiConverterTypeSolanaDeriveKeypairFromMnemonicError.lower(value)
}


extension SolanaDeriveKeypairFromMnemonicError: Equatable, Hashable {}



extension SolanaDeriveKeypairFromMnemonicError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = [AssetType]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeAssetType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeAssetType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeU64: FfiConverterRustBuffer {
    typealias SwiftType = [U64]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeU64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeU64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = [U64: [AddressOrNative]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBytes: FfiConverterRustBuffer {
    typealias SwiftType = Bytes?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBytes.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBytes.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeU256: FfiConverterRustBuffer {
    typealias SwiftType = U256?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeU256.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeU256.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = [AddressOrNative]

    public static func write(_ value: [AddressOrNative], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAddressOrNative.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AddressOrNative] {
        let len: Int32 = try readInt(&buf)
        var seq = [AddressOrNative]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAddressOrNative.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = [AssetType]

    public static func write(_ value: [AssetType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAssetType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetType] {
        let len: Int32 = try readInt(&buf)
        var seq = [AssetType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAssetType.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeU64: FfiConverterRustBuffer {
    typealias SwiftType = [U64]

    public static func write(_ value: [U64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeU64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [U64] {
        let len: Int32 = try readInt(&buf)
        var seq = [U64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeU64.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative: FfiConverterRustBuffer {
    public static func write(_ value: [U64: [AddressOrNative]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeU64.write(key, into: &buf)
            FfiConverterSequenceTypeAddressOrNative.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [U64: [AddressOrNative]] {
        let len: Int32 = try readInt(&buf)
        var dict = [U64: [AddressOrNative]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterTypeU64.read(from: &buf)
            let value = try FfiConverterSequenceTypeAddressOrNative.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AccountAddress = Address

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountAddress {
        return try FfiConverterTypeAddress.read(from: &buf)
    }

    public static func write(_ value: AccountAddress, into buf: inout [UInt8]) {
        return FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AccountAddress {
        return try FfiConverterTypeAddress_lift(value)
    }

    public static func lower(_ value: AccountAddress) -> RustBuffer {
        return FfiConverterTypeAddress_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lift(_ value: RustBuffer) throws -> AccountAddress {
    return try FfiConverterTypeAccountAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lower(_ value: AccountAddress) -> RustBuffer {
    return FfiConverterTypeAccountAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ value: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AlloyError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAlloyError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AlloyError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AlloyError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AlloyError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AlloyError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlloyError_lift(_ value: RustBuffer) throws -> AlloyError {
    return try FfiConverterTypeAlloyError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlloyError_lower(_ value: AlloyError) -> RustBuffer {
    return FfiConverterTypeAlloyError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AnyhowError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAnyhowError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AnyhowError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AnyhowError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AnyhowError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AnyhowError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyhowError_lift(_ value: RustBuffer) throws -> AnyhowError {
    return try FfiConverterTypeAnyhowError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyhowError_lower(_ value: AnyhowError) -> RustBuffer {
    return FfiConverterTypeAnyhowError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Asset = AssetFfi

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsset: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Asset {
        return try FfiConverterTypeAssetFfi.read(from: &buf)
    }

    public static func write(_ value: Asset, into buf: inout [UInt8]) {
        return FfiConverterTypeAssetFfi.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Asset {
        return try FfiConverterTypeAssetFfi_lift(value)
    }

    public static func lower(_ value: Asset) -> RustBuffer {
        return FfiConverterTypeAssetFfi_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lift(_ value: RustBuffer) throws -> Asset {
    return try FfiConverterTypeAsset.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lower(_ value: Asset) -> RustBuffer {
    return FfiConverterTypeAsset.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Authorization = FfiAuthorization

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthorization: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Authorization {
        return try FfiConverterTypeFfiAuthorization.read(from: &buf)
    }

    public static func write(_ value: Authorization, into buf: inout [UInt8]) {
        return FfiConverterTypeFfiAuthorization.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Authorization {
        return try FfiConverterTypeFfiAuthorization_lift(value)
    }

    public static func lower(_ value: Authorization) -> RustBuffer {
        return FfiConverterTypeFfiAuthorization_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lift(_ value: RustBuffer) throws -> Authorization {
    return try FfiConverterTypeAuthorization.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lower(_ value: Authorization) -> RustBuffer {
    return FfiConverterTypeAuthorization.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias B256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeB256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> B256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: B256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> B256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: B256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lift(_ value: RustBuffer) throws -> B256 {
    return try FfiConverterTypeB256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lower(_ value: B256) -> RustBuffer {
    return FfiConverterTypeB256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Bytes = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBytes: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bytes {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Bytes, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Bytes {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Bytes) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lift(_ value: RustBuffer) throws -> Bytes {
    return try FfiConverterTypeBytes.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lower(_ value: Bytes) -> RustBuffer {
    return FfiConverterTypeBytes.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Eip712Domain = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEip712Domain: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip712Domain {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Eip712Domain, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Eip712Domain {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Eip712Domain) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lift(_ value: RustBuffer) throws -> Eip712Domain {
    return try FfiConverterTypeEip712Domain.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lower(_ value: Eip712Domain) -> RustBuffer {
    return FfiConverterTypeEip712Domain.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias EyreError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEyreError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EyreError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: EyreError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> EyreError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: EyreError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEyreError_lift(_ value: RustBuffer) throws -> EyreError {
    return try FfiConverterTypeEyreError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEyreError_lower(_ value: EyreError) -> RustBuffer {
    return FfiConverterTypeEyreError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PendingTransactionError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingTransactionError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingTransactionError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PendingTransactionError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PendingTransactionError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PendingTransactionError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingTransactionError_lift(_ value: RustBuffer) throws -> PendingTransactionError {
    return try FfiConverterTypePendingTransactionError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingTransactionError_lower(_ value: PendingTransactionError) -> RustBuffer {
    return FfiConverterTypePendingTransactionError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrimitiveSignature = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrimitiveSignature: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrimitiveSignature {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrimitiveSignature, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrimitiveSignature {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrimitiveSignature) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lift(_ value: RustBuffer) throws -> PrimitiveSignature {
    return try FfiConverterTypePrimitiveSignature.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lower(_ value: PrimitiveSignature) -> RustBuffer {
    return FfiConverterTypePrimitiveSignature.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrivateKeySigner = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrivateKeySigner: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrivateKeySigner {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrivateKeySigner, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrivateKeySigner {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrivateKeySigner) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrivateKeySigner_lift(_ value: RustBuffer) throws -> PrivateKeySigner {
    return try FfiConverterTypePrivateKeySigner.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrivateKeySigner_lower(_ value: PrivateKeySigner) -> RustBuffer {
    return FfiConverterTypePrivateKeySigner.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ProjectId = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProjectId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProjectId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ProjectId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ProjectId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ProjectId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lift(_ value: RustBuffer) throws -> ProjectId {
    return try FfiConverterTypeProjectId.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lower(_ value: ProjectId) -> RustBuffer {
    return FfiConverterTypeProjectId.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ReqwestError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReqwestError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReqwestError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ReqwestError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ReqwestError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ReqwestError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReqwestError_lift(_ value: RustBuffer) throws -> ReqwestError {
    return try FfiConverterTypeReqwestError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReqwestError_lower(_ value: ReqwestError) -> RustBuffer {
    return FfiConverterTypeReqwestError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RpcError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRpcError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RpcError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: RpcError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> RpcError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: RpcError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRpcError_lift(_ value: RustBuffer) throws -> RpcError {
    return try FfiConverterTypeRpcError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRpcError_lower(_ value: RpcError) -> RustBuffer {
    return FfiConverterTypeRpcError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SerdeJsonError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSerdeJsonError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SerdeJsonError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SerdeJsonError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SerdeJsonError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SerdeJsonError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeJsonError_lift(_ value: RustBuffer) throws -> SerdeJsonError {
    return try FfiConverterTypeSerdeJsonError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeJsonError_lower(_ value: SerdeJsonError) -> RustBuffer {
    return FfiConverterTypeSerdeJsonError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias StatusCode = UInt16

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusCode: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusCode {
        return try FfiConverterUInt16.read(from: &buf)
    }

    public static func write(_ value: StatusCode, into buf: inout [UInt8]) {
        return FfiConverterUInt16.write(value, into: &buf)
    }

    public static func lift(_ value: UInt16) throws -> StatusCode {
        return try FfiConverterUInt16.lift(value)
    }

    public static func lower(_ value: StatusCode) -> UInt16 {
        return FfiConverterUInt16.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusCode_lift(_ value: UInt16) throws -> StatusCode {
    return try FfiConverterTypeStatusCode.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusCode_lower(_ value: StatusCode) -> UInt16 {
    return FfiConverterTypeStatusCode.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias TransactionReceipt = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionReceipt: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionReceipt {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: TransactionReceipt, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> TransactionReceipt {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: TransactionReceipt) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lift(_ value: RustBuffer) throws -> TransactionReceipt {
    return try FfiConverterTypeTransactionReceipt.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lower(_ value: TransactionReceipt) -> RustBuffer {
    return FfiConverterTypeTransactionReceipt.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U128 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU128: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U128 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U128, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U128 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U128) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lift(_ value: RustBuffer) throws -> U128 {
    return try FfiConverterTypeU128.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lower(_ value: U128) -> RustBuffer {
    return FfiConverterTypeU128.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U128Primitive = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU128Primitive: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U128Primitive {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U128Primitive, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U128Primitive {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U128Primitive) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128Primitive_lift(_ value: RustBuffer) throws -> U128Primitive {
    return try FfiConverterTypeU128Primitive.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128Primitive_lower(_ value: U128Primitive) -> RustBuffer {
    return FfiConverterTypeU128Primitive.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lift(_ value: RustBuffer) throws -> U256 {
    return try FfiConverterTypeU256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lower(_ value: U256) -> RustBuffer {
    return FfiConverterTypeU256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U48 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU48: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U48 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U48, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U48 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U48) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lift(_ value: RustBuffer) throws -> U48 {
    return try FfiConverterTypeU48.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lower(_ value: U48) -> RustBuffer {
    return FfiConverterTypeU48.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U64 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU64: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U64 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U64, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U64 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U64) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lift(_ value: RustBuffer) throws -> U64 {
    return try FfiConverterTypeU64.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lower(_ value: U64) -> RustBuffer {
    return FfiConverterTypeU64.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U8 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU8: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U8 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U8, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U8 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U8) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lift(_ value: RustBuffer) throws -> U8 {
    return try FfiConverterTypeU8.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lower(_ value: U8) -> RustBuffer {
    return FfiConverterTypeU8.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Url = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUrl: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Url {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Url, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Url {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Url) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrl_lift(_ value: RustBuffer) throws -> Url {
    return try FfiConverterTypeUrl.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrl_lower(_ value: Url) -> RustBuffer {
    return FfiConverterTypeUrl.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias UserOperationReceipt = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationReceipt: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationReceipt {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: UserOperationReceipt, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> UserOperationReceipt {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: UserOperationReceipt) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lift(_ value: RustBuffer) throws -> UserOperationReceipt {
    return try FfiConverterTypeUserOperationReceipt.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lower(_ value: UserOperationReceipt) -> RustBuffer {
    return FfiConverterTypeUserOperationReceipt.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureYttriumInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_yttrium_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_yttrium_checksum_method_erc6492client_verify_signature() != 43990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_constructor_erc6492client_new() != 33633) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureYttriumInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all