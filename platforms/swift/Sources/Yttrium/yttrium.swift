// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(yttriumFFI)
import yttriumFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_yttrium_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_yttrium_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureYttriumInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol Erc6492ClientProtocol: AnyObject, Sendable {
    
    func verifySignature(signature: Bytes, address: Address, messageHash: B256) async throws  -> Bool
    
}
open class Erc6492Client: Erc6492ClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_erc6492client(self.pointer, $0) }
    }
public convenience init(rpcUrl: String) {
    let pointer =
        try! rustCall() {
    uniffi_yttrium_fn_constructor_erc6492client_new(
        FfiConverterString.lower(rpcUrl),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_erc6492client(pointer, $0) }
    }

    

    
open func verifySignature(signature: Bytes, address: Address, messageHash: B256)async throws  -> Bool  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_erc6492client_verify_signature(
                    self.uniffiClonePointer(),
                    FfiConverterTypeBytes_lower(signature),FfiConverterTypeAddress_lower(address),FfiConverterTypeB256_lower(messageHash)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_i8,
            completeFunc: ffi_yttrium_rust_future_complete_i8,
            freeFunc: ffi_yttrium_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: FfiConverterTypeErc6492Error_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Client: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc6492Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
        return Erc6492Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc6492Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
    return try FfiConverterTypeErc6492Client.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc6492Client.lower(value)
}






public protocol Logger: AnyObject, Sendable {
    
    func log(message: String) 
    
}
open class LoggerImpl: Logger, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_logger(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_logger(pointer, $0) }
    }

    

    
open func log(message: String)  {try! rustCall() {
    uniffi_yttrium_fn_method_logger_log(self.uniffiClonePointer(),
        FfiConverterString.lower(message),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLogger {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceLogger] = [UniffiVTableCallbackInterfaceLogger(
        log: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeLogger.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.log(
                     message: try FfiConverterString.lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeLogger.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Logger: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitLogger() {
    uniffi_yttrium_fn_init_callback_vtable_logger(UniffiCallbackInterfaceLogger.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLogger: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<Logger>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Logger

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Logger {
        return LoggerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Logger) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Logger {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Logger, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogger_lift(_ pointer: UnsafeMutableRawPointer) throws -> Logger {
    return try FfiConverterTypeLogger.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogger_lower(_ value: Logger) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLogger.lower(value)
}






public protocol SignClientProtocol: AnyObject, Sendable {
    
    func approve(proposal: SessionProposalFfi, approvedNamespaces: [String: SettleNamespace], selfMetadata: Metadata) async throws  -> SessionFfi
    
    func connect(params: ConnectParamsFfi, selfMetadata: Metadata) async throws  -> ConnectResultFfi
    
    func disconnect(topic: String) async throws 
    
    func extend(topic: String) async throws 
    
    func generateKey()  -> Data
    
    func online() async 
    
    func pair(uri: String) async throws  -> SessionProposalFfi
    
    func registerSignListener(listener: SignListener) async 
    
    func reject(proposal: SessionProposalFfi, reason: RejectionReason) async throws 
    
    func respond(topic: String, response: SessionRequestJsonRpcResponseFfi) async throws  -> String
    
    func start() async 
    
    func update(topic: String, namespaces: [String: SettleNamespace]) async throws 
    
}
open class SignClient: SignClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_signclient(self.pointer, $0) }
    }
public convenience init(projectId: String, key: Data, sessionStore: StorageFfi) {
    let pointer =
        try! rustCall() {
    uniffi_yttrium_fn_constructor_signclient_new(
        FfiConverterString.lower(projectId),
        FfiConverterData.lower(key),
        FfiConverterTypeStorageFfi_lower(sessionStore),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_signclient(pointer, $0) }
    }

    

    
open func approve(proposal: SessionProposalFfi, approvedNamespaces: [String: SettleNamespace], selfMetadata: Metadata)async throws  -> SessionFfi  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_approve(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSessionProposalFfi_lower(proposal),FfiConverterDictionaryStringTypeSettleNamespace.lower(approvedNamespaces),FfiConverterTypeMetadata_lower(selfMetadata)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSessionFfi_lift,
            errorHandler: FfiConverterTypeApproveError_lift
        )
}
    
open func connect(params: ConnectParamsFfi, selfMetadata: Metadata)async throws  -> ConnectResultFfi  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_connect(
                    self.uniffiClonePointer(),
                    FfiConverterTypeConnectParamsFfi_lower(params),FfiConverterTypeMetadata_lower(selfMetadata)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeConnectResultFfi_lift,
            errorHandler: FfiConverterTypeConnectError_lift
        )
}
    
open func disconnect(topic: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_disconnect(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(topic)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeDisconnectError_lift
        )
}
    
open func extend(topic: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_extend(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(topic)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeExtendError_lift
        )
}
    
open func generateKey() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_yttrium_fn_method_signclient_generate_key(self.uniffiClonePointer(),$0
    )
})
}
    
open func online()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_online(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func pair(uri: String)async throws  -> SessionProposalFfi  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_pair(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(uri)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSessionProposalFfi_lift,
            errorHandler: FfiConverterTypePairError_lift
        )
}
    
open func registerSignListener(listener: SignListener)async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_register_sign_listener(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSignListener_lower(listener)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func reject(proposal: SessionProposalFfi, reason: RejectionReason)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_reject(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSessionProposalFfi_lower(proposal),FfiConverterTypeRejectionReason_lower(reason)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeRejectError_lift
        )
}
    
open func respond(topic: String, response: SessionRequestJsonRpcResponseFfi)async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_respond(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(topic),FfiConverterTypeSessionRequestJsonRpcResponseFfi_lower(response)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_rust_buffer,
            completeFunc: ffi_yttrium_rust_future_complete_rust_buffer,
            freeFunc: ffi_yttrium_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeRespondError_lift
        )
}
    
open func start()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_start(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func update(topic: String, namespaces: [String: SettleNamespace])async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_signclient_update(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(topic),FfiConverterDictionaryStringTypeSettleNamespace.lower(namespaces)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_void,
            completeFunc: ffi_yttrium_rust_future_complete_void,
            freeFunc: ffi_yttrium_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeUpdateError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SignClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SignClient {
        return SignClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SignClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SignClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> SignClient {
    return try FfiConverterTypeSignClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignClient_lower(_ value: SignClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSignClient.lower(value)
}






public protocol SignListener: AnyObject, Sendable {
    
    func onSessionRequest(topic: String, sessionRequest: SessionRequestJsonRpcFfi) 
    
    func onSessionDisconnect(id: UInt64, topic: String) 
    
    func onSessionEvent(id: UInt64, topic: String, params: Bool) 
    
    func onSessionExtend(id: UInt64, topic: String) 
    
    func onSessionUpdate(id: UInt64, topic: String, namespaces: [String: SettleNamespace]) 
    
    func onSessionConnect(id: UInt64) 
    
    func onSessionRequestResponse(id: UInt64, topic: String, response: SessionRequestJsonRpcResponseFfi) 
    
}
open class SignListenerImpl: SignListener, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_signlistener(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_signlistener(pointer, $0) }
    }

    

    
open func onSessionRequest(topic: String, sessionRequest: SessionRequestJsonRpcFfi)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_request(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),
        FfiConverterTypeSessionRequestJsonRpcFfi_lower(sessionRequest),$0
    )
}
}
    
open func onSessionDisconnect(id: UInt64, topic: String)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_disconnect(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),
        FfiConverterString.lower(topic),$0
    )
}
}
    
open func onSessionEvent(id: UInt64, topic: String, params: Bool)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_event(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),
        FfiConverterString.lower(topic),
        FfiConverterBool.lower(params),$0
    )
}
}
    
open func onSessionExtend(id: UInt64, topic: String)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_extend(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),
        FfiConverterString.lower(topic),$0
    )
}
}
    
open func onSessionUpdate(id: UInt64, topic: String, namespaces: [String: SettleNamespace])  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_update(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),
        FfiConverterString.lower(topic),
        FfiConverterDictionaryStringTypeSettleNamespace.lower(namespaces),$0
    )
}
}
    
open func onSessionConnect(id: UInt64)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_connect(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),$0
    )
}
}
    
open func onSessionRequestResponse(id: UInt64, topic: String, response: SessionRequestJsonRpcResponseFfi)  {try! rustCall() {
    uniffi_yttrium_fn_method_signlistener_on_session_request_response(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(id),
        FfiConverterString.lower(topic),
        FfiConverterTypeSessionRequestJsonRpcResponseFfi_lower(response),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceSignListener {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceSignListener] = [UniffiVTableCallbackInterfaceSignListener(
        onSessionRequest: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            sessionRequest: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionRequest(
                     topic: try FfiConverterString.lift(topic),
                     sessionRequest: try FfiConverterTypeSessionRequestJsonRpcFfi_lift(sessionRequest)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionDisconnect: { (
            uniffiHandle: UInt64,
            id: UInt64,
            topic: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionDisconnect(
                     id: try FfiConverterUInt64.lift(id),
                     topic: try FfiConverterString.lift(topic)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionEvent: { (
            uniffiHandle: UInt64,
            id: UInt64,
            topic: RustBuffer,
            params: Int8,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionEvent(
                     id: try FfiConverterUInt64.lift(id),
                     topic: try FfiConverterString.lift(topic),
                     params: try FfiConverterBool.lift(params)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionExtend: { (
            uniffiHandle: UInt64,
            id: UInt64,
            topic: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionExtend(
                     id: try FfiConverterUInt64.lift(id),
                     topic: try FfiConverterString.lift(topic)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionUpdate: { (
            uniffiHandle: UInt64,
            id: UInt64,
            topic: RustBuffer,
            namespaces: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionUpdate(
                     id: try FfiConverterUInt64.lift(id),
                     topic: try FfiConverterString.lift(topic),
                     namespaces: try FfiConverterDictionaryStringTypeSettleNamespace.lift(namespaces)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionConnect: { (
            uniffiHandle: UInt64,
            id: UInt64,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionConnect(
                     id: try FfiConverterUInt64.lift(id)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onSessionRequestResponse: { (
            uniffiHandle: UInt64,
            id: UInt64,
            topic: RustBuffer,
            response: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSignListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onSessionRequestResponse(
                     id: try FfiConverterUInt64.lift(id),
                     topic: try FfiConverterString.lift(topic),
                     response: try FfiConverterTypeSessionRequestJsonRpcResponseFfi_lift(response)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeSignListener.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface SignListener: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitSignListener() {
    uniffi_yttrium_fn_init_callback_vtable_signlistener(UniffiCallbackInterfaceSignListener.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignListener: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<SignListener>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SignListener

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SignListener {
        return SignListenerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SignListener) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignListener {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SignListener, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignListener_lift(_ pointer: UnsafeMutableRawPointer) throws -> SignListener {
    return try FfiConverterTypeSignListener.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignListener_lower(_ value: SignListener) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSignListener.lower(value)
}






public protocol StorageFfi: AnyObject, Sendable {
    
    func addSession(session: SessionFfi) throws 
    
    func deleteSession(topic: String) throws 
    
    func getSession(topic: String) throws  -> SessionFfi?
    
    func getAllSessions() throws  -> [SessionFfi]
    
    func getAllTopics() throws  -> [Topic]
    
    func getDecryptionKeyForTopic(topic: String) throws  -> Data?
    
    func savePairing(topic: String, rpcId: UInt64, symKey: Data, selfKey: Data) throws 
    
    func getPairing(topic: String, rpcId: UInt64) throws  -> PairingFfi?
    
    func savePartialSession(topic: String, symKey: Data) throws 
    
}
open class StorageFfiImpl: StorageFfi, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_storageffi(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_storageffi(pointer, $0) }
    }

    

    
open func addSession(session: SessionFfi)throws   {try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_add_session(self.uniffiClonePointer(),
        FfiConverterTypeSessionFfi_lower(session),$0
    )
}
}
    
open func deleteSession(topic: String)throws   {try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_delete_session(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),$0
    )
}
}
    
open func getSession(topic: String)throws  -> SessionFfi?  {
    return try  FfiConverterOptionTypeSessionFfi.lift(try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_get_session(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),$0
    )
})
}
    
open func getAllSessions()throws  -> [SessionFfi]  {
    return try  FfiConverterSequenceTypeSessionFfi.lift(try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_get_all_sessions(self.uniffiClonePointer(),$0
    )
})
}
    
open func getAllTopics()throws  -> [Topic]  {
    return try  FfiConverterSequenceTypeTopic.lift(try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_get_all_topics(self.uniffiClonePointer(),$0
    )
})
}
    
open func getDecryptionKeyForTopic(topic: String)throws  -> Data?  {
    return try  FfiConverterOptionData.lift(try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_get_decryption_key_for_topic(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),$0
    )
})
}
    
open func savePairing(topic: String, rpcId: UInt64, symKey: Data, selfKey: Data)throws   {try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_save_pairing(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),
        FfiConverterUInt64.lower(rpcId),
        FfiConverterData.lower(symKey),
        FfiConverterData.lower(selfKey),$0
    )
}
}
    
open func getPairing(topic: String, rpcId: UInt64)throws  -> PairingFfi?  {
    return try  FfiConverterOptionTypePairingFfi.lift(try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_get_pairing(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),
        FfiConverterUInt64.lower(rpcId),$0
    )
})
}
    
open func savePartialSession(topic: String, symKey: Data)throws   {try rustCallWithError(FfiConverterTypeStorageError_lift) {
    uniffi_yttrium_fn_method_storageffi_save_partial_session(self.uniffiClonePointer(),
        FfiConverterString.lower(topic),
        FfiConverterData.lower(symKey),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceStorageFfi {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceStorageFfi] = [UniffiVTableCallbackInterfaceStorageFfi(
        addSession: { (
            uniffiHandle: UInt64,
            session: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.addSession(
                     session: try FfiConverterTypeSessionFfi_lift(session)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        deleteSession: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.deleteSession(
                     topic: try FfiConverterString.lift(topic)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        getSession: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> SessionFfi? in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getSession(
                     topic: try FfiConverterString.lift(topic)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionTypeSessionFfi.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        getAllSessions: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [SessionFfi] in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getAllSessions(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceTypeSessionFfi.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        getAllTopics: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [Topic] in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getAllTopics(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceTypeTopic.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        getDecryptionKeyForTopic: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data? in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getDecryptionKeyForTopic(
                     topic: try FfiConverterString.lift(topic)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        savePairing: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            rpcId: UInt64,
            symKey: RustBuffer,
            selfKey: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.savePairing(
                     topic: try FfiConverterString.lift(topic),
                     rpcId: try FfiConverterUInt64.lift(rpcId),
                     symKey: try FfiConverterData.lift(symKey),
                     selfKey: try FfiConverterData.lift(selfKey)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        getPairing: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            rpcId: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> PairingFfi? in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getPairing(
                     topic: try FfiConverterString.lift(topic),
                     rpcId: try FfiConverterUInt64.lift(rpcId)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionTypePairingFfi.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        savePartialSession: { (
            uniffiHandle: UInt64,
            topic: RustBuffer,
            symKey: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeStorageFfi.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.savePartialSession(
                     topic: try FfiConverterString.lift(topic),
                     symKey: try FfiConverterData.lift(symKey)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageError_lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeStorageFfi.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface StorageFfi: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitStorageFfi() {
    uniffi_yttrium_fn_init_callback_vtable_storageffi(UniffiCallbackInterfaceStorageFfi.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStorageFfi: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<StorageFfi>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StorageFfi

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StorageFfi {
        return StorageFfiImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: StorageFfi) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StorageFfi {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: StorageFfi, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStorageFfi_lift(_ pointer: UnsafeMutableRawPointer) throws -> StorageFfi {
    return try FfiConverterTypeStorageFfi.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStorageFfi_lower(_ value: StorageFfi) -> UnsafeMutableRawPointer {
    return FfiConverterTypeStorageFfi.lower(value)
}




public struct Call {
    public var to: Address
    public var value: U256
    public var input: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: Address, value: U256, input: Bytes) {
        self.to = to
        self.value = value
        self.input = input
    }
}

#if compiler(>=6)
extension Call: Sendable {}
#endif


extension Call: Equatable, Hashable {
    public static func ==(lhs: Call, rhs: Call) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(input)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCall: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Call {
        return
            try Call(
                to: FfiConverterTypeAddress.read(from: &buf), 
                value: FfiConverterTypeU256.read(from: &buf), 
                input: FfiConverterTypeBytes.read(from: &buf)
        )
    }

    public static func write(_ value: Call, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeBytes.write(value.input, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lift(_ buf: RustBuffer) throws -> Call {
    return try FfiConverterTypeCall.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lower(_ value: Call) -> RustBuffer {
    return FfiConverterTypeCall.lower(value)
}


public struct Config {
    public var endpoints: Endpoints

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoints: Endpoints) {
        self.endpoints = endpoints
    }
}

#if compiler(>=6)
extension Config: Sendable {}
#endif


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.endpoints != rhs.endpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoints)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                endpoints: FfiConverterTypeEndpoints.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoints.write(value.endpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct ConnectParams {
    public var optionalNamespaces: [String: ProposalNamespace]
    public var sessionProperties: [String: String]?
    public var scopedProperties: [String: String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(optionalNamespaces: [String: ProposalNamespace], sessionProperties: [String: String]?, scopedProperties: [String: String]?) {
        self.optionalNamespaces = optionalNamespaces
        self.sessionProperties = sessionProperties
        self.scopedProperties = scopedProperties
    }
}

#if compiler(>=6)
extension ConnectParams: Sendable {}
#endif


extension ConnectParams: Equatable, Hashable {
    public static func ==(lhs: ConnectParams, rhs: ConnectParams) -> Bool {
        if lhs.optionalNamespaces != rhs.optionalNamespaces {
            return false
        }
        if lhs.sessionProperties != rhs.sessionProperties {
            return false
        }
        if lhs.scopedProperties != rhs.scopedProperties {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(optionalNamespaces)
        hasher.combine(sessionProperties)
        hasher.combine(scopedProperties)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectParams {
        return
            try ConnectParams(
                optionalNamespaces: FfiConverterDictionaryStringTypeProposalNamespace.read(from: &buf), 
                sessionProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                scopedProperties: FfiConverterOptionDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectParams, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringTypeProposalNamespace.write(value.optionalNamespaces, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.sessionProperties, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.scopedProperties, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectParams_lift(_ buf: RustBuffer) throws -> ConnectParams {
    return try FfiConverterTypeConnectParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectParams_lower(_ value: ConnectParams) -> RustBuffer {
    return FfiConverterTypeConnectParams.lower(value)
}


public struct ConnectParamsFfi {
    public var optionalNamespaces: [String: ProposalNamespace]
    public var sessionProperties: [String: String]?
    public var scopedProperties: [String: String]?
    public var metadata: Metadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(optionalNamespaces: [String: ProposalNamespace], sessionProperties: [String: String]?, scopedProperties: [String: String]?, metadata: Metadata) {
        self.optionalNamespaces = optionalNamespaces
        self.sessionProperties = sessionProperties
        self.scopedProperties = scopedProperties
        self.metadata = metadata
    }
}

#if compiler(>=6)
extension ConnectParamsFfi: Sendable {}
#endif


extension ConnectParamsFfi: Equatable, Hashable {
    public static func ==(lhs: ConnectParamsFfi, rhs: ConnectParamsFfi) -> Bool {
        if lhs.optionalNamespaces != rhs.optionalNamespaces {
            return false
        }
        if lhs.sessionProperties != rhs.sessionProperties {
            return false
        }
        if lhs.scopedProperties != rhs.scopedProperties {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(optionalNamespaces)
        hasher.combine(sessionProperties)
        hasher.combine(scopedProperties)
        hasher.combine(metadata)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectParamsFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectParamsFfi {
        return
            try ConnectParamsFfi(
                optionalNamespaces: FfiConverterDictionaryStringTypeProposalNamespace.read(from: &buf), 
                sessionProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                scopedProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                metadata: FfiConverterTypeMetadata.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectParamsFfi, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringTypeProposalNamespace.write(value.optionalNamespaces, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.sessionProperties, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.scopedProperties, into: &buf)
        FfiConverterTypeMetadata.write(value.metadata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectParamsFfi_lift(_ buf: RustBuffer) throws -> ConnectParamsFfi {
    return try FfiConverterTypeConnectParamsFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectParamsFfi_lower(_ value: ConnectParamsFfi) -> RustBuffer {
    return FfiConverterTypeConnectParamsFfi.lower(value)
}


public struct ConnectResult {
    public var topic: Topic
    public var uri: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(topic: Topic, uri: String) {
        self.topic = topic
        self.uri = uri
    }
}

#if compiler(>=6)
extension ConnectResult: Sendable {}
#endif


extension ConnectResult: Equatable, Hashable {
    public static func ==(lhs: ConnectResult, rhs: ConnectResult) -> Bool {
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(topic)
        hasher.combine(uri)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectResult {
        return
            try ConnectResult(
                topic: FfiConverterTypeTopic.read(from: &buf), 
                uri: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectResult, into buf: inout [UInt8]) {
        FfiConverterTypeTopic.write(value.topic, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectResult_lift(_ buf: RustBuffer) throws -> ConnectResult {
    return try FfiConverterTypeConnectResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectResult_lower(_ value: ConnectResult) -> RustBuffer {
    return FfiConverterTypeConnectResult.lower(value)
}


public struct ConnectResultFfi {
    public var topic: Topic
    public var uri: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(topic: Topic, uri: String) {
        self.topic = topic
        self.uri = uri
    }
}

#if compiler(>=6)
extension ConnectResultFfi: Sendable {}
#endif


extension ConnectResultFfi: Equatable, Hashable {
    public static func ==(lhs: ConnectResultFfi, rhs: ConnectResultFfi) -> Bool {
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(topic)
        hasher.combine(uri)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectResultFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectResultFfi {
        return
            try ConnectResultFfi(
                topic: FfiConverterTypeTopic.read(from: &buf), 
                uri: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectResultFfi, into buf: inout [UInt8]) {
        FfiConverterTypeTopic.write(value.topic, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectResultFfi_lift(_ buf: RustBuffer) throws -> ConnectResultFfi {
    return try FfiConverterTypeConnectResultFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectResultFfi_lower(_ value: ConnectResultFfi) -> RustBuffer {
    return FfiConverterTypeConnectResultFfi.lower(value)
}


public struct DoSendTransactionParams {
    public var userOp: UserOperationV07
    public var validAfter: U48
    public var validUntil: U48

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userOp: UserOperationV07, validAfter: U48, validUntil: U48) {
        self.userOp = userOp
        self.validAfter = validAfter
        self.validUntil = validUntil
    }
}

#if compiler(>=6)
extension DoSendTransactionParams: Sendable {}
#endif


extension DoSendTransactionParams: Equatable, Hashable {
    public static func ==(lhs: DoSendTransactionParams, rhs: DoSendTransactionParams) -> Bool {
        if lhs.userOp != rhs.userOp {
            return false
        }
        if lhs.validAfter != rhs.validAfter {
            return false
        }
        if lhs.validUntil != rhs.validUntil {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userOp)
        hasher.combine(validAfter)
        hasher.combine(validUntil)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDoSendTransactionParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DoSendTransactionParams {
        return
            try DoSendTransactionParams(
                userOp: FfiConverterTypeUserOperationV07.read(from: &buf), 
                validAfter: FfiConverterTypeU48.read(from: &buf), 
                validUntil: FfiConverterTypeU48.read(from: &buf)
        )
    }

    public static func write(_ value: DoSendTransactionParams, into buf: inout [UInt8]) {
        FfiConverterTypeUserOperationV07.write(value.userOp, into: &buf)
        FfiConverterTypeU48.write(value.validAfter, into: &buf)
        FfiConverterTypeU48.write(value.validUntil, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lift(_ buf: RustBuffer) throws -> DoSendTransactionParams {
    return try FfiConverterTypeDoSendTransactionParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDoSendTransactionParams_lower(_ value: DoSendTransactionParams) -> RustBuffer {
    return FfiConverterTypeDoSendTransactionParams.lower(value)
}


public struct Endpoint {
    public var baseUrl: String
    public var apiKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(baseUrl: String, apiKey: String) {
        self.baseUrl = baseUrl
        self.apiKey = apiKey
    }
}

#if compiler(>=6)
extension Endpoint: Sendable {}
#endif


extension Endpoint: Equatable, Hashable {
    public static func ==(lhs: Endpoint, rhs: Endpoint) -> Bool {
        if lhs.baseUrl != rhs.baseUrl {
            return false
        }
        if lhs.apiKey != rhs.apiKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseUrl)
        hasher.combine(apiKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoint {
        return
            try Endpoint(
                baseUrl: FfiConverterString.read(from: &buf), 
                apiKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.baseUrl, into: &buf)
        FfiConverterString.write(value.apiKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lift(_ buf: RustBuffer) throws -> Endpoint {
    return try FfiConverterTypeEndpoint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lower(_ value: Endpoint) -> RustBuffer {
    return FfiConverterTypeEndpoint.lower(value)
}


public struct Endpoints {
    public var rpc: Endpoint
    public var bundler: Endpoint
    public var paymaster: Endpoint

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpc: Endpoint, bundler: Endpoint, paymaster: Endpoint) {
        self.rpc = rpc
        self.bundler = bundler
        self.paymaster = paymaster
    }
}

#if compiler(>=6)
extension Endpoints: Sendable {}
#endif


extension Endpoints: Equatable, Hashable {
    public static func ==(lhs: Endpoints, rhs: Endpoints) -> Bool {
        if lhs.rpc != rhs.rpc {
            return false
        }
        if lhs.bundler != rhs.bundler {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpc)
        hasher.combine(bundler)
        hasher.combine(paymaster)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoints: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoints {
        return
            try Endpoints(
                rpc: FfiConverterTypeEndpoint.read(from: &buf), 
                bundler: FfiConverterTypeEndpoint.read(from: &buf), 
                paymaster: FfiConverterTypeEndpoint.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoints, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoint.write(value.rpc, into: &buf)
        FfiConverterTypeEndpoint.write(value.bundler, into: &buf)
        FfiConverterTypeEndpoint.write(value.paymaster, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lift(_ buf: RustBuffer) throws -> Endpoints {
    return try FfiConverterTypeEndpoints.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lower(_ value: Endpoints) -> RustBuffer {
    return FfiConverterTypeEndpoints.lower(value)
}


public struct Erc20Metadata {
    public var name: String
    public var symbol: String
    public var decimals: UInt8
    public var value: Double?
    public var price: Double
    public var iconUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String, decimals: UInt8, value: Double?, price: Double, iconUrl: String) {
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.value = value
        self.price = price
        self.iconUrl = iconUrl
    }
}

#if compiler(>=6)
extension Erc20Metadata: Sendable {}
#endif


extension Erc20Metadata: Equatable, Hashable {
    public static func ==(lhs: Erc20Metadata, rhs: Erc20Metadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.iconUrl != rhs.iconUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(decimals)
        hasher.combine(value)
        hasher.combine(price)
        hasher.combine(iconUrl)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc20Metadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc20Metadata {
        return
            try Erc20Metadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                decimals: FfiConverterUInt8.read(from: &buf), 
                value: FfiConverterOptionDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                iconUrl: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Erc20Metadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
        FfiConverterOptionDouble.write(value.value, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterString.write(value.iconUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc20Metadata_lift(_ buf: RustBuffer) throws -> Erc20Metadata {
    return try FfiConverterTypeErc20Metadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc20Metadata_lower(_ value: Erc20Metadata) -> RustBuffer {
    return FfiConverterTypeErc20Metadata.lower(value)
}


public struct Erc721Metadata {
    public var name: String
    public var symbol: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String) {
        self.name = name
        self.symbol = symbol
    }
}

#if compiler(>=6)
extension Erc721Metadata: Sendable {}
#endif


extension Erc721Metadata: Equatable, Hashable {
    public static func ==(lhs: Erc721Metadata, rhs: Erc721Metadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc721Metadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc721Metadata {
        return
            try Erc721Metadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Erc721Metadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc721Metadata_lift(_ buf: RustBuffer) throws -> Erc721Metadata {
    return try FfiConverterTypeErc721Metadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc721Metadata_lower(_ value: Erc721Metadata) -> RustBuffer {
    return FfiConverterTypeErc721Metadata.lower(value)
}


public struct ErrorDataFfi {
    /**
     * Error code.
     */
    public var code: Int32
    /**
     * Error message.
     */
    public var message: String
    /**
     * Error data, if any.
     */
    public var data: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Error code.
         */code: Int32, 
        /**
         * Error message.
         */message: String, 
        /**
         * Error data, if any.
         */data: String?) {
        self.code = code
        self.message = message
        self.data = data
    }
}

#if compiler(>=6)
extension ErrorDataFfi: Sendable {}
#endif


extension ErrorDataFfi: Equatable, Hashable {
    public static func ==(lhs: ErrorDataFfi, rhs: ErrorDataFfi) -> Bool {
        if lhs.code != rhs.code {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(code)
        hasher.combine(message)
        hasher.combine(data)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErrorDataFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ErrorDataFfi {
        return
            try ErrorDataFfi(
                code: FfiConverterInt32.read(from: &buf), 
                message: FfiConverterString.read(from: &buf), 
                data: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ErrorDataFfi, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.code, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterOptionString.write(value.data, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErrorDataFfi_lift(_ buf: RustBuffer) throws -> ErrorDataFfi {
    return try FfiConverterTypeErrorDataFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErrorDataFfi_lower(_ value: ErrorDataFfi) -> RustBuffer {
    return FfiConverterTypeErrorDataFfi.lower(value)
}


public struct FfiAuthorization {
    /**
     * The chain ID of the authorization.
     */
    public var chainId: U256
    /**
     * The address of the authorization.
     */
    public var address: Address
    /**
     * The nonce for the authorization.
     */
    public var nonce: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The chain ID of the authorization.
         */chainId: U256, 
        /**
         * The address of the authorization.
         */address: Address, 
        /**
         * The nonce for the authorization.
         */nonce: UInt64) {
        self.chainId = chainId
        self.address = address
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension FfiAuthorization: Sendable {}
#endif


extension FfiAuthorization: Equatable, Hashable {
    public static func ==(lhs: FfiAuthorization, rhs: FfiAuthorization) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(address)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiAuthorization: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAuthorization {
        return
            try FfiAuthorization(
                chainId: FfiConverterTypeU256.read(from: &buf), 
                address: FfiConverterTypeAddress.read(from: &buf), 
                nonce: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FfiAuthorization, into buf: inout [UInt8]) {
        FfiConverterTypeU256.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAuthorization_lift(_ buf: RustBuffer) throws -> FfiAuthorization {
    return try FfiConverterTypeFfiAuthorization.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAuthorization_lower(_ value: FfiAuthorization) -> RustBuffer {
    return FfiConverterTypeFfiAuthorization.lower(value)
}


public struct GetAssetsFilters {
    public var assetFilter: [U64: [AddressOrNative]]?
    public var assetTypeFilter: [AssetType]?
    public var chainFilter: [U64]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(assetFilter: [U64: [AddressOrNative]]?, assetTypeFilter: [AssetType]?, chainFilter: [U64]?) {
        self.assetFilter = assetFilter
        self.assetTypeFilter = assetTypeFilter
        self.chainFilter = chainFilter
    }
}

#if compiler(>=6)
extension GetAssetsFilters: Sendable {}
#endif


extension GetAssetsFilters: Equatable, Hashable {
    public static func ==(lhs: GetAssetsFilters, rhs: GetAssetsFilters) -> Bool {
        if lhs.assetFilter != rhs.assetFilter {
            return false
        }
        if lhs.assetTypeFilter != rhs.assetTypeFilter {
            return false
        }
        if lhs.chainFilter != rhs.chainFilter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assetFilter)
        hasher.combine(assetTypeFilter)
        hasher.combine(chainFilter)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetAssetsFilters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssetsFilters {
        return
            try GetAssetsFilters(
                assetFilter: FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative.read(from: &buf), 
                assetTypeFilter: FfiConverterOptionSequenceTypeAssetType.read(from: &buf), 
                chainFilter: FfiConverterOptionSequenceTypeU64.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssetsFilters, into buf: inout [UInt8]) {
        FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative.write(value.assetFilter, into: &buf)
        FfiConverterOptionSequenceTypeAssetType.write(value.assetTypeFilter, into: &buf)
        FfiConverterOptionSequenceTypeU64.write(value.chainFilter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsFilters_lift(_ buf: RustBuffer) throws -> GetAssetsFilters {
    return try FfiConverterTypeGetAssetsFilters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsFilters_lower(_ value: GetAssetsFilters) -> RustBuffer {
    return FfiConverterTypeGetAssetsFilters.lower(value)
}


public struct GetAssetsParams {
    public var account: Address
    public var filters: GetAssetsFilters

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(account: Address, filters: GetAssetsFilters) {
        self.account = account
        self.filters = filters
    }
}

#if compiler(>=6)
extension GetAssetsParams: Sendable {}
#endif


extension GetAssetsParams: Equatable, Hashable {
    public static func ==(lhs: GetAssetsParams, rhs: GetAssetsParams) -> Bool {
        if lhs.account != rhs.account {
            return false
        }
        if lhs.filters != rhs.filters {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(account)
        hasher.combine(filters)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetAssetsParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssetsParams {
        return
            try GetAssetsParams(
                account: FfiConverterTypeAddress.read(from: &buf), 
                filters: FfiConverterTypeGetAssetsFilters.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssetsParams, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.account, into: &buf)
        FfiConverterTypeGetAssetsFilters.write(value.filters, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsParams_lift(_ buf: RustBuffer) throws -> GetAssetsParams {
    return try FfiConverterTypeGetAssetsParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetAssetsParams_lower(_ value: GetAssetsParams) -> RustBuffer {
    return FfiConverterTypeGetAssetsParams.lower(value)
}


public struct Metadata {
    public var name: String
    public var description: String
    public var url: String
    public var icons: [String]
    public var verifyUrl: String?
    public var redirect: Redirect?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, description: String, url: String, icons: [String], verifyUrl: String?, redirect: Redirect?) {
        self.name = name
        self.description = description
        self.url = url
        self.icons = icons
        self.verifyUrl = verifyUrl
        self.redirect = redirect
    }
}

#if compiler(>=6)
extension Metadata: Sendable {}
#endif


extension Metadata: Equatable, Hashable {
    public static func ==(lhs: Metadata, rhs: Metadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        if lhs.icons != rhs.icons {
            return false
        }
        if lhs.verifyUrl != rhs.verifyUrl {
            return false
        }
        if lhs.redirect != rhs.redirect {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(description)
        hasher.combine(url)
        hasher.combine(icons)
        hasher.combine(verifyUrl)
        hasher.combine(redirect)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Metadata {
        return
            try Metadata(
                name: FfiConverterString.read(from: &buf), 
                description: FfiConverterString.read(from: &buf), 
                url: FfiConverterString.read(from: &buf), 
                icons: FfiConverterSequenceString.read(from: &buf), 
                verifyUrl: FfiConverterOptionString.read(from: &buf), 
                redirect: FfiConverterOptionTypeRedirect.read(from: &buf)
        )
    }

    public static func write(_ value: Metadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.description, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterSequenceString.write(value.icons, into: &buf)
        FfiConverterOptionString.write(value.verifyUrl, into: &buf)
        FfiConverterOptionTypeRedirect.write(value.redirect, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lift(_ buf: RustBuffer) throws -> Metadata {
    return try FfiConverterTypeMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lower(_ value: Metadata) -> RustBuffer {
    return FfiConverterTypeMetadata.lower(value)
}


public struct NativeMetadata {
    public var name: String
    public var symbol: String
    public var decimals: UInt8
    public var value: Double?
    public var price: Double
    public var iconUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, symbol: String, decimals: UInt8, value: Double?, price: Double, iconUrl: String) {
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.value = value
        self.price = price
        self.iconUrl = iconUrl
    }
}

#if compiler(>=6)
extension NativeMetadata: Sendable {}
#endif


extension NativeMetadata: Equatable, Hashable {
    public static func ==(lhs: NativeMetadata, rhs: NativeMetadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.iconUrl != rhs.iconUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(decimals)
        hasher.combine(value)
        hasher.combine(price)
        hasher.combine(iconUrl)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNativeMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NativeMetadata {
        return
            try NativeMetadata(
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                decimals: FfiConverterUInt8.read(from: &buf), 
                value: FfiConverterOptionDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                iconUrl: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: NativeMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
        FfiConverterOptionDouble.write(value.value, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterString.write(value.iconUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNativeMetadata_lift(_ buf: RustBuffer) throws -> NativeMetadata {
    return try FfiConverterTypeNativeMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNativeMetadata_lower(_ value: NativeMetadata) -> RustBuffer {
    return FfiConverterTypeNativeMetadata.lower(value)
}


public struct OwnerSignature {
    public var owner: Address
    public var signature: PrimitiveSignature

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(owner: Address, signature: PrimitiveSignature) {
        self.owner = owner
        self.signature = signature
    }
}

#if compiler(>=6)
extension OwnerSignature: Sendable {}
#endif


extension OwnerSignature: Equatable, Hashable {
    public static func ==(lhs: OwnerSignature, rhs: OwnerSignature) -> Bool {
        if lhs.owner != rhs.owner {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(owner)
        hasher.combine(signature)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOwnerSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OwnerSignature {
        return
            try OwnerSignature(
                owner: FfiConverterTypeAddress.read(from: &buf), 
                signature: FfiConverterTypePrimitiveSignature.read(from: &buf)
        )
    }

    public static func write(_ value: OwnerSignature, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.owner, into: &buf)
        FfiConverterTypePrimitiveSignature.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lift(_ buf: RustBuffer) throws -> OwnerSignature {
    return try FfiConverterTypeOwnerSignature.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwnerSignature_lower(_ value: OwnerSignature) -> RustBuffer {
    return FfiConverterTypeOwnerSignature.lower(value)
}


public struct Pairing {
    public var topic: String
    public var uri: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(topic: String, uri: String) {
        self.topic = topic
        self.uri = uri
    }
}

#if compiler(>=6)
extension Pairing: Sendable {}
#endif


extension Pairing: Equatable, Hashable {
    public static func ==(lhs: Pairing, rhs: Pairing) -> Bool {
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(topic)
        hasher.combine(uri)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairing: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Pairing {
        return
            try Pairing(
                topic: FfiConverterString.read(from: &buf), 
                uri: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Pairing, into buf: inout [UInt8]) {
        FfiConverterString.write(value.topic, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairing_lift(_ buf: RustBuffer) throws -> Pairing {
    return try FfiConverterTypePairing.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairing_lower(_ value: Pairing) -> RustBuffer {
    return FfiConverterTypePairing.lower(value)
}


public struct PairingFfi {
    public var rpcId: UInt64
    public var symKey: Data
    public var selfKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpcId: UInt64, symKey: Data, selfKey: Data) {
        self.rpcId = rpcId
        self.symKey = symKey
        self.selfKey = selfKey
    }
}

#if compiler(>=6)
extension PairingFfi: Sendable {}
#endif


extension PairingFfi: Equatable, Hashable {
    public static func ==(lhs: PairingFfi, rhs: PairingFfi) -> Bool {
        if lhs.rpcId != rhs.rpcId {
            return false
        }
        if lhs.symKey != rhs.symKey {
            return false
        }
        if lhs.selfKey != rhs.selfKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpcId)
        hasher.combine(symKey)
        hasher.combine(selfKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairingFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairingFfi {
        return
            try PairingFfi(
                rpcId: FfiConverterUInt64.read(from: &buf), 
                symKey: FfiConverterData.read(from: &buf), 
                selfKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: PairingFfi, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.rpcId, into: &buf)
        FfiConverterData.write(value.symKey, into: &buf)
        FfiConverterData.write(value.selfKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingFfi_lift(_ buf: RustBuffer) throws -> PairingFfi {
    return try FfiConverterTypePairingFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingFfi_lower(_ value: PairingFfi) -> RustBuffer {
    return FfiConverterTypePairingFfi.lower(value)
}


public struct PairingInfo {
    public var topic: Topic
    public var uri: String
    public var symKey: Data
    public var expiry: UInt64
    public var relay: Relay
    public var active: Bool
    public var methods: [String]?
    public var peerMetadata: Metadata?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(topic: Topic, uri: String, symKey: Data, expiry: UInt64, relay: Relay, active: Bool, methods: [String]?, peerMetadata: Metadata?) {
        self.topic = topic
        self.uri = uri
        self.symKey = symKey
        self.expiry = expiry
        self.relay = relay
        self.active = active
        self.methods = methods
        self.peerMetadata = peerMetadata
    }
}

#if compiler(>=6)
extension PairingInfo: Sendable {}
#endif


extension PairingInfo: Equatable, Hashable {
    public static func ==(lhs: PairingInfo, rhs: PairingInfo) -> Bool {
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.symKey != rhs.symKey {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.relay != rhs.relay {
            return false
        }
        if lhs.active != rhs.active {
            return false
        }
        if lhs.methods != rhs.methods {
            return false
        }
        if lhs.peerMetadata != rhs.peerMetadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(topic)
        hasher.combine(uri)
        hasher.combine(symKey)
        hasher.combine(expiry)
        hasher.combine(relay)
        hasher.combine(active)
        hasher.combine(methods)
        hasher.combine(peerMetadata)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairingInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairingInfo {
        return
            try PairingInfo(
                topic: FfiConverterTypeTopic.read(from: &buf), 
                uri: FfiConverterString.read(from: &buf), 
                symKey: FfiConverterData.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                relay: FfiConverterTypeRelay.read(from: &buf), 
                active: FfiConverterBool.read(from: &buf), 
                methods: FfiConverterOptionSequenceString.read(from: &buf), 
                peerMetadata: FfiConverterOptionTypeMetadata.read(from: &buf)
        )
    }

    public static func write(_ value: PairingInfo, into buf: inout [UInt8]) {
        FfiConverterTypeTopic.write(value.topic, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterData.write(value.symKey, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterTypeRelay.write(value.relay, into: &buf)
        FfiConverterBool.write(value.active, into: &buf)
        FfiConverterOptionSequenceString.write(value.methods, into: &buf)
        FfiConverterOptionTypeMetadata.write(value.peerMetadata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingInfo_lift(_ buf: RustBuffer) throws -> PairingInfo {
    return try FfiConverterTypePairingInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairingInfo_lower(_ value: PairingInfo) -> RustBuffer {
    return FfiConverterTypePairingInfo.lower(value)
}


public struct PreparedSendTransaction {
    public var safeOp: SafeOp
    public var domain: Eip712Domain
    public var hash: B256
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(safeOp: SafeOp, domain: Eip712Domain, hash: B256, doSendTransactionParams: DoSendTransactionParams) {
        self.safeOp = safeOp
        self.domain = domain
        self.hash = hash
        self.doSendTransactionParams = doSendTransactionParams
    }
}

#if compiler(>=6)
extension PreparedSendTransaction: Sendable {}
#endif


extension PreparedSendTransaction: Equatable, Hashable {
    public static func ==(lhs: PreparedSendTransaction, rhs: PreparedSendTransaction) -> Bool {
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(safeOp)
        hasher.combine(domain)
        hasher.combine(hash)
        hasher.combine(doSendTransactionParams)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedSendTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedSendTransaction {
        return
            try PreparedSendTransaction(
                safeOp: FfiConverterTypeSafeOp.read(from: &buf), 
                domain: FfiConverterTypeEip712Domain.read(from: &buf), 
                hash: FfiConverterTypeB256.read(from: &buf), 
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
        )
    }

    public static func write(_ value: PreparedSendTransaction, into buf: inout [UInt8]) {
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lift(_ buf: RustBuffer) throws -> PreparedSendTransaction {
    return try FfiConverterTypePreparedSendTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedSendTransaction_lower(_ value: PreparedSendTransaction) -> RustBuffer {
    return FfiConverterTypePreparedSendTransaction.lower(value)
}


public struct ProposalNamespace {
    public var chains: [String]
    public var methods: [String]
    public var events: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chains: [String], methods: [String], events: [String]) {
        self.chains = chains
        self.methods = methods
        self.events = events
    }
}

#if compiler(>=6)
extension ProposalNamespace: Sendable {}
#endif


extension ProposalNamespace: Equatable, Hashable {
    public static func ==(lhs: ProposalNamespace, rhs: ProposalNamespace) -> Bool {
        if lhs.chains != rhs.chains {
            return false
        }
        if lhs.methods != rhs.methods {
            return false
        }
        if lhs.events != rhs.events {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chains)
        hasher.combine(methods)
        hasher.combine(events)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProposalNamespace: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProposalNamespace {
        return
            try ProposalNamespace(
                chains: FfiConverterSequenceString.read(from: &buf), 
                methods: FfiConverterSequenceString.read(from: &buf), 
                events: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: ProposalNamespace, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.chains, into: &buf)
        FfiConverterSequenceString.write(value.methods, into: &buf)
        FfiConverterSequenceString.write(value.events, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProposalNamespace_lift(_ buf: RustBuffer) throws -> ProposalNamespace {
    return try FfiConverterTypeProposalNamespace.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProposalNamespace_lower(_ value: ProposalNamespace) -> RustBuffer {
    return FfiConverterTypeProposalNamespace.lower(value)
}


public struct Redirect {
    public var native: String?
    public var universal: String?
    public var linkMode: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(native: String?, universal: String?, linkMode: Bool) {
        self.native = native
        self.universal = universal
        self.linkMode = linkMode
    }
}

#if compiler(>=6)
extension Redirect: Sendable {}
#endif


extension Redirect: Equatable, Hashable {
    public static func ==(lhs: Redirect, rhs: Redirect) -> Bool {
        if lhs.native != rhs.native {
            return false
        }
        if lhs.universal != rhs.universal {
            return false
        }
        if lhs.linkMode != rhs.linkMode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(native)
        hasher.combine(universal)
        hasher.combine(linkMode)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRedirect: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Redirect {
        return
            try Redirect(
                native: FfiConverterOptionString.read(from: &buf), 
                universal: FfiConverterOptionString.read(from: &buf), 
                linkMode: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: Redirect, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.native, into: &buf)
        FfiConverterOptionString.write(value.universal, into: &buf)
        FfiConverterBool.write(value.linkMode, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRedirect_lift(_ buf: RustBuffer) throws -> Redirect {
    return try FfiConverterTypeRedirect.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRedirect_lower(_ value: Redirect) -> RustBuffer {
    return FfiConverterTypeRedirect.lower(value)
}


public struct Relay {
    public var `protocol`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`protocol`: String) {
        self.`protocol` = `protocol`
    }
}

#if compiler(>=6)
extension Relay: Sendable {}
#endif


extension Relay: Equatable, Hashable {
    public static func ==(lhs: Relay, rhs: Relay) -> Bool {
        if lhs.`protocol` != rhs.`protocol` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`protocol`)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRelay: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Relay {
        return
            try Relay(
                protocol: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Relay, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`protocol`, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRelay_lift(_ buf: RustBuffer) throws -> Relay {
    return try FfiConverterTypeRelay.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRelay_lower(_ value: Relay) -> RustBuffer {
    return FfiConverterTypeRelay.lower(value)
}


/**
 * ```solidity
 * struct SafeOp { address safe; uint256 nonce; bytes initCode; bytes callData; uint128 verificationGasLimit; uint128 callGasLimit; uint256 preVerificationGas; uint128 maxPriorityFeePerGas; uint128 maxFeePerGas; bytes paymasterAndData; uint48 validAfter; uint48 validUntil; address entryPoint; }
 * ```
 */
public struct SafeOp {
    public var safe: Address
    public var nonce: U256
    public var initCode: Bytes
    public var callData: Bytes
    public var verificationGasLimit: U128Primitive
    public var callGasLimit: U128Primitive
    public var preVerificationGas: U256
    public var maxPriorityFeePerGas: U128Primitive
    public var maxFeePerGas: U128Primitive
    public var paymasterAndData: Bytes
    public var validAfter: U48
    public var validUntil: U48
    public var entryPoint: Address

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(safe: Address, nonce: U256, initCode: Bytes, callData: Bytes, verificationGasLimit: U128Primitive, callGasLimit: U128Primitive, preVerificationGas: U256, maxPriorityFeePerGas: U128Primitive, maxFeePerGas: U128Primitive, paymasterAndData: Bytes, validAfter: U48, validUntil: U48, entryPoint: Address) {
        self.safe = safe
        self.nonce = nonce
        self.initCode = initCode
        self.callData = callData
        self.verificationGasLimit = verificationGasLimit
        self.callGasLimit = callGasLimit
        self.preVerificationGas = preVerificationGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.maxFeePerGas = maxFeePerGas
        self.paymasterAndData = paymasterAndData
        self.validAfter = validAfter
        self.validUntil = validUntil
        self.entryPoint = entryPoint
    }
}

#if compiler(>=6)
extension SafeOp: Sendable {}
#endif


extension SafeOp: Equatable, Hashable {
    public static func ==(lhs: SafeOp, rhs: SafeOp) -> Bool {
        if lhs.safe != rhs.safe {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.initCode != rhs.initCode {
            return false
        }
        if lhs.callData != rhs.callData {
            return false
        }
        if lhs.verificationGasLimit != rhs.verificationGasLimit {
            return false
        }
        if lhs.callGasLimit != rhs.callGasLimit {
            return false
        }
        if lhs.preVerificationGas != rhs.preVerificationGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.paymasterAndData != rhs.paymasterAndData {
            return false
        }
        if lhs.validAfter != rhs.validAfter {
            return false
        }
        if lhs.validUntil != rhs.validUntil {
            return false
        }
        if lhs.entryPoint != rhs.entryPoint {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(safe)
        hasher.combine(nonce)
        hasher.combine(initCode)
        hasher.combine(callData)
        hasher.combine(verificationGasLimit)
        hasher.combine(callGasLimit)
        hasher.combine(preVerificationGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(maxFeePerGas)
        hasher.combine(paymasterAndData)
        hasher.combine(validAfter)
        hasher.combine(validUntil)
        hasher.combine(entryPoint)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSafeOp: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SafeOp {
        return
            try SafeOp(
                safe: FfiConverterTypeAddress.read(from: &buf), 
                nonce: FfiConverterTypeU256.read(from: &buf), 
                initCode: FfiConverterTypeBytes.read(from: &buf), 
                callData: FfiConverterTypeBytes.read(from: &buf), 
                verificationGasLimit: FfiConverterTypeU128Primitive.read(from: &buf), 
                callGasLimit: FfiConverterTypeU128Primitive.read(from: &buf), 
                preVerificationGas: FfiConverterTypeU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeU128Primitive.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeU128Primitive.read(from: &buf), 
                paymasterAndData: FfiConverterTypeBytes.read(from: &buf), 
                validAfter: FfiConverterTypeU48.read(from: &buf), 
                validUntil: FfiConverterTypeU48.read(from: &buf), 
                entryPoint: FfiConverterTypeAddress.read(from: &buf)
        )
    }

    public static func write(_ value: SafeOp, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.safe, into: &buf)
        FfiConverterTypeU256.write(value.nonce, into: &buf)
        FfiConverterTypeBytes.write(value.initCode, into: &buf)
        FfiConverterTypeBytes.write(value.callData, into: &buf)
        FfiConverterTypeU128Primitive.write(value.verificationGasLimit, into: &buf)
        FfiConverterTypeU128Primitive.write(value.callGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.preVerificationGas, into: &buf)
        FfiConverterTypeU128Primitive.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterTypeU128Primitive.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeBytes.write(value.paymasterAndData, into: &buf)
        FfiConverterTypeU48.write(value.validAfter, into: &buf)
        FfiConverterTypeU48.write(value.validUntil, into: &buf)
        FfiConverterTypeAddress.write(value.entryPoint, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lift(_ buf: RustBuffer) throws -> SafeOp {
    return try FfiConverterTypeSafeOp.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSafeOp_lower(_ value: SafeOp) -> RustBuffer {
    return FfiConverterTypeSafeOp.lower(value)
}


public struct SessionDelete {
    public var code: UInt64
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(code: UInt64, message: String) {
        self.code = code
        self.message = message
    }
}

#if compiler(>=6)
extension SessionDelete: Sendable {}
#endif


extension SessionDelete: Equatable, Hashable {
    public static func ==(lhs: SessionDelete, rhs: SessionDelete) -> Bool {
        if lhs.code != rhs.code {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(code)
        hasher.combine(message)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionDelete: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionDelete {
        return
            try SessionDelete(
                code: FfiConverterUInt64.read(from: &buf), 
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SessionDelete, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.code, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionDelete_lift(_ buf: RustBuffer) throws -> SessionDelete {
    return try FfiConverterTypeSessionDelete.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionDelete_lower(_ value: SessionDelete) -> RustBuffer {
    return FfiConverterTypeSessionDelete.lower(value)
}


public struct SessionDeleteJsonRpc {
    public var id: UInt64
    public var jsonrpc: String
    public var method: String
    public var params: SessionDelete

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, jsonrpc: String, method: String, params: SessionDelete) {
        self.id = id
        self.jsonrpc = jsonrpc
        self.method = method
        self.params = params
    }
}

#if compiler(>=6)
extension SessionDeleteJsonRpc: Sendable {}
#endif


extension SessionDeleteJsonRpc: Equatable, Hashable {
    public static func ==(lhs: SessionDeleteJsonRpc, rhs: SessionDeleteJsonRpc) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.jsonrpc != rhs.jsonrpc {
            return false
        }
        if lhs.method != rhs.method {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(jsonrpc)
        hasher.combine(method)
        hasher.combine(params)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionDeleteJsonRpc: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionDeleteJsonRpc {
        return
            try SessionDeleteJsonRpc(
                id: FfiConverterUInt64.read(from: &buf), 
                jsonrpc: FfiConverterString.read(from: &buf), 
                method: FfiConverterString.read(from: &buf), 
                params: FfiConverterTypeSessionDelete.read(from: &buf)
        )
    }

    public static func write(_ value: SessionDeleteJsonRpc, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.jsonrpc, into: &buf)
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterTypeSessionDelete.write(value.params, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionDeleteJsonRpc_lift(_ buf: RustBuffer) throws -> SessionDeleteJsonRpc {
    return try FfiConverterTypeSessionDeleteJsonRpc.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionDeleteJsonRpc_lower(_ value: SessionDeleteJsonRpc) -> RustBuffer {
    return FfiConverterTypeSessionDeleteJsonRpc.lower(value)
}


public struct SessionFfi {
    public var requestId: UInt64
    public var sessionSymKey: Data
    public var selfPublicKey: Data
    public var topic: Topic
    public var expiry: UInt64
    public var relayProtocol: String
    public var relayData: String?
    public var controllerKey: Data?
    public var selfMetaData: Metadata
    public var peerPublicKey: Data?
    public var peerMetaData: Metadata?
    public var sessionNamespaces: [String: SettleNamespace]
    public var requiredNamespaces: [String: ProposalNamespace]
    public var optionalNamespaces: [String: ProposalNamespace]?
    public var properties: [String: String]?
    public var scopedProperties: [String: String]?
    public var isAcknowledged: Bool
    public var pairingTopic: String
    public var transportType: TransportType?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(requestId: UInt64, sessionSymKey: Data, selfPublicKey: Data, topic: Topic, expiry: UInt64, relayProtocol: String, relayData: String?, controllerKey: Data?, selfMetaData: Metadata, peerPublicKey: Data?, peerMetaData: Metadata?, sessionNamespaces: [String: SettleNamespace], requiredNamespaces: [String: ProposalNamespace], optionalNamespaces: [String: ProposalNamespace]?, properties: [String: String]?, scopedProperties: [String: String]?, isAcknowledged: Bool, pairingTopic: String, transportType: TransportType?) {
        self.requestId = requestId
        self.sessionSymKey = sessionSymKey
        self.selfPublicKey = selfPublicKey
        self.topic = topic
        self.expiry = expiry
        self.relayProtocol = relayProtocol
        self.relayData = relayData
        self.controllerKey = controllerKey
        self.selfMetaData = selfMetaData
        self.peerPublicKey = peerPublicKey
        self.peerMetaData = peerMetaData
        self.sessionNamespaces = sessionNamespaces
        self.requiredNamespaces = requiredNamespaces
        self.optionalNamespaces = optionalNamespaces
        self.properties = properties
        self.scopedProperties = scopedProperties
        self.isAcknowledged = isAcknowledged
        self.pairingTopic = pairingTopic
        self.transportType = transportType
    }
}

#if compiler(>=6)
extension SessionFfi: Sendable {}
#endif


extension SessionFfi: Equatable, Hashable {
    public static func ==(lhs: SessionFfi, rhs: SessionFfi) -> Bool {
        if lhs.requestId != rhs.requestId {
            return false
        }
        if lhs.sessionSymKey != rhs.sessionSymKey {
            return false
        }
        if lhs.selfPublicKey != rhs.selfPublicKey {
            return false
        }
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.relayProtocol != rhs.relayProtocol {
            return false
        }
        if lhs.relayData != rhs.relayData {
            return false
        }
        if lhs.controllerKey != rhs.controllerKey {
            return false
        }
        if lhs.selfMetaData != rhs.selfMetaData {
            return false
        }
        if lhs.peerPublicKey != rhs.peerPublicKey {
            return false
        }
        if lhs.peerMetaData != rhs.peerMetaData {
            return false
        }
        if lhs.sessionNamespaces != rhs.sessionNamespaces {
            return false
        }
        if lhs.requiredNamespaces != rhs.requiredNamespaces {
            return false
        }
        if lhs.optionalNamespaces != rhs.optionalNamespaces {
            return false
        }
        if lhs.properties != rhs.properties {
            return false
        }
        if lhs.scopedProperties != rhs.scopedProperties {
            return false
        }
        if lhs.isAcknowledged != rhs.isAcknowledged {
            return false
        }
        if lhs.pairingTopic != rhs.pairingTopic {
            return false
        }
        if lhs.transportType != rhs.transportType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(requestId)
        hasher.combine(sessionSymKey)
        hasher.combine(selfPublicKey)
        hasher.combine(topic)
        hasher.combine(expiry)
        hasher.combine(relayProtocol)
        hasher.combine(relayData)
        hasher.combine(controllerKey)
        hasher.combine(selfMetaData)
        hasher.combine(peerPublicKey)
        hasher.combine(peerMetaData)
        hasher.combine(sessionNamespaces)
        hasher.combine(requiredNamespaces)
        hasher.combine(optionalNamespaces)
        hasher.combine(properties)
        hasher.combine(scopedProperties)
        hasher.combine(isAcknowledged)
        hasher.combine(pairingTopic)
        hasher.combine(transportType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionFfi {
        return
            try SessionFfi(
                requestId: FfiConverterUInt64.read(from: &buf), 
                sessionSymKey: FfiConverterData.read(from: &buf), 
                selfPublicKey: FfiConverterData.read(from: &buf), 
                topic: FfiConverterTypeTopic.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                relayProtocol: FfiConverterString.read(from: &buf), 
                relayData: FfiConverterOptionString.read(from: &buf), 
                controllerKey: FfiConverterOptionData.read(from: &buf), 
                selfMetaData: FfiConverterTypeMetadata.read(from: &buf), 
                peerPublicKey: FfiConverterOptionData.read(from: &buf), 
                peerMetaData: FfiConverterOptionTypeMetadata.read(from: &buf), 
                sessionNamespaces: FfiConverterDictionaryStringTypeSettleNamespace.read(from: &buf), 
                requiredNamespaces: FfiConverterDictionaryStringTypeProposalNamespace.read(from: &buf), 
                optionalNamespaces: FfiConverterOptionDictionaryStringTypeProposalNamespace.read(from: &buf), 
                properties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                scopedProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                isAcknowledged: FfiConverterBool.read(from: &buf), 
                pairingTopic: FfiConverterString.read(from: &buf), 
                transportType: FfiConverterOptionTypeTransportType.read(from: &buf)
        )
    }

    public static func write(_ value: SessionFfi, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.requestId, into: &buf)
        FfiConverterData.write(value.sessionSymKey, into: &buf)
        FfiConverterData.write(value.selfPublicKey, into: &buf)
        FfiConverterTypeTopic.write(value.topic, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterString.write(value.relayProtocol, into: &buf)
        FfiConverterOptionString.write(value.relayData, into: &buf)
        FfiConverterOptionData.write(value.controllerKey, into: &buf)
        FfiConverterTypeMetadata.write(value.selfMetaData, into: &buf)
        FfiConverterOptionData.write(value.peerPublicKey, into: &buf)
        FfiConverterOptionTypeMetadata.write(value.peerMetaData, into: &buf)
        FfiConverterDictionaryStringTypeSettleNamespace.write(value.sessionNamespaces, into: &buf)
        FfiConverterDictionaryStringTypeProposalNamespace.write(value.requiredNamespaces, into: &buf)
        FfiConverterOptionDictionaryStringTypeProposalNamespace.write(value.optionalNamespaces, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.properties, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.scopedProperties, into: &buf)
        FfiConverterBool.write(value.isAcknowledged, into: &buf)
        FfiConverterString.write(value.pairingTopic, into: &buf)
        FfiConverterOptionTypeTransportType.write(value.transportType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionFfi_lift(_ buf: RustBuffer) throws -> SessionFfi {
    return try FfiConverterTypeSessionFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionFfi_lower(_ value: SessionFfi) -> RustBuffer {
    return FfiConverterTypeSessionFfi.lower(value)
}


public struct SessionProposalFfi {
    public var id: String
    public var topic: String
    public var pairingSymKey: Data
    public var proposerPublicKey: Data
    public var relays: [Relay]
    public var requiredNamespaces: [String: ProposalNamespace]
    public var optionalNamespaces: [String: ProposalNamespace]?
    public var metadata: Metadata
    public var sessionProperties: [String: String]?
    public var scopedProperties: [String: String]?
    public var expiryTimestamp: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, topic: String, pairingSymKey: Data, proposerPublicKey: Data, relays: [Relay], requiredNamespaces: [String: ProposalNamespace], optionalNamespaces: [String: ProposalNamespace]?, metadata: Metadata, sessionProperties: [String: String]?, scopedProperties: [String: String]?, expiryTimestamp: UInt64?) {
        self.id = id
        self.topic = topic
        self.pairingSymKey = pairingSymKey
        self.proposerPublicKey = proposerPublicKey
        self.relays = relays
        self.requiredNamespaces = requiredNamespaces
        self.optionalNamespaces = optionalNamespaces
        self.metadata = metadata
        self.sessionProperties = sessionProperties
        self.scopedProperties = scopedProperties
        self.expiryTimestamp = expiryTimestamp
    }
}

#if compiler(>=6)
extension SessionProposalFfi: Sendable {}
#endif


extension SessionProposalFfi: Equatable, Hashable {
    public static func ==(lhs: SessionProposalFfi, rhs: SessionProposalFfi) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.topic != rhs.topic {
            return false
        }
        if lhs.pairingSymKey != rhs.pairingSymKey {
            return false
        }
        if lhs.proposerPublicKey != rhs.proposerPublicKey {
            return false
        }
        if lhs.relays != rhs.relays {
            return false
        }
        if lhs.requiredNamespaces != rhs.requiredNamespaces {
            return false
        }
        if lhs.optionalNamespaces != rhs.optionalNamespaces {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        if lhs.sessionProperties != rhs.sessionProperties {
            return false
        }
        if lhs.scopedProperties != rhs.scopedProperties {
            return false
        }
        if lhs.expiryTimestamp != rhs.expiryTimestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(topic)
        hasher.combine(pairingSymKey)
        hasher.combine(proposerPublicKey)
        hasher.combine(relays)
        hasher.combine(requiredNamespaces)
        hasher.combine(optionalNamespaces)
        hasher.combine(metadata)
        hasher.combine(sessionProperties)
        hasher.combine(scopedProperties)
        hasher.combine(expiryTimestamp)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionProposalFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionProposalFfi {
        return
            try SessionProposalFfi(
                id: FfiConverterString.read(from: &buf), 
                topic: FfiConverterString.read(from: &buf), 
                pairingSymKey: FfiConverterData.read(from: &buf), 
                proposerPublicKey: FfiConverterData.read(from: &buf), 
                relays: FfiConverterSequenceTypeRelay.read(from: &buf), 
                requiredNamespaces: FfiConverterDictionaryStringTypeProposalNamespace.read(from: &buf), 
                optionalNamespaces: FfiConverterOptionDictionaryStringTypeProposalNamespace.read(from: &buf), 
                metadata: FfiConverterTypeMetadata.read(from: &buf), 
                sessionProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                scopedProperties: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                expiryTimestamp: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: SessionProposalFfi, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.topic, into: &buf)
        FfiConverterData.write(value.pairingSymKey, into: &buf)
        FfiConverterData.write(value.proposerPublicKey, into: &buf)
        FfiConverterSequenceTypeRelay.write(value.relays, into: &buf)
        FfiConverterDictionaryStringTypeProposalNamespace.write(value.requiredNamespaces, into: &buf)
        FfiConverterOptionDictionaryStringTypeProposalNamespace.write(value.optionalNamespaces, into: &buf)
        FfiConverterTypeMetadata.write(value.metadata, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.sessionProperties, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.scopedProperties, into: &buf)
        FfiConverterOptionUInt64.write(value.expiryTimestamp, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionProposalFfi_lift(_ buf: RustBuffer) throws -> SessionProposalFfi {
    return try FfiConverterTypeSessionProposalFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionProposalFfi_lower(_ value: SessionProposalFfi) -> RustBuffer {
    return FfiConverterTypeSessionProposalFfi.lower(value)
}


public struct SessionRequestFfi {
    public var chainId: String
    public var request: SessionRequestRequestFfi

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, request: SessionRequestRequestFfi) {
        self.chainId = chainId
        self.request = request
    }
}

#if compiler(>=6)
extension SessionRequestFfi: Sendable {}
#endif


extension SessionRequestFfi: Equatable, Hashable {
    public static func ==(lhs: SessionRequestFfi, rhs: SessionRequestFfi) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.request != rhs.request {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(request)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestFfi {
        return
            try SessionRequestFfi(
                chainId: FfiConverterString.read(from: &buf), 
                request: FfiConverterTypeSessionRequestRequestFfi.read(from: &buf)
        )
    }

    public static func write(_ value: SessionRequestFfi, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeSessionRequestRequestFfi.write(value.request, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestFfi_lift(_ buf: RustBuffer) throws -> SessionRequestFfi {
    return try FfiConverterTypeSessionRequestFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestFfi_lower(_ value: SessionRequestFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestFfi.lower(value)
}


public struct SessionRequestJsonRpcErrorResponseFfi {
    public var id: UInt64
    public var jsonrpc: String
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, jsonrpc: String, error: String) {
        self.id = id
        self.jsonrpc = jsonrpc
        self.error = error
    }
}

#if compiler(>=6)
extension SessionRequestJsonRpcErrorResponseFfi: Sendable {}
#endif


extension SessionRequestJsonRpcErrorResponseFfi: Equatable, Hashable {
    public static func ==(lhs: SessionRequestJsonRpcErrorResponseFfi, rhs: SessionRequestJsonRpcErrorResponseFfi) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.jsonrpc != rhs.jsonrpc {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(jsonrpc)
        hasher.combine(error)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestJsonRpcErrorResponseFfi {
        return
            try SessionRequestJsonRpcErrorResponseFfi(
                id: FfiConverterUInt64.read(from: &buf), 
                jsonrpc: FfiConverterString.read(from: &buf), 
                error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SessionRequestJsonRpcErrorResponseFfi, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.jsonrpc, into: &buf)
        FfiConverterString.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi_lift(_ buf: RustBuffer) throws -> SessionRequestJsonRpcErrorResponseFfi {
    return try FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi_lower(_ value: SessionRequestJsonRpcErrorResponseFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi.lower(value)
}


public struct SessionRequestJsonRpcFfi {
    public var id: UInt64
    public var method: String
    public var params: SessionRequestFfi

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, method: String, params: SessionRequestFfi) {
        self.id = id
        self.method = method
        self.params = params
    }
}

#if compiler(>=6)
extension SessionRequestJsonRpcFfi: Sendable {}
#endif


extension SessionRequestJsonRpcFfi: Equatable, Hashable {
    public static func ==(lhs: SessionRequestJsonRpcFfi, rhs: SessionRequestJsonRpcFfi) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.method != rhs.method {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(method)
        hasher.combine(params)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestJsonRpcFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestJsonRpcFfi {
        return
            try SessionRequestJsonRpcFfi(
                id: FfiConverterUInt64.read(from: &buf), 
                method: FfiConverterString.read(from: &buf), 
                params: FfiConverterTypeSessionRequestFfi.read(from: &buf)
        )
    }

    public static func write(_ value: SessionRequestJsonRpcFfi, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterTypeSessionRequestFfi.write(value.params, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcFfi_lift(_ buf: RustBuffer) throws -> SessionRequestJsonRpcFfi {
    return try FfiConverterTypeSessionRequestJsonRpcFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcFfi_lower(_ value: SessionRequestJsonRpcFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestJsonRpcFfi.lower(value)
}


public struct SessionRequestJsonRpcResultResponseFfi {
    public var id: UInt64
    public var jsonrpc: String
    public var result: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, jsonrpc: String, result: String) {
        self.id = id
        self.jsonrpc = jsonrpc
        self.result = result
    }
}

#if compiler(>=6)
extension SessionRequestJsonRpcResultResponseFfi: Sendable {}
#endif


extension SessionRequestJsonRpcResultResponseFfi: Equatable, Hashable {
    public static func ==(lhs: SessionRequestJsonRpcResultResponseFfi, rhs: SessionRequestJsonRpcResultResponseFfi) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.jsonrpc != rhs.jsonrpc {
            return false
        }
        if lhs.result != rhs.result {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(jsonrpc)
        hasher.combine(result)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestJsonRpcResultResponseFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestJsonRpcResultResponseFfi {
        return
            try SessionRequestJsonRpcResultResponseFfi(
                id: FfiConverterUInt64.read(from: &buf), 
                jsonrpc: FfiConverterString.read(from: &buf), 
                result: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SessionRequestJsonRpcResultResponseFfi, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.jsonrpc, into: &buf)
        FfiConverterString.write(value.result, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcResultResponseFfi_lift(_ buf: RustBuffer) throws -> SessionRequestJsonRpcResultResponseFfi {
    return try FfiConverterTypeSessionRequestJsonRpcResultResponseFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcResultResponseFfi_lower(_ value: SessionRequestJsonRpcResultResponseFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestJsonRpcResultResponseFfi.lower(value)
}


public struct SessionRequestRequestFfi {
    public var method: String
    public var params: String
    public var expiry: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(method: String, params: String, expiry: UInt64?) {
        self.method = method
        self.params = params
        self.expiry = expiry
    }
}

#if compiler(>=6)
extension SessionRequestRequestFfi: Sendable {}
#endif


extension SessionRequestRequestFfi: Equatable, Hashable {
    public static func ==(lhs: SessionRequestRequestFfi, rhs: SessionRequestRequestFfi) -> Bool {
        if lhs.method != rhs.method {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(params)
        hasher.combine(expiry)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestRequestFfi: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestRequestFfi {
        return
            try SessionRequestRequestFfi(
                method: FfiConverterString.read(from: &buf), 
                params: FfiConverterString.read(from: &buf), 
                expiry: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: SessionRequestRequestFfi, into buf: inout [UInt8]) {
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterString.write(value.params, into: &buf)
        FfiConverterOptionUInt64.write(value.expiry, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestRequestFfi_lift(_ buf: RustBuffer) throws -> SessionRequestRequestFfi {
    return try FfiConverterTypeSessionRequestRequestFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestRequestFfi_lower(_ value: SessionRequestRequestFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestRequestFfi.lower(value)
}


public struct SettleNamespace {
    public var accounts: [String]
    public var methods: [String]
    public var events: [String]
    public var chains: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(accounts: [String], methods: [String], events: [String], chains: [String]) {
        self.accounts = accounts
        self.methods = methods
        self.events = events
        self.chains = chains
    }
}

#if compiler(>=6)
extension SettleNamespace: Sendable {}
#endif


extension SettleNamespace: Equatable, Hashable {
    public static func ==(lhs: SettleNamespace, rhs: SettleNamespace) -> Bool {
        if lhs.accounts != rhs.accounts {
            return false
        }
        if lhs.methods != rhs.methods {
            return false
        }
        if lhs.events != rhs.events {
            return false
        }
        if lhs.chains != rhs.chains {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accounts)
        hasher.combine(methods)
        hasher.combine(events)
        hasher.combine(chains)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSettleNamespace: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SettleNamespace {
        return
            try SettleNamespace(
                accounts: FfiConverterSequenceString.read(from: &buf), 
                methods: FfiConverterSequenceString.read(from: &buf), 
                events: FfiConverterSequenceString.read(from: &buf), 
                chains: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: SettleNamespace, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.accounts, into: &buf)
        FfiConverterSequenceString.write(value.methods, into: &buf)
        FfiConverterSequenceString.write(value.events, into: &buf)
        FfiConverterSequenceString.write(value.chains, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSettleNamespace_lift(_ buf: RustBuffer) throws -> SettleNamespace {
    return try FfiConverterTypeSettleNamespace.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSettleNamespace_lower(_ value: SettleNamespace) -> RustBuffer {
    return FfiConverterTypeSettleNamespace.lower(value)
}


public struct SignOutputObject {
    public var toSign: SignOutputToSign
    public var signStep3Params: SignStep3Params

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(toSign: SignOutputToSign, signStep3Params: SignStep3Params) {
        self.toSign = toSign
        self.signStep3Params = signStep3Params
    }
}

#if compiler(>=6)
extension SignOutputObject: Sendable {}
#endif


extension SignOutputObject: Equatable, Hashable {
    public static func ==(lhs: SignOutputObject, rhs: SignOutputObject) -> Bool {
        if lhs.toSign != rhs.toSign {
            return false
        }
        if lhs.signStep3Params != rhs.signStep3Params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(toSign)
        hasher.combine(signStep3Params)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputObject: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputObject {
        return
            try SignOutputObject(
                toSign: FfiConverterTypeSignOutputToSign.read(from: &buf), 
                signStep3Params: FfiConverterTypeSignStep3Params.read(from: &buf)
        )
    }

    public static func write(_ value: SignOutputObject, into buf: inout [UInt8]) {
        FfiConverterTypeSignOutputToSign.write(value.toSign, into: &buf)
        FfiConverterTypeSignStep3Params.write(value.signStep3Params, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputObject_lift(_ buf: RustBuffer) throws -> SignOutputObject {
    return try FfiConverterTypeSignOutputObject.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputObject_lower(_ value: SignOutputObject) -> RustBuffer {
    return FfiConverterTypeSignOutputObject.lower(value)
}


public struct SignOutputToSign {
    public var hash: B256
    public var safeOp: SafeOp
    public var domain: Eip712Domain

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: B256, safeOp: SafeOp, domain: Eip712Domain) {
        self.hash = hash
        self.safeOp = safeOp
        self.domain = domain
    }
}

#if compiler(>=6)
extension SignOutputToSign: Sendable {}
#endif


extension SignOutputToSign: Equatable, Hashable {
    public static func ==(lhs: SignOutputToSign, rhs: SignOutputToSign) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.safeOp != rhs.safeOp {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(safeOp)
        hasher.combine(domain)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputToSign: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputToSign {
        return
            try SignOutputToSign(
                hash: FfiConverterTypeB256.read(from: &buf), 
                safeOp: FfiConverterTypeSafeOp.read(from: &buf), 
                domain: FfiConverterTypeEip712Domain.read(from: &buf)
        )
    }

    public static func write(_ value: SignOutputToSign, into buf: inout [UInt8]) {
        FfiConverterTypeB256.write(value.hash, into: &buf)
        FfiConverterTypeSafeOp.write(value.safeOp, into: &buf)
        FfiConverterTypeEip712Domain.write(value.domain, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lift(_ buf: RustBuffer) throws -> SignOutputToSign {
    return try FfiConverterTypeSignOutputToSign.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputToSign_lower(_ value: SignOutputToSign) -> RustBuffer {
    return FfiConverterTypeSignOutputToSign.lower(value)
}


public struct SignStep3Params {
    public var signature: Bytes
    public var doSendTransactionParams: DoSendTransactionParams

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(signature: Bytes, doSendTransactionParams: DoSendTransactionParams) {
        self.signature = signature
        self.doSendTransactionParams = doSendTransactionParams
    }
}

#if compiler(>=6)
extension SignStep3Params: Sendable {}
#endif


extension SignStep3Params: Equatable, Hashable {
    public static func ==(lhs: SignStep3Params, rhs: SignStep3Params) -> Bool {
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.doSendTransactionParams != rhs.doSendTransactionParams {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signature)
        hasher.combine(doSendTransactionParams)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignStep3Params: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignStep3Params {
        return
            try SignStep3Params(
                signature: FfiConverterTypeBytes.read(from: &buf), 
                doSendTransactionParams: FfiConverterTypeDoSendTransactionParams.read(from: &buf)
        )
    }

    public static func write(_ value: SignStep3Params, into buf: inout [UInt8]) {
        FfiConverterTypeBytes.write(value.signature, into: &buf)
        FfiConverterTypeDoSendTransactionParams.write(value.doSendTransactionParams, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lift(_ buf: RustBuffer) throws -> SignStep3Params {
    return try FfiConverterTypeSignStep3Params.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignStep3Params_lower(_ value: SignStep3Params) -> RustBuffer {
    return FfiConverterTypeSignStep3Params.lower(value)
}


public struct UserOperationV07 {
    public var sender: AccountAddress
    public var nonce: U256
    public var factory: Address?
    public var factoryData: Bytes?
    public var callData: Bytes
    public var callGasLimit: U256
    public var verificationGasLimit: U256
    public var preVerificationGas: U256
    public var maxFeePerGas: U256
    public var maxPriorityFeePerGas: U256
    public var paymaster: Address?
    public var paymasterVerificationGasLimit: U256?
    public var paymasterPostOpGasLimit: U256?
    public var paymasterData: Bytes?
    public var signature: Bytes

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sender: AccountAddress, nonce: U256, factory: Address?, factoryData: Bytes?, callData: Bytes, callGasLimit: U256, verificationGasLimit: U256, preVerificationGas: U256, maxFeePerGas: U256, maxPriorityFeePerGas: U256, paymaster: Address?, paymasterVerificationGasLimit: U256?, paymasterPostOpGasLimit: U256?, paymasterData: Bytes?, signature: Bytes) {
        self.sender = sender
        self.nonce = nonce
        self.factory = factory
        self.factoryData = factoryData
        self.callData = callData
        self.callGasLimit = callGasLimit
        self.verificationGasLimit = verificationGasLimit
        self.preVerificationGas = preVerificationGas
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.paymaster = paymaster
        self.paymasterVerificationGasLimit = paymasterVerificationGasLimit
        self.paymasterPostOpGasLimit = paymasterPostOpGasLimit
        self.paymasterData = paymasterData
        self.signature = signature
    }
}

#if compiler(>=6)
extension UserOperationV07: Sendable {}
#endif


extension UserOperationV07: Equatable, Hashable {
    public static func ==(lhs: UserOperationV07, rhs: UserOperationV07) -> Bool {
        if lhs.sender != rhs.sender {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.factory != rhs.factory {
            return false
        }
        if lhs.factoryData != rhs.factoryData {
            return false
        }
        if lhs.callData != rhs.callData {
            return false
        }
        if lhs.callGasLimit != rhs.callGasLimit {
            return false
        }
        if lhs.verificationGasLimit != rhs.verificationGasLimit {
            return false
        }
        if lhs.preVerificationGas != rhs.preVerificationGas {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        if lhs.paymasterVerificationGasLimit != rhs.paymasterVerificationGasLimit {
            return false
        }
        if lhs.paymasterPostOpGasLimit != rhs.paymasterPostOpGasLimit {
            return false
        }
        if lhs.paymasterData != rhs.paymasterData {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sender)
        hasher.combine(nonce)
        hasher.combine(factory)
        hasher.combine(factoryData)
        hasher.combine(callData)
        hasher.combine(callGasLimit)
        hasher.combine(verificationGasLimit)
        hasher.combine(preVerificationGas)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
        hasher.combine(paymaster)
        hasher.combine(paymasterVerificationGasLimit)
        hasher.combine(paymasterPostOpGasLimit)
        hasher.combine(paymasterData)
        hasher.combine(signature)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationV07: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationV07 {
        return
            try UserOperationV07(
                sender: FfiConverterTypeAccountAddress.read(from: &buf), 
                nonce: FfiConverterTypeU256.read(from: &buf), 
                factory: FfiConverterOptionTypeAddress.read(from: &buf), 
                factoryData: FfiConverterOptionTypeBytes.read(from: &buf), 
                callData: FfiConverterTypeBytes.read(from: &buf), 
                callGasLimit: FfiConverterTypeU256.read(from: &buf), 
                verificationGasLimit: FfiConverterTypeU256.read(from: &buf), 
                preVerificationGas: FfiConverterTypeU256.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeU256.read(from: &buf), 
                paymaster: FfiConverterOptionTypeAddress.read(from: &buf), 
                paymasterVerificationGasLimit: FfiConverterOptionTypeU256.read(from: &buf), 
                paymasterPostOpGasLimit: FfiConverterOptionTypeU256.read(from: &buf), 
                paymasterData: FfiConverterOptionTypeBytes.read(from: &buf), 
                signature: FfiConverterTypeBytes.read(from: &buf)
        )
    }

    public static func write(_ value: UserOperationV07, into buf: inout [UInt8]) {
        FfiConverterTypeAccountAddress.write(value.sender, into: &buf)
        FfiConverterTypeU256.write(value.nonce, into: &buf)
        FfiConverterOptionTypeAddress.write(value.factory, into: &buf)
        FfiConverterOptionTypeBytes.write(value.factoryData, into: &buf)
        FfiConverterTypeBytes.write(value.callData, into: &buf)
        FfiConverterTypeU256.write(value.callGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.verificationGasLimit, into: &buf)
        FfiConverterTypeU256.write(value.preVerificationGas, into: &buf)
        FfiConverterTypeU256.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeU256.write(value.maxPriorityFeePerGas, into: &buf)
        FfiConverterOptionTypeAddress.write(value.paymaster, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterVerificationGasLimit, into: &buf)
        FfiConverterOptionTypeU256.write(value.paymasterPostOpGasLimit, into: &buf)
        FfiConverterOptionTypeBytes.write(value.paymasterData, into: &buf)
        FfiConverterTypeBytes.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lift(_ buf: RustBuffer) throws -> UserOperationV07 {
    return try FfiConverterTypeUserOperationV07.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationV07_lower(_ value: UserOperationV07) -> RustBuffer {
    return FfiConverterTypeUserOperationV07.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AddressOrNative {
    
    case addressVariant(Address
    )
    case native
}


#if compiler(>=6)
extension AddressOrNative: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = AddressOrNative

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressOrNative {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .addressVariant(try FfiConverterTypeAddress.read(from: &buf)
        )
        
        case 2: return .native
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressOrNative, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .addressVariant(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAddress.write(v1, into: &buf)
            
        
        case .native:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressOrNative_lift(_ buf: RustBuffer) throws -> AddressOrNative {
    return try FfiConverterTypeAddressOrNative.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressOrNative_lower(_ value: AddressOrNative) -> RustBuffer {
    return FfiConverterTypeAddressOrNative.lower(value)
}


extension AddressOrNative: Equatable, Hashable {}







public enum ApproveError: Swift.Error {

    
    
    case Request(RequestError
    )
    case Internal(String
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeApproveError: FfiConverterRustBuffer {
    typealias SwiftType = ApproveError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ApproveError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 2: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ApproveError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Request(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .Internal(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApproveError_lift(_ buf: RustBuffer) throws -> ApproveError {
    return try FfiConverterTypeApproveError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApproveError_lower(_ value: ApproveError) -> RustBuffer {
    return FfiConverterTypeApproveError.lower(value)
}


extension ApproveError: Equatable, Hashable {}




extension ApproveError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AssetFfi {
    
    case native(address: AddressOrNative, balance: U256, metadata: NativeMetadata
    )
    case erc20(address: AddressOrNative, balance: U256, metadata: Erc20Metadata
    )
    case erc721(address: AddressOrNative, balance: U256, metadata: Erc721Metadata
    )
}


#if compiler(>=6)
extension AssetFfi: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetFfi: FfiConverterRustBuffer {
    typealias SwiftType = AssetFfi

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetFfi {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .native(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeNativeMetadata.read(from: &buf)
        )
        
        case 2: return .erc20(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeErc20Metadata.read(from: &buf)
        )
        
        case 3: return .erc721(address: try FfiConverterTypeAddressOrNative.read(from: &buf), balance: try FfiConverterTypeU256.read(from: &buf), metadata: try FfiConverterTypeErc721Metadata.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AssetFfi, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .native(address,balance,metadata):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeNativeMetadata.write(metadata, into: &buf)
            
        
        case let .erc20(address,balance,metadata):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeErc20Metadata.write(metadata, into: &buf)
            
        
        case let .erc721(address,balance,metadata):
            writeInt(&buf, Int32(3))
            FfiConverterTypeAddressOrNative.write(address, into: &buf)
            FfiConverterTypeU256.write(balance, into: &buf)
            FfiConverterTypeErc721Metadata.write(metadata, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetFfi_lift(_ buf: RustBuffer) throws -> AssetFfi {
    return try FfiConverterTypeAssetFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetFfi_lower(_ value: AssetFfi) -> RustBuffer {
    return FfiConverterTypeAssetFfi.lower(value)
}


extension AssetFfi: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AssetType {
    
    case native
    case erc20
    case erc721
}


#if compiler(>=6)
extension AssetType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = AssetType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .native
        
        case 2: return .erc20
        
        case 3: return .erc721
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AssetType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .native:
            writeInt(&buf, Int32(1))
        
        
        case .erc20:
            writeInt(&buf, Int32(2))
        
        
        case .erc721:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lift(_ buf: RustBuffer) throws -> AssetType {
    return try FfiConverterTypeAssetType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lower(_ value: AssetType) -> RustBuffer {
    return FfiConverterTypeAssetType.lower(value)
}


extension AssetType: Equatable, Hashable {}







public enum ConnectError: Swift.Error {

    
    
    case Request(RequestError
    )
    case Internal(String
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectError: FfiConverterRustBuffer {
    typealias SwiftType = ConnectError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 2: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Request(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .Internal(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectError_lift(_ buf: RustBuffer) throws -> ConnectError {
    return try FfiConverterTypeConnectError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectError_lower(_ value: ConnectError) -> RustBuffer {
    return FfiConverterTypeConnectError.lower(value)
}


extension ConnectError: Equatable, Hashable {}




extension ConnectError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum DisconnectError: Swift.Error {

    
    
    case Storage(StorageError
    )
    case ShouldNeverHappen(String
    )
    case Request(RequestError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDisconnectError: FfiConverterRustBuffer {
    typealias SwiftType = DisconnectError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DisconnectError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Storage(
            try FfiConverterTypeStorageError.read(from: &buf)
            )
        case 2: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DisconnectError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Storage(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStorageError.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Request(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDisconnectError_lift(_ buf: RustBuffer) throws -> DisconnectError {
    return try FfiConverterTypeDisconnectError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDisconnectError_lower(_ value: DisconnectError) -> RustBuffer {
    return FfiConverterTypeDisconnectError.lower(value)
}


extension DisconnectError: Equatable, Hashable {}




extension DisconnectError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum Erc6492Error: Swift.Error {

    
    
    case RpcError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Error: FfiConverterRustBuffer {
    typealias SwiftType = Erc6492Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .RpcError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Erc6492Error, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .RpcError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Error_lift(_ buf: RustBuffer) throws -> Erc6492Error {
    return try FfiConverterTypeErc6492Error.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Error_lower(_ value: Erc6492Error) -> RustBuffer {
    return FfiConverterTypeErc6492Error.lower(value)
}


extension Erc6492Error: Equatable, Hashable {}




extension Erc6492Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum ExtendError: Swift.Error {

    
    
    case Storage(StorageError
    )
    case SessionNotFound
    case InvalidExpiry
    case Request(RequestError
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExtendError: FfiConverterRustBuffer {
    typealias SwiftType = ExtendError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExtendError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Storage(
            try FfiConverterTypeStorageError.read(from: &buf)
            )
        case 2: return .SessionNotFound
        case 3: return .InvalidExpiry
        case 4: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 5: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExtendError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Storage(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStorageError.write(v1, into: &buf)
            
        
        case .SessionNotFound:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidExpiry:
            writeInt(&buf, Int32(3))
        
        
        case let .Request(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtendError_lift(_ buf: RustBuffer) throws -> ExtendError {
    return try FfiConverterTypeExtendError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtendError_lower(_ value: ExtendError) -> RustBuffer {
    return FfiConverterTypeExtendError.lower(value)
}


extension ExtendError: Equatable, Hashable {}




extension ExtendError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum NextError: Swift.Error {

    
    
    case Internal(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNextError: FfiConverterRustBuffer {
    typealias SwiftType = NextError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NextError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Internal(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NextError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Internal(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNextError_lift(_ buf: RustBuffer) throws -> NextError {
    return try FfiConverterTypeNextError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNextError_lower(_ value: NextError) -> RustBuffer {
    return FfiConverterTypeNextError.lower(value)
}


extension NextError: Equatable, Hashable {}




extension NextError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum PairError: Swift.Error {

    
    
    case Request(RequestError
    )
    case Internal(String
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePairError: FfiConverterRustBuffer {
    typealias SwiftType = PairError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PairError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 2: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PairError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Request(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .Internal(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairError_lift(_ buf: RustBuffer) throws -> PairError {
    return try FfiConverterTypePairError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePairError_lower(_ value: PairError) -> RustBuffer {
    return FfiConverterTypePairError.lower(value)
}


extension PairError: Equatable, Hashable {}




extension PairError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum RejectError: Swift.Error {

    
    
    case Request(RequestError
    )
    case Internal(String
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRejectError: FfiConverterRustBuffer {
    typealias SwiftType = RejectError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RejectError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 2: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RejectError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Request(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .Internal(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRejectError_lift(_ buf: RustBuffer) throws -> RejectError {
    return try FfiConverterTypeRejectError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRejectError_lower(_ value: RejectError) -> RustBuffer {
    return FfiConverterTypeRejectError.lower(value)
}


extension RejectError: Equatable, Hashable {}




extension RejectError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum RejectionReason {
    
    case userRejected
    case unsupportedChains
    case unsupportedMethods
    case unsupportedAccounts
    case unsupportedEvents
}


#if compiler(>=6)
extension RejectionReason: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRejectionReason: FfiConverterRustBuffer {
    typealias SwiftType = RejectionReason

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RejectionReason {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .userRejected
        
        case 2: return .unsupportedChains
        
        case 3: return .unsupportedMethods
        
        case 4: return .unsupportedAccounts
        
        case 5: return .unsupportedEvents
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RejectionReason, into buf: inout [UInt8]) {
        switch value {
        
        
        case .userRejected:
            writeInt(&buf, Int32(1))
        
        
        case .unsupportedChains:
            writeInt(&buf, Int32(2))
        
        
        case .unsupportedMethods:
            writeInt(&buf, Int32(3))
        
        
        case .unsupportedAccounts:
            writeInt(&buf, Int32(4))
        
        
        case .unsupportedEvents:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRejectionReason_lift(_ buf: RustBuffer) throws -> RejectionReason {
    return try FfiConverterTypeRejectionReason.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRejectionReason_lower(_ value: RejectionReason) -> RustBuffer {
    return FfiConverterTypeRejectionReason.lower(value)
}


extension RejectionReason: Equatable, Hashable {}







public enum RequestError: Swift.Error {

    
    
    case Internal(String
    )
    case Offline
    case InvalidAuth
    /**
     * An error that shouldn't happen (e.g. JSON serializing constant values)
     */
    case ShouldNeverHappen(String
    )
    /**
     * An error that shouldn't happen because the relay should be behaving as expected
     */
    case ServerMisbehaved(String
    )
    case Cleanup
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRequestError: FfiConverterRustBuffer {
    typealias SwiftType = RequestError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Offline
        case 3: return .InvalidAuth
        case 4: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .ServerMisbehaved(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .Cleanup

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RequestError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Internal(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .Offline:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidAuth:
            writeInt(&buf, Int32(3))
        
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ServerMisbehaved(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .Cleanup:
            writeInt(&buf, Int32(6))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRequestError_lift(_ buf: RustBuffer) throws -> RequestError {
    return try FfiConverterTypeRequestError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRequestError_lower(_ value: RequestError) -> RustBuffer {
    return FfiConverterTypeRequestError.lower(value)
}


extension RequestError: Equatable, Hashable {}




extension RequestError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum RespondError: Swift.Error {

    
    
    case Storage(StorageError
    )
    case SessionNotFound
    case Request(RequestError
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRespondError: FfiConverterRustBuffer {
    typealias SwiftType = RespondError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RespondError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Storage(
            try FfiConverterTypeStorageError.read(from: &buf)
            )
        case 2: return .SessionNotFound
        case 3: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 4: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RespondError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Storage(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStorageError.write(v1, into: &buf)
            
        
        case .SessionNotFound:
            writeInt(&buf, Int32(2))
        
        
        case let .Request(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRespondError_lift(_ buf: RustBuffer) throws -> RespondError {
    return try FfiConverterTypeRespondError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRespondError_lower(_ value: RespondError) -> RustBuffer {
    return FfiConverterTypeRespondError.lower(value)
}


extension RespondError: Equatable, Hashable {}




extension RespondError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SessionRequestJsonRpcResponseFfi {
    
    case result(SessionRequestJsonRpcResultResponseFfi
    )
    case error(SessionRequestJsonRpcErrorResponseFfi
    )
}


#if compiler(>=6)
extension SessionRequestJsonRpcResponseFfi: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionRequestJsonRpcResponseFfi: FfiConverterRustBuffer {
    typealias SwiftType = SessionRequestJsonRpcResponseFfi

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionRequestJsonRpcResponseFfi {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .result(try FfiConverterTypeSessionRequestJsonRpcResultResponseFfi.read(from: &buf)
        )
        
        case 2: return .error(try FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SessionRequestJsonRpcResponseFfi, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .result(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSessionRequestJsonRpcResultResponseFfi.write(v1, into: &buf)
            
        
        case let .error(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcResponseFfi_lift(_ buf: RustBuffer) throws -> SessionRequestJsonRpcResponseFfi {
    return try FfiConverterTypeSessionRequestJsonRpcResponseFfi.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionRequestJsonRpcResponseFfi_lower(_ value: SessionRequestJsonRpcResponseFfi) -> RustBuffer {
    return FfiConverterTypeSessionRequestJsonRpcResponseFfi.lower(value)
}


extension SessionRequestJsonRpcResponseFfi: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SignOutputEnum {
    
    case signature(Bytes
    )
    case signOutput(SignOutputObject
    )
}


#if compiler(>=6)
extension SignOutputEnum: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignOutputEnum: FfiConverterRustBuffer {
    typealias SwiftType = SignOutputEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignOutputEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .signature(try FfiConverterTypeBytes.read(from: &buf)
        )
        
        case 2: return .signOutput(try FfiConverterTypeSignOutputObject.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignOutputEnum, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .signature(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeBytes.write(v1, into: &buf)
            
        
        case let .signOutput(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeSignOutputObject.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lift(_ buf: RustBuffer) throws -> SignOutputEnum {
    return try FfiConverterTypeSignOutputEnum.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignOutputEnum_lower(_ value: SignOutputEnum) -> RustBuffer {
    return FfiConverterTypeSignOutputEnum.lower(value)
}


extension SignOutputEnum: Equatable, Hashable {}







public enum SolanaDeriveKeypairFromMnemonicError: Swift.Error {

    
    
    case DerivationPath(String
    )
    case Derive(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSolanaDeriveKeypairFromMnemonicError: FfiConverterRustBuffer {
    typealias SwiftType = SolanaDeriveKeypairFromMnemonicError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SolanaDeriveKeypairFromMnemonicError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DerivationPath(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Derive(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SolanaDeriveKeypairFromMnemonicError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DerivationPath(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Derive(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSolanaDeriveKeypairFromMnemonicError_lift(_ buf: RustBuffer) throws -> SolanaDeriveKeypairFromMnemonicError {
    return try FfiConverterTypeSolanaDeriveKeypairFromMnemonicError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSolanaDeriveKeypairFromMnemonicError_lower(_ value: SolanaDeriveKeypairFromMnemonicError) -> RustBuffer {
    return FfiConverterTypeSolanaDeriveKeypairFromMnemonicError.lower(value)
}


extension SolanaDeriveKeypairFromMnemonicError: Equatable, Hashable {}




extension SolanaDeriveKeypairFromMnemonicError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum StorageError: Swift.Error {

    
    
    case Runtime(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStorageError: FfiConverterRustBuffer {
    typealias SwiftType = StorageError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StorageError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Runtime(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StorageError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Runtime(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStorageError_lift(_ buf: RustBuffer) throws -> StorageError {
    return try FfiConverterTypeStorageError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStorageError_lower(_ value: StorageError) -> RustBuffer {
    return FfiConverterTypeStorageError.lower(value)
}


extension StorageError: Equatable, Hashable {}




extension StorageError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TransportType {
    
    case relay
    case linkMode
}


#if compiler(>=6)
extension TransportType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransportType: FfiConverterRustBuffer {
    typealias SwiftType = TransportType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransportType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .relay
        
        case 2: return .linkMode
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransportType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .relay:
            writeInt(&buf, Int32(1))
        
        
        case .linkMode:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransportType_lift(_ buf: RustBuffer) throws -> TransportType {
    return try FfiConverterTypeTransportType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransportType_lower(_ value: TransportType) -> RustBuffer {
    return FfiConverterTypeTransportType.lower(value)
}


extension TransportType: Equatable, Hashable {}







public enum UpdateError: Swift.Error {

    
    
    case Storage(StorageError
    )
    case SessionNotFound
    case Unauthorized
    case Request(RequestError
    )
    case Internal(String
    )
    case ShouldNeverHappen(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUpdateError: FfiConverterRustBuffer {
    typealias SwiftType = UpdateError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UpdateError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Storage(
            try FfiConverterTypeStorageError.read(from: &buf)
            )
        case 2: return .SessionNotFound
        case 3: return .Unauthorized
        case 4: return .Request(
            try FfiConverterTypeRequestError.read(from: &buf)
            )
        case 5: return .Internal(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .ShouldNeverHappen(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UpdateError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Storage(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStorageError.write(v1, into: &buf)
            
        
        case .SessionNotFound:
            writeInt(&buf, Int32(2))
        
        
        case .Unauthorized:
            writeInt(&buf, Int32(3))
        
        
        case let .Request(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeRequestError.write(v1, into: &buf)
            
        
        case let .Internal(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ShouldNeverHappen(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateError_lift(_ buf: RustBuffer) throws -> UpdateError {
    return try FfiConverterTypeUpdateError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateError_lower(_ value: UpdateError) -> RustBuffer {
    return FfiConverterTypeUpdateError.lower(value)
}


extension UpdateError: Equatable, Hashable {}




extension UpdateError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMetadata: FfiConverterRustBuffer {
    typealias SwiftType = Metadata?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMetadata.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMetadata.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypePairingFfi: FfiConverterRustBuffer {
    typealias SwiftType = PairingFfi?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePairingFfi.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePairingFfi.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeRedirect: FfiConverterRustBuffer {
    typealias SwiftType = Redirect?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRedirect.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRedirect.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSessionFfi: FfiConverterRustBuffer {
    typealias SwiftType = SessionFfi?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSessionFfi.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSessionFfi.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTransportType: FfiConverterRustBuffer {
    typealias SwiftType = TransportType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransportType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransportType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = [AssetType]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeAssetType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeAssetType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeU64: FfiConverterRustBuffer {
    typealias SwiftType = [U64]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeU64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeU64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryStringTypeProposalNamespace: FfiConverterRustBuffer {
    typealias SwiftType = [String: ProposalNamespace]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeProposalNamespace.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeProposalNamespace.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryTypeU64SequenceTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = [U64: [AddressOrNative]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBytes: FfiConverterRustBuffer {
    typealias SwiftType = Bytes?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBytes.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBytes.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeU256: FfiConverterRustBuffer {
    typealias SwiftType = U256?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeU256.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeU256.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRelay: FfiConverterRustBuffer {
    typealias SwiftType = [Relay]

    public static func write(_ value: [Relay], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRelay.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Relay] {
        let len: Int32 = try readInt(&buf)
        var seq = [Relay]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRelay.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeSessionFfi: FfiConverterRustBuffer {
    typealias SwiftType = [SessionFfi]

    public static func write(_ value: [SessionFfi], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSessionFfi.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SessionFfi] {
        let len: Int32 = try readInt(&buf)
        var seq = [SessionFfi]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSessionFfi.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAddressOrNative: FfiConverterRustBuffer {
    typealias SwiftType = [AddressOrNative]

    public static func write(_ value: [AddressOrNative], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAddressOrNative.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AddressOrNative] {
        let len: Int32 = try readInt(&buf)
        var seq = [AddressOrNative]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAddressOrNative.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = [AssetType]

    public static func write(_ value: [AssetType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAssetType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetType] {
        let len: Int32 = try readInt(&buf)
        var seq = [AssetType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAssetType.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTopic: FfiConverterRustBuffer {
    typealias SwiftType = [Topic]

    public static func write(_ value: [Topic], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTopic.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Topic] {
        let len: Int32 = try readInt(&buf)
        var seq = [Topic]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTopic.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeU64: FfiConverterRustBuffer {
    typealias SwiftType = [U64]

    public static func write(_ value: [U64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeU64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [U64] {
        let len: Int32 = try readInt(&buf)
        var seq = [U64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeU64.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeProposalNamespace: FfiConverterRustBuffer {
    public static func write(_ value: [String: ProposalNamespace], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeProposalNamespace.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: ProposalNamespace] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: ProposalNamespace]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeProposalNamespace.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeSettleNamespace: FfiConverterRustBuffer {
    public static func write(_ value: [String: SettleNamespace], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeSettleNamespace.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: SettleNamespace] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: SettleNamespace]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeSettleNamespace.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryTypeU64SequenceTypeAddressOrNative: FfiConverterRustBuffer {
    public static func write(_ value: [U64: [AddressOrNative]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeU64.write(key, into: &buf)
            FfiConverterSequenceTypeAddressOrNative.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [U64: [AddressOrNative]] {
        let len: Int32 = try readInt(&buf)
        var dict = [U64: [AddressOrNative]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterTypeU64.read(from: &buf)
            let value = try FfiConverterSequenceTypeAddressOrNative.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AccountAddress = Address

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountAddress {
        return try FfiConverterTypeAddress.read(from: &buf)
    }

    public static func write(_ value: AccountAddress, into buf: inout [UInt8]) {
        return FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AccountAddress {
        return try FfiConverterTypeAddress_lift(value)
    }

    public static func lower(_ value: AccountAddress) -> RustBuffer {
        return FfiConverterTypeAddress_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lift(_ value: RustBuffer) throws -> AccountAddress {
    return try FfiConverterTypeAccountAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountAddress_lower(_ value: AccountAddress) -> RustBuffer {
    return FfiConverterTypeAccountAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ value: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AlloyError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAlloyError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AlloyError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AlloyError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AlloyError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AlloyError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlloyError_lift(_ value: RustBuffer) throws -> AlloyError {
    return try FfiConverterTypeAlloyError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlloyError_lower(_ value: AlloyError) -> RustBuffer {
    return FfiConverterTypeAlloyError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AnyhowError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAnyhowError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AnyhowError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AnyhowError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AnyhowError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AnyhowError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyhowError_lift(_ value: RustBuffer) throws -> AnyhowError {
    return try FfiConverterTypeAnyhowError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyhowError_lower(_ value: AnyhowError) -> RustBuffer {
    return FfiConverterTypeAnyhowError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Asset = AssetFfi

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsset: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Asset {
        return try FfiConverterTypeAssetFfi.read(from: &buf)
    }

    public static func write(_ value: Asset, into buf: inout [UInt8]) {
        return FfiConverterTypeAssetFfi.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Asset {
        return try FfiConverterTypeAssetFfi_lift(value)
    }

    public static func lower(_ value: Asset) -> RustBuffer {
        return FfiConverterTypeAssetFfi_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lift(_ value: RustBuffer) throws -> Asset {
    return try FfiConverterTypeAsset.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lower(_ value: Asset) -> RustBuffer {
    return FfiConverterTypeAsset.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Authorization = FfiAuthorization

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthorization: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Authorization {
        return try FfiConverterTypeFfiAuthorization.read(from: &buf)
    }

    public static func write(_ value: Authorization, into buf: inout [UInt8]) {
        return FfiConverterTypeFfiAuthorization.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Authorization {
        return try FfiConverterTypeFfiAuthorization_lift(value)
    }

    public static func lower(_ value: Authorization) -> RustBuffer {
        return FfiConverterTypeFfiAuthorization_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lift(_ value: RustBuffer) throws -> Authorization {
    return try FfiConverterTypeAuthorization.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthorization_lower(_ value: Authorization) -> RustBuffer {
    return FfiConverterTypeAuthorization.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias B256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeB256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> B256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: B256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> B256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: B256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lift(_ value: RustBuffer) throws -> B256 {
    return try FfiConverterTypeB256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lower(_ value: B256) -> RustBuffer {
    return FfiConverterTypeB256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Bytes = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBytes: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bytes {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Bytes, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Bytes {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Bytes) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lift(_ value: RustBuffer) throws -> Bytes {
    return try FfiConverterTypeBytes.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lower(_ value: Bytes) -> RustBuffer {
    return FfiConverterTypeBytes.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ClientId = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeClientId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ClientId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ClientId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ClientId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClientId_lift(_ value: RustBuffer) throws -> ClientId {
    return try FfiConverterTypeClientId.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClientId_lower(_ value: ClientId) -> RustBuffer {
    return FfiConverterTypeClientId.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Eip712Domain = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEip712Domain: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip712Domain {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Eip712Domain, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Eip712Domain {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Eip712Domain) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lift(_ value: RustBuffer) throws -> Eip712Domain {
    return try FfiConverterTypeEip712Domain.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEip712Domain_lower(_ value: Eip712Domain) -> RustBuffer {
    return FfiConverterTypeEip712Domain.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias EyreError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEyreError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EyreError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: EyreError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> EyreError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: EyreError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEyreError_lift(_ value: RustBuffer) throws -> EyreError {
    return try FfiConverterTypeEyreError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEyreError_lower(_ value: EyreError) -> RustBuffer {
    return FfiConverterTypeEyreError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Id = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Id {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Id) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lift(_ value: RustBuffer) throws -> Id {
    return try FfiConverterTypeId.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lower(_ value: Id) -> RustBuffer {
    return FfiConverterTypeId.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PendingTransactionError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingTransactionError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingTransactionError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PendingTransactionError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PendingTransactionError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PendingTransactionError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingTransactionError_lift(_ value: RustBuffer) throws -> PendingTransactionError {
    return try FfiConverterTypePendingTransactionError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingTransactionError_lower(_ value: PendingTransactionError) -> RustBuffer {
    return FfiConverterTypePendingTransactionError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrimitiveSignature = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrimitiveSignature: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrimitiveSignature {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrimitiveSignature, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrimitiveSignature {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrimitiveSignature) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lift(_ value: RustBuffer) throws -> PrimitiveSignature {
    return try FfiConverterTypePrimitiveSignature.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrimitiveSignature_lower(_ value: PrimitiveSignature) -> RustBuffer {
    return FfiConverterTypePrimitiveSignature.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PrivateKeySigner = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrivateKeySigner: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrivateKeySigner {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PrivateKeySigner, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PrivateKeySigner {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PrivateKeySigner) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrivateKeySigner_lift(_ value: RustBuffer) throws -> PrivateKeySigner {
    return try FfiConverterTypePrivateKeySigner.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrivateKeySigner_lower(_ value: PrivateKeySigner) -> RustBuffer {
    return FfiConverterTypePrivateKeySigner.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ProjectId = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProjectId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProjectId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ProjectId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ProjectId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ProjectId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lift(_ value: RustBuffer) throws -> ProjectId {
    return try FfiConverterTypeProjectId.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProjectId_lower(_ value: ProjectId) -> RustBuffer {
    return FfiConverterTypeProjectId.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ReqwestError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReqwestError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReqwestError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ReqwestError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ReqwestError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ReqwestError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReqwestError_lift(_ value: RustBuffer) throws -> ReqwestError {
    return try FfiConverterTypeReqwestError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReqwestError_lower(_ value: ReqwestError) -> RustBuffer {
    return FfiConverterTypeReqwestError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RpcError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRpcError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RpcError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: RpcError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> RpcError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: RpcError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRpcError_lift(_ value: RustBuffer) throws -> RpcError {
    return try FfiConverterTypeRpcError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRpcError_lower(_ value: RpcError) -> RustBuffer {
    return FfiConverterTypeRpcError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SerdeJsonError = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSerdeJsonError: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SerdeJsonError {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SerdeJsonError, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SerdeJsonError {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SerdeJsonError) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeJsonError_lift(_ value: RustBuffer) throws -> SerdeJsonError {
    return try FfiConverterTypeSerdeJsonError.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeJsonError_lower(_ value: SerdeJsonError) -> RustBuffer {
    return FfiConverterTypeSerdeJsonError.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias StatusCode = UInt16

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusCode: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusCode {
        return try FfiConverterUInt16.read(from: &buf)
    }

    public static func write(_ value: StatusCode, into buf: inout [UInt8]) {
        return FfiConverterUInt16.write(value, into: &buf)
    }

    public static func lift(_ value: UInt16) throws -> StatusCode {
        return try FfiConverterUInt16.lift(value)
    }

    public static func lower(_ value: StatusCode) -> UInt16 {
        return FfiConverterUInt16.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusCode_lift(_ value: UInt16) throws -> StatusCode {
    return try FfiConverterTypeStatusCode.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusCode_lower(_ value: StatusCode) -> UInt16 {
    return FfiConverterTypeStatusCode.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Topic = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTopic: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Topic {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Topic, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Topic {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Topic) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTopic_lift(_ value: RustBuffer) throws -> Topic {
    return try FfiConverterTypeTopic.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTopic_lower(_ value: Topic) -> RustBuffer {
    return FfiConverterTypeTopic.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias TransactionReceipt = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionReceipt: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionReceipt {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: TransactionReceipt, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> TransactionReceipt {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: TransactionReceipt) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lift(_ value: RustBuffer) throws -> TransactionReceipt {
    return try FfiConverterTypeTransactionReceipt.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionReceipt_lower(_ value: TransactionReceipt) -> RustBuffer {
    return FfiConverterTypeTransactionReceipt.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U128 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU128: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U128 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U128, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U128 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U128) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lift(_ value: RustBuffer) throws -> U128 {
    return try FfiConverterTypeU128.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128_lower(_ value: U128) -> RustBuffer {
    return FfiConverterTypeU128.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U128Primitive = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU128Primitive: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U128Primitive {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U128Primitive, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U128Primitive {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U128Primitive) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128Primitive_lift(_ value: RustBuffer) throws -> U128Primitive {
    return try FfiConverterTypeU128Primitive.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU128Primitive_lower(_ value: U128Primitive) -> RustBuffer {
    return FfiConverterTypeU128Primitive.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lift(_ value: RustBuffer) throws -> U256 {
    return try FfiConverterTypeU256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lower(_ value: U256) -> RustBuffer {
    return FfiConverterTypeU256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U48 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU48: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U48 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U48, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U48 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U48) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lift(_ value: RustBuffer) throws -> U48 {
    return try FfiConverterTypeU48.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU48_lower(_ value: U48) -> RustBuffer {
    return FfiConverterTypeU48.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U64 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU64: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U64 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U64, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U64 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U64) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lift(_ value: RustBuffer) throws -> U64 {
    return try FfiConverterTypeU64.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lower(_ value: U64) -> RustBuffer {
    return FfiConverterTypeU64.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U8 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU8: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U8 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U8, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U8 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U8) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lift(_ value: RustBuffer) throws -> U8 {
    return try FfiConverterTypeU8.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU8_lower(_ value: U8) -> RustBuffer {
    return FfiConverterTypeU8.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Url = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUrl: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Url {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Url, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Url {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Url) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrl_lift(_ value: RustBuffer) throws -> Url {
    return try FfiConverterTypeUrl.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrl_lower(_ value: Url) -> RustBuffer {
    return FfiConverterTypeUrl.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias UserOperationReceipt = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserOperationReceipt: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserOperationReceipt {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: UserOperationReceipt, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> UserOperationReceipt {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: UserOperationReceipt) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lift(_ value: RustBuffer) throws -> UserOperationReceipt {
    return try FfiConverterTypeUserOperationReceipt.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserOperationReceipt_lower(_ value: UserOperationReceipt) -> RustBuffer {
    return FfiConverterTypeUserOperationReceipt.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureYttriumInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func errorDataFfiFromJson(json: String) -> ErrorDataFfi  {
    return try!  FfiConverterTypeErrorDataFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_error_data_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func errorDataFfiToJson(object: ErrorDataFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_error_data_ffi_to_json(
        FfiConverterTypeErrorDataFfi_lower(object),$0
    )
})
}
public func metadataFromJson(json: String) -> Metadata  {
    return try!  FfiConverterTypeMetadata_lift(try! rustCall() {
    uniffi_yttrium_fn_func_metadata_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func metadataToJson(object: Metadata) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_metadata_to_json(
        FfiConverterTypeMetadata_lower(object),$0
    )
})
}
public func proposalNamespaceFromJson(json: String) -> ProposalNamespace  {
    return try!  FfiConverterTypeProposalNamespace_lift(try! rustCall() {
    uniffi_yttrium_fn_func_proposal_namespace_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func proposalNamespaceToJson(object: ProposalNamespace) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_proposal_namespace_to_json(
        FfiConverterTypeProposalNamespace_lower(object),$0
    )
})
}
public func redirectFromJson(json: String) -> Redirect  {
    return try!  FfiConverterTypeRedirect_lift(try! rustCall() {
    uniffi_yttrium_fn_func_redirect_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func redirectToJson(object: Redirect) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_redirect_to_json(
        FfiConverterTypeRedirect_lower(object),$0
    )
})
}
public func registerLogger(logger: Logger)  {try! rustCall() {
    uniffi_yttrium_fn_func_register_logger(
        FfiConverterTypeLogger_lower(logger),$0
    )
}
}
public func relayFromJson(json: String) -> Relay  {
    return try!  FfiConverterTypeRelay_lift(try! rustCall() {
    uniffi_yttrium_fn_func_relay_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func relayToJson(object: Relay) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_relay_to_json(
        FfiConverterTypeRelay_lower(object),$0
    )
})
}
public func sessionFfiFromJson(json: String) -> SessionFfi  {
    return try!  FfiConverterTypeSessionFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionFfiToJson(object: SessionFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_ffi_to_json(
        FfiConverterTypeSessionFfi_lower(object),$0
    )
})
}
public func sessionProposalFfiFromJson(json: String) -> SessionProposalFfi  {
    return try!  FfiConverterTypeSessionProposalFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_proposal_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionProposalFfiToJson(object: SessionProposalFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_proposal_ffi_to_json(
        FfiConverterTypeSessionProposalFfi_lower(object),$0
    )
})
}
public func sessionRequestFfiFromJson(json: String) -> SessionRequestFfi  {
    return try!  FfiConverterTypeSessionRequestFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionRequestFfiToJson(object: SessionRequestFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_ffi_to_json(
        FfiConverterTypeSessionRequestFfi_lower(object),$0
    )
})
}
public func sessionRequestJsonRpcErrorResponseFfiFromJson(json: String) -> SessionRequestJsonRpcErrorResponseFfi  {
    return try!  FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_error_response_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionRequestJsonRpcErrorResponseFfiToJson(object: SessionRequestJsonRpcErrorResponseFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_error_response_ffi_to_json(
        FfiConverterTypeSessionRequestJsonRpcErrorResponseFfi_lower(object),$0
    )
})
}
public func sessionRequestJsonRpcFfiFromJson(json: String) -> SessionRequestJsonRpcFfi  {
    return try!  FfiConverterTypeSessionRequestJsonRpcFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionRequestJsonRpcFfiToJson(object: SessionRequestJsonRpcFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_ffi_to_json(
        FfiConverterTypeSessionRequestJsonRpcFfi_lower(object),$0
    )
})
}
public func sessionRequestJsonRpcResultResponseFfiFromJson(json: String) -> SessionRequestJsonRpcResultResponseFfi  {
    return try!  FfiConverterTypeSessionRequestJsonRpcResultResponseFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_result_response_ffi_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func sessionRequestJsonRpcResultResponseFfiToJson(object: SessionRequestJsonRpcResultResponseFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_json_rpc_result_response_ffi_to_json(
        FfiConverterTypeSessionRequestJsonRpcResultResponseFfi_lower(object),$0
    )
})
}
public func sessionRequestRequestFfiToJson(object: SessionRequestRequestFfi) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_request_ffi_to_json(
        FfiConverterTypeSessionRequestRequestFfi_lower(object),$0
    )
})
}
public func sessionRequestRequestFromJson(json: String) -> SessionRequestRequestFfi  {
    return try!  FfiConverterTypeSessionRequestRequestFfi_lift(try! rustCall() {
    uniffi_yttrium_fn_func_session_request_request_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func settleNamespaceFromJson(json: String) -> SettleNamespace  {
    return try!  FfiConverterTypeSettleNamespace_lift(try! rustCall() {
    uniffi_yttrium_fn_func_settle_namespace_from_json(
        FfiConverterString.lower(json),$0
    )
})
}
public func settleNamespaceToJson(object: SettleNamespace) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_yttrium_fn_func_settle_namespace_to_json(
        FfiConverterTypeSettleNamespace_lower(object),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_yttrium_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_yttrium_checksum_func_error_data_ffi_from_json() != 45212) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_error_data_ffi_to_json() != 30275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_metadata_from_json() != 29441) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_metadata_to_json() != 41553) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_proposal_namespace_from_json() != 339) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_proposal_namespace_to_json() != 60026) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_redirect_from_json() != 21514) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_redirect_to_json() != 31534) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_register_logger() != 53062) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_relay_from_json() != 49040) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_relay_to_json() != 35189) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_ffi_from_json() != 41917) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_ffi_to_json() != 30234) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_proposal_ffi_from_json() != 30864) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_proposal_ffi_to_json() != 43109) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_ffi_from_json() != 33789) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_ffi_to_json() != 17435) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_error_response_ffi_from_json() != 6802) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_error_response_ffi_to_json() != 19261) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_ffi_from_json() != 60984) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_ffi_to_json() != 10372) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_result_response_ffi_from_json() != 57212) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_json_rpc_result_response_ffi_to_json() != 47087) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_request_ffi_to_json() != 34926) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_session_request_request_from_json() != 11151) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_settle_namespace_from_json() != 852) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_settle_namespace_to_json() != 48776) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_erc6492client_verify_signature() != 43990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_logger_log() != 540) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_approve() != 36526) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_connect() != 9786) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_disconnect() != 50012) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_extend() != 44693) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_generate_key() != 3304) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_online() != 2068) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_pair() != 59076) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_register_sign_listener() != 37537) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_reject() != 23118) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_respond() != 17745) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_start() != 35500) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signclient_update() != 8371) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_request() != 45061) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_disconnect() != 39985) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_event() != 17798) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_extend() != 55166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_update() != 23427) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_connect() != 15582) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_signlistener_on_session_request_response() != 32789) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_add_session() != 17519) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_delete_session() != 44611) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_get_session() != 44499) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_get_all_sessions() != 30239) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_get_all_topics() != 29403) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_get_decryption_key_for_topic() != 54176) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_save_pairing() != 24396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_get_pairing() != 61972) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_storageffi_save_partial_session() != 15751) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_constructor_erc6492client_new() != 33633) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_constructor_signclient_new() != 10454) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitLogger()
    uniffiCallbackInitSignListener()
    uniffiCallbackInitStorageFfi()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureYttriumInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all