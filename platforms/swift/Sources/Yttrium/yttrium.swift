// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(yttriumFFI)
import yttriumFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_yttrium_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_yttrium_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol AccountClientProtocol : AnyObject {
    
}

open class AccountClient:
    AccountClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_accountclient(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_accountclient(pointer, $0) }
    }

    

    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AccountClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountClient {
        return AccountClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AccountClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AccountClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountClient {
    return try FfiConverterTypeAccountClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountClient_lower(_ value: AccountClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAccountClient.lower(value)
}




public protocol Erc6492ClientProtocol : AnyObject {
    
    func verifySignature(signature: Bytes, address: Address, messageHash: B256) async throws  -> Bool
    
}

open class Erc6492Client:
    Erc6492ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_yttrium_fn_clone_erc6492client(self.pointer, $0) }
    }
public convenience init(rpcUrl: String) {
    let pointer =
        try! rustCall() {
    uniffi_yttrium_fn_constructor_erc6492client_new(
        FfiConverterString.lower(rpcUrl),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_yttrium_fn_free_erc6492client(pointer, $0) }
    }

    

    
open func verifySignature(signature: Bytes, address: Address, messageHash: B256)async throws  -> Bool  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_yttrium_fn_method_erc6492client_verify_signature(
                    self.uniffiClonePointer(),
                    FfiConverterTypeBytes.lower(signature),FfiConverterTypeAddress.lower(address),FfiConverterTypeB256.lower(messageHash)
                )
            },
            pollFunc: ffi_yttrium_rust_future_poll_i8,
            completeFunc: ffi_yttrium_rust_future_complete_i8,
            freeFunc: ffi_yttrium_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: FfiConverterTypeErc6492Error.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Client: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc6492Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
        return Erc6492Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc6492Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc6492Client {
    return try FfiConverterTypeErc6492Client.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeErc6492Client_lower(_ value: Erc6492Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc6492Client.lower(value)
}


public struct Amount {
    public var symbol: String
    public var amount: U256
    public var unit: Unit
    public var formatted: String
    public var formattedAlt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(symbol: String, amount: U256, unit: Unit, formatted: String, formattedAlt: String) {
        self.symbol = symbol
        self.amount = amount
        self.unit = unit
        self.formatted = formatted
        self.formattedAlt = formattedAlt
    }
}



extension Amount: Equatable, Hashable {
    public static func ==(lhs: Amount, rhs: Amount) -> Bool {
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        if lhs.formatted != rhs.formatted {
            return false
        }
        if lhs.formattedAlt != rhs.formattedAlt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(symbol)
        hasher.combine(amount)
        hasher.combine(unit)
        hasher.combine(formatted)
        hasher.combine(formattedAlt)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAmount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Amount {
        return
            try Amount(
                symbol: FfiConverterString.read(from: &buf), 
                amount: FfiConverterTypeU256.read(from: &buf), 
                unit: FfiConverterTypeUnit.read(from: &buf), 
                formatted: FfiConverterString.read(from: &buf), 
                formattedAlt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Amount, into buf: inout [UInt8]) {
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterTypeU256.write(value.amount, into: &buf)
        FfiConverterTypeUnit.write(value.unit, into: &buf)
        FfiConverterString.write(value.formatted, into: &buf)
        FfiConverterString.write(value.formattedAlt, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lift(_ buf: RustBuffer) throws -> Amount {
    return try FfiConverterTypeAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lower(_ value: Amount) -> RustBuffer {
    return FfiConverterTypeAmount.lower(value)
}


public struct Config {
    public var endpoints: Endpoints

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(endpoints: Endpoints) {
        self.endpoints = endpoints
    }
}



extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.endpoints != rhs.endpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endpoints)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                endpoints: FfiConverterTypeEndpoints.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoints.write(value.endpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct Endpoint {
    public var baseUrl: String
    public var apiKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(baseUrl: String, apiKey: String) {
        self.baseUrl = baseUrl
        self.apiKey = apiKey
    }
}



extension Endpoint: Equatable, Hashable {
    public static func ==(lhs: Endpoint, rhs: Endpoint) -> Bool {
        if lhs.baseUrl != rhs.baseUrl {
            return false
        }
        if lhs.apiKey != rhs.apiKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseUrl)
        hasher.combine(apiKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoint {
        return
            try Endpoint(
                baseUrl: FfiConverterString.read(from: &buf), 
                apiKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.baseUrl, into: &buf)
        FfiConverterString.write(value.apiKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lift(_ buf: RustBuffer) throws -> Endpoint {
    return try FfiConverterTypeEndpoint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoint_lower(_ value: Endpoint) -> RustBuffer {
    return FfiConverterTypeEndpoint.lower(value)
}


public struct Endpoints {
    public var rpc: Endpoint
    public var bundler: Endpoint
    public var paymaster: Endpoint

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpc: Endpoint, bundler: Endpoint, paymaster: Endpoint) {
        self.rpc = rpc
        self.bundler = bundler
        self.paymaster = paymaster
    }
}



extension Endpoints: Equatable, Hashable {
    public static func ==(lhs: Endpoints, rhs: Endpoints) -> Bool {
        if lhs.rpc != rhs.rpc {
            return false
        }
        if lhs.bundler != rhs.bundler {
            return false
        }
        if lhs.paymaster != rhs.paymaster {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpc)
        hasher.combine(bundler)
        hasher.combine(paymaster)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEndpoints: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Endpoints {
        return
            try Endpoints(
                rpc: FfiConverterTypeEndpoint.read(from: &buf), 
                bundler: FfiConverterTypeEndpoint.read(from: &buf), 
                paymaster: FfiConverterTypeEndpoint.read(from: &buf)
        )
    }

    public static func write(_ value: Endpoints, into buf: inout [UInt8]) {
        FfiConverterTypeEndpoint.write(value.rpc, into: &buf)
        FfiConverterTypeEndpoint.write(value.bundler, into: &buf)
        FfiConverterTypeEndpoint.write(value.paymaster, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lift(_ buf: RustBuffer) throws -> Endpoints {
    return try FfiConverterTypeEndpoints.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEndpoints_lower(_ value: Endpoints) -> RustBuffer {
    return FfiConverterTypeEndpoints.lower(value)
}


public struct FundingMetadata {
    public var chainId: String
    public var tokenContract: Address
    public var symbol: String
    public var amount: U256
    public var bridgingFee: U256
    public var decimals: Unit

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(chainId: String, tokenContract: Address, symbol: String, amount: U256, bridgingFee: U256, decimals: Unit) {
        self.chainId = chainId
        self.tokenContract = tokenContract
        self.symbol = symbol
        self.amount = amount
        self.bridgingFee = bridgingFee
        self.decimals = decimals
    }
}



extension FundingMetadata: Equatable, Hashable {
    public static func ==(lhs: FundingMetadata, rhs: FundingMetadata) -> Bool {
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.tokenContract != rhs.tokenContract {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.bridgingFee != rhs.bridgingFee {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chainId)
        hasher.combine(tokenContract)
        hasher.combine(symbol)
        hasher.combine(amount)
        hasher.combine(bridgingFee)
        hasher.combine(decimals)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFundingMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FundingMetadata {
        return
            try FundingMetadata(
                chainId: FfiConverterString.read(from: &buf), 
                tokenContract: FfiConverterTypeAddress.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                amount: FfiConverterTypeU256.read(from: &buf), 
                bridgingFee: FfiConverterTypeU256.read(from: &buf), 
                decimals: FfiConverterTypeUnit.read(from: &buf)
        )
    }

    public static func write(_ value: FundingMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeAddress.write(value.tokenContract, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterTypeU256.write(value.amount, into: &buf)
        FfiConverterTypeU256.write(value.bridgingFee, into: &buf)
        FfiConverterTypeUnit.write(value.decimals, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFundingMetadata_lift(_ buf: RustBuffer) throws -> FundingMetadata {
    return try FfiConverterTypeFundingMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFundingMetadata_lower(_ value: FundingMetadata) -> RustBuffer {
    return FfiConverterTypeFundingMetadata.lower(value)
}


public struct Metadata {
    public var fundingFrom: [FundingMetadata]
    public var checkIn: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fundingFrom: [FundingMetadata], checkIn: UInt64) {
        self.fundingFrom = fundingFrom
        self.checkIn = checkIn
    }
}



extension Metadata: Equatable, Hashable {
    public static func ==(lhs: Metadata, rhs: Metadata) -> Bool {
        if lhs.fundingFrom != rhs.fundingFrom {
            return false
        }
        if lhs.checkIn != rhs.checkIn {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fundingFrom)
        hasher.combine(checkIn)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Metadata {
        return
            try Metadata(
                fundingFrom: FfiConverterSequenceTypeFundingMetadata.read(from: &buf), 
                checkIn: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Metadata, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeFundingMetadata.write(value.fundingFrom, into: &buf)
        FfiConverterUInt64.write(value.checkIn, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lift(_ buf: RustBuffer) throws -> Metadata {
    return try FfiConverterTypeMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMetadata_lower(_ value: Metadata) -> RustBuffer {
    return FfiConverterTypeMetadata.lower(value)
}


public struct RouteResponseAvailable {
    public var orchestrationId: String
    public var initialTransaction: Transaction
    public var transactions: [Transaction]
    public var metadata: Metadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(orchestrationId: String, initialTransaction: Transaction, transactions: [Transaction], metadata: Metadata) {
        self.orchestrationId = orchestrationId
        self.initialTransaction = initialTransaction
        self.transactions = transactions
        self.metadata = metadata
    }
}



extension RouteResponseAvailable: Equatable, Hashable {
    public static func ==(lhs: RouteResponseAvailable, rhs: RouteResponseAvailable) -> Bool {
        if lhs.orchestrationId != rhs.orchestrationId {
            return false
        }
        if lhs.initialTransaction != rhs.initialTransaction {
            return false
        }
        if lhs.transactions != rhs.transactions {
            return false
        }
        if lhs.metadata != rhs.metadata {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(orchestrationId)
        hasher.combine(initialTransaction)
        hasher.combine(transactions)
        hasher.combine(metadata)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponseAvailable: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseAvailable {
        return
            try RouteResponseAvailable(
                orchestrationId: FfiConverterString.read(from: &buf), 
                initialTransaction: FfiConverterTypeTransaction.read(from: &buf), 
                transactions: FfiConverterSequenceTypeTransaction.read(from: &buf), 
                metadata: FfiConverterTypeMetadata.read(from: &buf)
        )
    }

    public static func write(_ value: RouteResponseAvailable, into buf: inout [UInt8]) {
        FfiConverterString.write(value.orchestrationId, into: &buf)
        FfiConverterTypeTransaction.write(value.initialTransaction, into: &buf)
        FfiConverterSequenceTypeTransaction.write(value.transactions, into: &buf)
        FfiConverterTypeMetadata.write(value.metadata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseAvailable_lift(_ buf: RustBuffer) throws -> RouteResponseAvailable {
    return try FfiConverterTypeRouteResponseAvailable.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseAvailable_lower(_ value: RouteResponseAvailable) -> RustBuffer {
    return FfiConverterTypeRouteResponseAvailable.lower(value)
}


/**
 * Bridging check error response that should be returned as a normal HTTP 200
 * response
 */
public struct RouteResponseError {
    public var error: BridgingError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: BridgingError) {
        self.error = error
    }
}



extension RouteResponseError: Equatable, Hashable {
    public static func ==(lhs: RouteResponseError, rhs: RouteResponseError) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponseError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseError {
        return
            try RouteResponseError(
                error: FfiConverterTypeBridgingError.read(from: &buf)
        )
    }

    public static func write(_ value: RouteResponseError, into buf: inout [UInt8]) {
        FfiConverterTypeBridgingError.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseError_lift(_ buf: RustBuffer) throws -> RouteResponseError {
    return try FfiConverterTypeRouteResponseError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseError_lower(_ value: RouteResponseError) -> RustBuffer {
    return FfiConverterTypeRouteResponseError.lower(value)
}


public struct RouteResponseNotRequired {
    public var initialTransaction: Transaction
    public var transactions: [Transaction]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(initialTransaction: Transaction, transactions: [Transaction]) {
        self.initialTransaction = initialTransaction
        self.transactions = transactions
    }
}



extension RouteResponseNotRequired: Equatable, Hashable {
    public static func ==(lhs: RouteResponseNotRequired, rhs: RouteResponseNotRequired) -> Bool {
        if lhs.initialTransaction != rhs.initialTransaction {
            return false
        }
        if lhs.transactions != rhs.transactions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(initialTransaction)
        hasher.combine(transactions)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponseNotRequired: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseNotRequired {
        return
            try RouteResponseNotRequired(
                initialTransaction: FfiConverterTypeTransaction.read(from: &buf), 
                transactions: FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
    }

    public static func write(_ value: RouteResponseNotRequired, into buf: inout [UInt8]) {
        FfiConverterTypeTransaction.write(value.initialTransaction, into: &buf)
        FfiConverterSequenceTypeTransaction.write(value.transactions, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseNotRequired_lift(_ buf: RustBuffer) throws -> RouteResponseNotRequired {
    return try FfiConverterTypeRouteResponseNotRequired.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseNotRequired_lower(_ value: RouteResponseNotRequired) -> RustBuffer {
    return FfiConverterTypeRouteResponseNotRequired.lower(value)
}


public struct StatusResponseCompleted {
    public var createdAt: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64) {
        self.createdAt = createdAt
    }
}



extension StatusResponseCompleted: Equatable, Hashable {
    public static func ==(lhs: StatusResponseCompleted, rhs: StatusResponseCompleted) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponseCompleted: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponseCompleted {
        return
            try StatusResponseCompleted(
                createdAt: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: StatusResponseCompleted, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseCompleted_lift(_ buf: RustBuffer) throws -> StatusResponseCompleted {
    return try FfiConverterTypeStatusResponseCompleted.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseCompleted_lower(_ value: StatusResponseCompleted) -> RustBuffer {
    return FfiConverterTypeStatusResponseCompleted.lower(value)
}


public struct StatusResponseError {
    public var createdAt: UInt64
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64, error: String) {
        self.createdAt = createdAt
        self.error = error
    }
}



extension StatusResponseError: Equatable, Hashable {
    public static func ==(lhs: StatusResponseError, rhs: StatusResponseError) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
        hasher.combine(error)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponseError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponseError {
        return
            try StatusResponseError(
                createdAt: FfiConverterUInt64.read(from: &buf), 
                error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: StatusResponseError, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
        FfiConverterString.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseError_lift(_ buf: RustBuffer) throws -> StatusResponseError {
    return try FfiConverterTypeStatusResponseError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponseError_lower(_ value: StatusResponseError) -> RustBuffer {
    return FfiConverterTypeStatusResponseError.lower(value)
}


public struct StatusResponsePending {
    public var createdAt: UInt64
    /**
     * Polling interval in ms for the client
     */
    public var checkIn: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: UInt64, 
        /**
         * Polling interval in ms for the client
         */checkIn: UInt64) {
        self.createdAt = createdAt
        self.checkIn = checkIn
    }
}



extension StatusResponsePending: Equatable, Hashable {
    public static func ==(lhs: StatusResponsePending, rhs: StatusResponsePending) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.checkIn != rhs.checkIn {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
        hasher.combine(checkIn)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponsePending: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponsePending {
        return
            try StatusResponsePending(
                createdAt: FfiConverterUInt64.read(from: &buf), 
                checkIn: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: StatusResponsePending, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.createdAt, into: &buf)
        FfiConverterUInt64.write(value.checkIn, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponsePending_lift(_ buf: RustBuffer) throws -> StatusResponsePending {
    return try FfiConverterTypeStatusResponsePending.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponsePending_lower(_ value: StatusResponsePending) -> RustBuffer {
    return FfiConverterTypeStatusResponsePending.lower(value)
}


public struct Transaction {
    public var from: Address
    public var to: Address
    public var value: U256
    public var gas: U64
    public var data: Bytes
    public var nonce: U64
    public var chainId: String
    public var gasPrice: U256
    public var maxFeePerGas: U256
    public var maxPriorityFeePerGas: U256

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(from: Address, to: Address, value: U256, gas: U64, data: Bytes, nonce: U64, chainId: String, gasPrice: U256, maxFeePerGas: U256, maxPriorityFeePerGas: U256) {
        self.from = from
        self.to = to
        self.value = value
        self.gas = gas
        self.data = data
        self.nonce = nonce
        self.chainId = chainId
        self.gasPrice = gasPrice
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
    }
}



extension Transaction: Equatable, Hashable {
    public static func ==(lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.gas != rhs.gas {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.gasPrice != rhs.gasPrice {
            return false
        }
        if lhs.maxFeePerGas != rhs.maxFeePerGas {
            return false
        }
        if lhs.maxPriorityFeePerGas != rhs.maxPriorityFeePerGas {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(gas)
        hasher.combine(data)
        hasher.combine(nonce)
        hasher.combine(chainId)
        hasher.combine(gasPrice)
        hasher.combine(maxFeePerGas)
        hasher.combine(maxPriorityFeePerGas)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return
            try Transaction(
                from: FfiConverterTypeAddress.read(from: &buf), 
                to: FfiConverterTypeAddress.read(from: &buf), 
                value: FfiConverterTypeU256.read(from: &buf), 
                gas: FfiConverterTypeU64.read(from: &buf), 
                data: FfiConverterTypeBytes.read(from: &buf), 
                nonce: FfiConverterTypeU64.read(from: &buf), 
                chainId: FfiConverterString.read(from: &buf), 
                gasPrice: FfiConverterTypeU256.read(from: &buf), 
                maxFeePerGas: FfiConverterTypeU256.read(from: &buf), 
                maxPriorityFeePerGas: FfiConverterTypeU256.read(from: &buf)
        )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.from, into: &buf)
        FfiConverterTypeAddress.write(value.to, into: &buf)
        FfiConverterTypeU256.write(value.value, into: &buf)
        FfiConverterTypeU64.write(value.gas, into: &buf)
        FfiConverterTypeBytes.write(value.data, into: &buf)
        FfiConverterTypeU64.write(value.nonce, into: &buf)
        FfiConverterString.write(value.chainId, into: &buf)
        FfiConverterTypeU256.write(value.gasPrice, into: &buf)
        FfiConverterTypeU256.write(value.maxFeePerGas, into: &buf)
        FfiConverterTypeU256.write(value.maxPriorityFeePerGas, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}


public struct TransactionFee {
    public var fee: Amount
    public var localFee: Amount

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fee: Amount, localFee: Amount) {
        self.fee = fee
        self.localFee = localFee
    }
}



extension TransactionFee: Equatable, Hashable {
    public static func ==(lhs: TransactionFee, rhs: TransactionFee) -> Bool {
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.localFee != rhs.localFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fee)
        hasher.combine(localFee)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionFee: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionFee {
        return
            try TransactionFee(
                fee: FfiConverterTypeAmount.read(from: &buf), 
                localFee: FfiConverterTypeAmount.read(from: &buf)
        )
    }

    public static func write(_ value: TransactionFee, into buf: inout [UInt8]) {
        FfiConverterTypeAmount.write(value.fee, into: &buf)
        FfiConverterTypeAmount.write(value.localFee, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionFee_lift(_ buf: RustBuffer) throws -> TransactionFee {
    return try FfiConverterTypeTransactionFee.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionFee_lower(_ value: TransactionFee) -> RustBuffer {
    return FfiConverterTypeTransactionFee.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BridgingError {
    
    case noRoutesAvailable
    case insufficientFunds
    case insufficientGasFunds
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBridgingError: FfiConverterRustBuffer {
    typealias SwiftType = BridgingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BridgingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .noRoutesAvailable
        
        case 2: return .insufficientFunds
        
        case 3: return .insufficientGasFunds
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BridgingError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .noRoutesAvailable:
            writeInt(&buf, Int32(1))
        
        
        case .insufficientFunds:
            writeInt(&buf, Int32(2))
        
        
        case .insufficientGasFunds:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBridgingError_lift(_ buf: RustBuffer) throws -> BridgingError {
    return try FfiConverterTypeBridgingError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBridgingError_lower(_ value: BridgingError) -> RustBuffer {
    return FfiConverterTypeBridgingError.lower(value)
}



extension BridgingError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Currency {
    
    case usd
    case eur
    case gbp
    case aud
    case cad
    case inr
    case jpy
    case btc
    case eth
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurrency: FfiConverterRustBuffer {
    typealias SwiftType = Currency

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Currency {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .usd
        
        case 2: return .eur
        
        case 3: return .gbp
        
        case 4: return .aud
        
        case 5: return .cad
        
        case 6: return .inr
        
        case 7: return .jpy
        
        case 8: return .btc
        
        case 9: return .eth
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Currency, into buf: inout [UInt8]) {
        switch value {
        
        
        case .usd:
            writeInt(&buf, Int32(1))
        
        
        case .eur:
            writeInt(&buf, Int32(2))
        
        
        case .gbp:
            writeInt(&buf, Int32(3))
        
        
        case .aud:
            writeInt(&buf, Int32(4))
        
        
        case .cad:
            writeInt(&buf, Int32(5))
        
        
        case .inr:
            writeInt(&buf, Int32(6))
        
        
        case .jpy:
            writeInt(&buf, Int32(7))
        
        
        case .btc:
            writeInt(&buf, Int32(8))
        
        
        case .eth:
            writeInt(&buf, Int32(9))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrency_lift(_ buf: RustBuffer) throws -> Currency {
    return try FfiConverterTypeCurrency.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrency_lower(_ value: Currency) -> RustBuffer {
    return FfiConverterTypeCurrency.lower(value)
}



extension Currency: Equatable, Hashable {}




public enum Erc6492Error {

    
    
    case RpcError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeErc6492Error: FfiConverterRustBuffer {
    typealias SwiftType = Erc6492Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc6492Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .RpcError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Erc6492Error, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .RpcError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension Erc6492Error: Equatable, Hashable {}

extension Erc6492Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum RouteResponse {
    
    case success(RouteResponseSuccess
    )
    case error(RouteResponseError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponse: FfiConverterRustBuffer {
    typealias SwiftType = RouteResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .success(try FfiConverterTypeRouteResponseSuccess.read(from: &buf)
        )
        
        case 2: return .error(try FfiConverterTypeRouteResponseError.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .success(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRouteResponseSuccess.write(v1, into: &buf)
            
        
        case let .error(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeRouteResponseError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponse_lift(_ buf: RustBuffer) throws -> RouteResponse {
    return try FfiConverterTypeRouteResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponse_lower(_ value: RouteResponse) -> RustBuffer {
    return FfiConverterTypeRouteResponse.lower(value)
}



extension RouteResponse: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum RouteResponseSuccess {
    
    case available(RouteResponseAvailable
    )
    case notRequired(RouteResponseNotRequired
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponseSuccess: FfiConverterRustBuffer {
    typealias SwiftType = RouteResponseSuccess

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseSuccess {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .available(try FfiConverterTypeRouteResponseAvailable.read(from: &buf)
        )
        
        case 2: return .notRequired(try FfiConverterTypeRouteResponseNotRequired.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteResponseSuccess, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .available(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRouteResponseAvailable.write(v1, into: &buf)
            
        
        case let .notRequired(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeRouteResponseNotRequired.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseSuccess_lift(_ buf: RustBuffer) throws -> RouteResponseSuccess {
    return try FfiConverterTypeRouteResponseSuccess.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseSuccess_lower(_ value: RouteResponseSuccess) -> RustBuffer {
    return FfiConverterTypeRouteResponseSuccess.lower(value)
}



extension RouteResponseSuccess: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum StatusResponse {
    
    case pending(StatusResponsePending
    )
    case completed(StatusResponseCompleted
    )
    case error(StatusResponseError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStatusResponse: FfiConverterRustBuffer {
    typealias SwiftType = StatusResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatusResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending(try FfiConverterTypeStatusResponsePending.read(from: &buf)
        )
        
        case 2: return .completed(try FfiConverterTypeStatusResponseCompleted.read(from: &buf)
        )
        
        case 3: return .error(try FfiConverterTypeStatusResponseError.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StatusResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .pending(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStatusResponsePending.write(v1, into: &buf)
            
        
        case let .completed(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeStatusResponseCompleted.write(v1, into: &buf)
            
        
        case let .error(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeStatusResponseError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponse_lift(_ buf: RustBuffer) throws -> StatusResponse {
    return try FfiConverterTypeStatusResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStatusResponse_lower(_ value: StatusResponse) -> RustBuffer {
    return FfiConverterTypeStatusResponse.lower(value)
}



extension StatusResponse: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFundingMetadata: FfiConverterRustBuffer {
    typealias SwiftType = [FundingMetadata]

    public static func write(_ value: [FundingMetadata], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFundingMetadata.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FundingMetadata] {
        let len: Int32 = try readInt(&buf)
        var seq = [FundingMetadata]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFundingMetadata.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [Transaction]

    public static func write(_ value: [Transaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Transaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [Transaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTransaction.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ value: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias B256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeB256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> B256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: B256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> B256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: B256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lift(_ value: RustBuffer) throws -> B256 {
    return try FfiConverterTypeB256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeB256_lower(_ value: B256) -> RustBuffer {
    return FfiConverterTypeB256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Bytes = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBytes: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bytes {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Bytes, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Bytes {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Bytes) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lift(_ value: RustBuffer) throws -> Bytes {
    return try FfiConverterTypeBytes.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBytes_lower(_ value: Bytes) -> RustBuffer {
    return FfiConverterTypeBytes.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U256 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU256: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U256 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U256, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U256 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U256) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lift(_ value: RustBuffer) throws -> U256 {
    return try FfiConverterTypeU256.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU256_lower(_ value: U256) -> RustBuffer {
    return FfiConverterTypeU256.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U64 = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeU64: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U64 {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: U64, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> U64 {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: U64) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lift(_ value: RustBuffer) throws -> U64 {
    return try FfiConverterTypeU64.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeU64_lower(_ value: U64) -> RustBuffer {
    return FfiConverterTypeU64.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Unit = UInt8

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnit: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Unit {
        return try FfiConverterUInt8.read(from: &buf)
    }

    public static func write(_ value: Unit, into buf: inout [UInt8]) {
        return FfiConverterUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: UInt8) throws -> Unit {
        return try FfiConverterUInt8.lift(value)
    }

    public static func lower(_ value: Unit) -> UInt8 {
        return FfiConverterUInt8.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnit_lift(_ value: UInt8) throws -> Unit {
    return try FfiConverterTypeUnit.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnit_lower(_ value: Unit) -> UInt8 {
    return FfiConverterTypeUnit.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func fundingMetadataToAmount(value: FundingMetadata) -> Amount  {
    return try!  FfiConverterTypeAmount.lift(try! rustCall() {
    uniffi_yttrium_fn_func_funding_metadata_to_amount(
        FfiConverterTypeFundingMetadata.lower(value),$0
    )
})
}
public func fundingMetadataToBridgingFeeAmount(value: FundingMetadata) -> Amount  {
    return try!  FfiConverterTypeAmount.lift(try! rustCall() {
    uniffi_yttrium_fn_func_funding_metadata_to_bridging_fee_amount(
        FfiConverterTypeFundingMetadata.lower(value),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_yttrium_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_yttrium_checksum_func_funding_metadata_to_amount() != 52092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_func_funding_metadata_to_bridging_fee_amount() != 38273) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_method_erc6492client_verify_signature() != 43990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_yttrium_checksum_constructor_erc6492client_new() != 33633) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all